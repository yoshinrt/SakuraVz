apache_child_terminate /// string apache_child_terminate ( void)\nこのリクエストの後にApacheプロセスを終了する
apache_lookup_uri /// object apache_lookup_uri ( string filename)\n リクエストの一部を指定したURIに対して行い、全ての情報を返す 
apache_note /// string apache_note ( string note_name, string [note_value])\nApacheリクエスト記号(note)を取得/設定する
apache_request_headers /// array apache_request_headers ( void)\nFetch all HTTP request headers
apache_response_headers /// array apache_response_headers ( void)\n Fetch all HTTP response headers 
apache_setenv /// int apache_setenv ( string variable, string value [, bool walk_to_top])\nApacheサブプロセスの環境変数を設定する
ascii2ebcdic /// int ascii2ebcdic ( string ascii_str)\nASCIIからEBCDICに文字列を変換する
ebcdic2ascii /// int ebcdic2ascii ( string ebcdic_str)\nEBCDICからASCIIに文字列を変換する
getallheaders /// array getallheaders ( void)\n全てのHTTPリクエストヘッダを取得する
virtual /// int virtual ( string filename)\nApacheサブリクエストを実行する
array_change_key_case /// array array_change_key_case ( array input [, int case])\n 配列のキーを全て小文字または大文字にして返す 
array_chunk /// array array_chunk ( array input, int size [, bool preserve_keys])\n配列を分割する
array_count_values /// array array_count_values ( array input)\n配列の値の数を数える
array_diff_assoc /// array array_diff_assoc ( array array1, array array2 [, array ...])\nComputes the difference of arrays with additional index check
array_diff /// array array_diff ( array array1, array array2 [, array ...])\n配列の差を計算する
array_fill /// array array_fill ( int start_index, int num, mixed value)\n配列を指定した値で埋める
array_filter /// array array_filter ( array input [, mixed callback])\n コールバック関数を使用する配列要素フィルタ 
array_flip /// array array_flip ( array trans)\n配列の値を反転にする
array_intersect_assoc /// array array_intersect_assoc ( array array1, array array2 [, array ...])\nComputes the intersection of arrays with additional index check
array_intersect /// array array_intersect ( array array1, array array2 [, array ...])\n配列の共通項を計算する
array_key_exists /// bool array_key_exists ( mixed key, array search)\n 指定したキーまたは添字が配列にあるかどうかを調べる 
array_keys /// array array_keys ( array input [, mixed search_value])\n配列のキーをすべて返す
array_map /// array array_map ( mixed callback, array arr1 [, array arr2...])\n 指定した配列の要素にコールバック関数を適用する 
array_merge_recursive /// array array_merge_recursive ( array array1, array array2 [, array ...])\n二つ以上の配列を再帰的にマージする
array_merge /// array array_merge ( array array1, array array2 [, array ...])\n二つ以上の配列をマージする
array_multisort /// bool array_multisort ( array ar1 [, mixed arg [, mixed ... [, array ...]]])\n複数の多次元の配列をソートする
array_pad /// array array_pad ( array input, int pad_size, mixed pad_value)\n指定長、指定した値で配列を埋める
array_pop /// mixed array_pop ( array array)\n配列の末尾から要素を取り除く
array_push /// int array_push ( array array, mixed var [, mixed ...])\n一つ以上の要素を配列の最後に追加する
array_rand /// mixed array_rand ( array input [, int num_req])\n配列から一つ以上の要素をランダムに取得する
array_reduce /// mixed array_reduce ( array input, mixed callback [, int initial])\n コールバックを用いて配列を普通の値に変更することにより、配列を再 帰的に減らします。 
array_reverse /// array array_reverse ( array array [, bool preserve_keys])\n逆順にした配列を返す
array_search /// mixed array_search ( mixed needle, array haystack [, bool strict])\n 指定した値を配列で検索し、見付かった場合に対応するキーを返す 
array_shift /// mixed array_shift ( array array)\n配列の先頭から要素を一つ取り出す
array_slice /// array array_slice ( array array, int offset [, int length])\n配列を要素を展開する
array_splice /// array array_splice ( array input, int offset [, int length [, array replacement]])\n配列の一部を削除し、他の要素で置換する
array_sum /// mixed array_sum ( array arr)\n 配列の中の値の合計を計算する 
array_unique /// array array_unique ( array array)\n配列から重複した値を削除する
array_unshift /// int array_unshift ( array array, mixed var [, mixed ...])\n 一つ以上の要素を配列の最初に加える 
array_values /// array array_values ( array input)\n配列の全ての値を返す
array_walk /// int array_walk ( array arr, string func [, mixed userdata])\n 配列の各メンバーにユーザー関数を適用する。 
array /// array array ( [mixed ...])\n配列を生成する
arsort /// void arsort ( array array [, int sort_flags])\n 連想キーと要素との関係を維持しつつ配列を逆順にソートする 
asort /// void asort ( array array [, int sort_flags])\n 連想キーと要素との関係を維持しつつ配列をソートする 
compact /// array compact ( mixed varname [, mixed ...])\n 変数名とその値から配列を作成する 
count /// int count ( mixed var)\n変数に含まれる要素の数を数える
current /// mixed current ( array array)\n配列内のカレントの要素を返す
each /// array each ( array array)\n 配列から、次のキーと値のペアを返す 
end /// mixed end ( array array)\n 配列の内部ポインタを最終要素にセットする 
extract /// int extract ( array var_array, int [extract_type], string [prefix])\n 配列からシンボルテーブルに変数をインポートする 
in_array /// bool in_array ( mixed needle, array haystack [, bool strict])\n配列に値がある場合にTRUEを返す
key /// mixed key ( array array)\n連想配列からキーを取り出す
krsort /// int krsort ( array array, int [sort_flags])\n配列をキーで逆順にソートする
ksort /// int ksort ( array array, int [sort_flags])\n配列をキーでソートする
list /// void list ( mixed ...)\n 配列と同様の形式で、複数の変数への代入を行います 
natcasesort /// void natcasesort ( array array)\n 大文字小文字を区別しない"自然順"アルゴリズムを用いて配列をソートする 
natsort /// void natsort ( array array)\n "自然順"アルゴリズムで配列をソートする 
next /// mixed next ( array array)\n 内部配列ポインタを進める 
pos /// mixed pos ( array array)\n配列から現在の要素を得る
prev /// mixed prev ( array array)\n内部の配列ポインタを1つ前に戻す
range /// array range ( mixed low, mixed high)\n ある範囲の整数を有する配列を作成する 
reset /// mixed reset ( array array)\n 配列の内部ポインタを先頭の要素にセットする 
rsort /// void rsort ( array array, int [sort_flags])\n配列を逆順にソートします
shuffle /// void shuffle ( array array)\n配列をシャッフルする
sizeof /// int sizeof ( mixed var)\n変数の要素数を取得する
sort /// void sort ( array array, int [sort_flags])\n配列をソートする
uasort /// void uasort ( array array, function cmp_function)\n ユーザー定義の比較関数で配列をソートし、連想インデックスを保持 する 
uksort /// void uksort ( array array, function cmp_function)\n ユーザー定義の比較関数を用いてキーで配列をソートします 
usort /// void usort ( array array, string cmp_function)\n ユーザー定義の比較関数により値で配列をソートします 
aspell_check_raw /// bool aspell_check_raw ( int dictionary_link, string word)\n 大文字小文字の変更や削除を行うことなく、単語のチェックを行います。 
aspell_check /// boolean aspell_check ( int dictionary_link, string word)\n単語をチェックする [古い関数]
aspell_new /// int aspell_new ( string master [, string personal])\n新しい辞書をロードする [古い関数]
aspell_suggest /// array aspell_suggest ( int dictionary_link, string word)\n単語スペルの修正案を示す [古い関数]
bcadd /// string bcadd ( string left operand, string right operand, int [scale])\n2つの任意精度の数値による加算
bccomp /// int bccomp ( string left operand, string right operand, int [scale])\n2 つの任意精度数値の比較
bcdiv /// string bcdiv ( string left operand, string right operand, int [scale])\n2つの任意精度数値による除算
bcmod /// string bcmod ( string left operand, string modulus)\n2 つの任意精度数値による剰余
bcmul /// string bcmul ( string left operand, string right operand, int [scale])\n2つの任意精度数値による乗算
bcpow /// string bcpow ( string x, string y, int [scale])\n任意精度数値のべき乗
bcscale /// string bcscale ( int scale)\n すべての BC 演算関数におけるデフォルトのスケール設定 
bcsqrt /// string bcsqrt ( string operand, int [scale])\n任意精度数値の平方根を得ます
bcsub /// string bcsub ( string left operand, string right operand, int [scale])\n任意精度数値による減算
bzclose /// int bzclose ( int bz)\nbzip2ファイルポインタを閉じる
bzcompress /// string bzcompress ( string source [, int blocksize [, int workfactor]])\n文字列をbzip2形式のデータに圧縮する
bzdecompress /// string bzdecompress ( string source [, int small])\nbzip2形式のデータを解凍する
bzerrno /// int bzerrno ( int bz)\nbzip2エラー番号を返す
bzerror /// array bzerror ( int bz)\nbzip2エラー番号とエラー文字列を配列で返す
bzerrstr /// string bzerrstr ( int bz)\nbzip2エラー文字列を返す
bzflush /// int bzflush ( int bz)\n 全てのバッファリングされたデータを強制的に書き込む 
bzopen /// int bzopen ( string filename, string mode)\nbzip2圧縮されたファイルをオープンする
bzread /// string bzread ( int bz [, int length])\nバイナリ対応のbzip2ファイル読み込み
bzwrite /// int bzwrite ( int bz, string data [, int length])\nバイナリ対応のbzip2ファイルへの書き込み
cal_days_in_month /// int cal_days_in_month ( int calendar, int month, int year)\n 指定した年とカレンダについて日数を返す calendar 
cal_from_jd /// array cal_from_jd ( int jd, int calendar)\n ユリウス積算日からサポートされるカレンダに変換し、拡張情報を返す 
cal_info /// array cal_info ( int calendar)\n特定のカレンダに関する情報を返す
cal_to_jd /// int cal_to_jd ( int calendar, int month, int day, int year)\n サポートされるカレンダからユリウス積算日に変換する 
easter_date /// int easter_date ( int year)\n 指定した年における復活祭の真夜中のUNIX時を得る 
easter_days /// int easter_days ( int year)\n 指定した年において3月21日以降、復活祭までの日数を得る 
FrenchToJD /// int frenchtojd ( int month, int day, int year)\n フランス革命暦をユリウス積算日に変換する 
GregorianToJD /// int gregoriantojd ( int month, int day, int year)\n グレゴリウス日をユリウス積算日に変換する 
JDDayOfWeek /// mixed jddayofweek ( int julianday, int mode)\n曜日を返す
JDMonthName /// string jdmonthname ( int julianday, int mode)\n月の名前を返す
JDToFrench /// string jdtofrench ( int juliandaycount)\n ユリウス積算日をフランス革命暦(共和暦)に変換する 
JDToGregorian /// string jdtogregorian ( int julianday)\nユリウス積算日をグレゴリウス日に変換する
JDToJewish /// string jdtojewish ( int julianday)\n ユリウス積算日をユダヤ暦に変換する 
JDToJulian /// string jdtojulian ( int julianday)\n ユリウス積算日をユリウス暦に変換する 
jdtounix /// int jdtounix ( int jday)\nユリウス歴をUNIXタイムスタンプに変換する
JewishToJD /// int jewishtojd ( int month, int day, int year)\n ユダヤ暦の日付けをユリウス積算日に変換する 
JulianToJD /// int juliantojd ( int month, int day, int year)\n ユリウス暦をユリウス積算日に変換する 
unixtojd /// int unixtojd ( int [timestamp])\nUNIXタイムスタンプをユリウス歴に変換する
ccvs_add /// string ccvs_add ( string session, string invoice, string argtype, string argval)\nトランザクションにデータを追加する
ccvs_auth /// string ccvs_auth ( string session, string invoice)\n あるトランザクションにおいてクレジット認証を行う 
ccvs_command /// string ccvs_command ( string session, string type, string argval)\n 単一のプロトコルに基づく、一般的なCCVS APIで利用できないコマンド を実行する 
ccvs_count /// int ccvs_count ( string session, string type)\n システムに保存された指定した型のトランザクション数を得る 
ccvs_delete /// string ccvs_delete ( string session, string invoice)\nトランザクションを削除する
ccvs_done /// string ccvs_done ( string sess)\nCCVSエンジンを終了し、クリアする
ccvs_init /// string ccvs_init ( string name)\nCCVSを初期化する
ccvs_lookup /// string ccvs_lookup ( string session, string invoice, int inum)\n データベース #にある特定の型の項目を探す 
ccvs_new /// string ccvs_new ( string session, string invoice)\n新規に空のトランザクションを生成する
ccvs_report /// string ccvs_report ( string session, string type)\nバックグラウン通信プロセスの状態を返す
ccvs_return /// string ccvs_return ( string session, string invoice)\n クレジットカード所有者に店側から金を伝送する 
ccvs_reverse /// string ccvs_reverse ( string session, string invoice)\n 処理済みの認証を完全に取り消す 
ccvs_sale /// string ccvs_sale ( string session, string invoice)\n クレジットカード所有者から店側に金を伝送する 
ccvs_status /// string ccvs_status ( string session, string invoice)\n送付状のステータスを確認する
ccvs_textvalue /// string ccvs_textvalue ( string session)\n前の関数コールに関する返り値を取得する
ccvs_void /// string ccvs_void ( string session, string invoice)\n 完了したトランザクションを完全に取り消す 
COM /// COM クラスは、PHPスクリプトに統合された (D)COMコンポーネントのフ レームワークを提供します。 メソッドstring COM::COM ( string module_name [, string server_name [, int codepage]])\nCOM class
VARIANT /// VARIANT構造体に変数をラップするための簡単なコンテナクラス。 メソッドstring VARIANT::VARIANT ( [mixed value [, int type [, int codepage]]])\nVARIANT クラス
com_addref /// void com_addref ( void)\n コンポーネントリファレンスカウンタを増やす 
com_get /// mixed com_get ( resource com_object, string property)\n COMコンポーネントのプロパティの値を得る 
com_invoke /// mixed com_invoke ( resource com_object, string function_name, mixed [function parameters, ...] )\n COMコンポーネントのメソッドをコールします。 
com_isenum /// void com_isenum ( object com_module)\nIEnumVariantを取得する
com_load_typelib /// void com_load_typelib ( string typelib_name [, int case_insensitive])\nTypelibをロードする
com_load /// string com_load ( string module name, string [server name] [, int codepage])\n COMコンポーネントへの新規リファレンスを作成する 
com_propget /// mixed com_propget ( resource com_object, string property)\n COMコンポーネントのプロパティの値を得る 
com_propput /// void com_propput ( resource com_object, string property, mixed value)\n COMコンポーネントのプロパティに値を代入する 
com_propset /// void com_propset ( resource com_object, string property, mixed value)\n COMコンポーネントのプロパティに値を代入する 
com_release /// void com_release ( void)\n コンポーネントリファレンスカウンタを減らす 
com_set /// void com_set ( resource com_object, string property, mixed value)\n COMコンポーネントのプロパティに値を代入する 
call_user_method_array /// mixed call_user_method_array ( string method_name, object obj [, array paramarr])\n パラメータの配列を指定してユーザメソッドをコールする 
call_user_method /// mixed call_user_method ( string method_name, object obj [, mixed parameter [, mixed ...]])\n 指定したオブジェクトのユーザーメソッドをコールする 
class_exists /// bool class_exists ( string class_name)\nクラスが定義済か確認する
get_class_methods /// array get_class_methods ( string class_name)\nクラスメソッドの名前を連想配列として返す
get_class_vars /// array get_class_vars ( string class_name)\n クラスのデフォルトプロパティを配列として返す 
get_class /// string get_class ( object obj)\nオブジェクトのクラス名を返す
get_declared_classes /// array get_declared_classes ( void)\n定義済のクラスの名前を配列として返す
get_object_vars /// array get_object_vars ( object obj)\nオブジェクトプロパティを配列として返す
get_parent_class /// string get_parent_class ( mixed obj)\nオブジェクトの親クラスの名前を返す
is_a /// bool is_a ( object object, string class_name)\n Returns TRUE if the object is of this class or has this class as one of its parents 
is_subclass_of /// bool is_subclass_of ( object obj, string superclass)\n あるオブジェクトが指定したクラスのサブクラスに属するかどうかを調 べる 
method_exists /// bool method_exists ( object object, string method_name)\nクラスメソッドが存在するかどうかを確認する
cpdf_add_annotation /// void cpdf_add_annotation ( int pdf document, float llx, float lly, float urx, float ury, string title, string content, int [mode])\n注記を追加する
cpdf_add_outline /// void cpdf_add_outline ( int pdf document, string text)\n現在のページにブックマークを追加する
cpdf_arc /// void cpdf_arc ( int pdf document, float x-coor, float y-coor, float radius, float start, float end, int mode)\n円弧を描く
cpdf_begin_text /// void cpdf_begin_text ( int pdf document)\nテキストセクションを開始する
cpdf_circle /// void cpdf_circle ( int pdf document, float x-coor, float y-coor, float radius [, int mode])\n円を描く
cpdf_clip /// void cpdf_clip ( int pdf document)\nカレントのパスを切り取る
cpdf_close /// void cpdf_close ( int pdf document)\npdf ドキュメントを閉じる
cpdf_closepath_fill_stroke /// void cpdf_closepath_fill_stroke ( int pdf document)\nパスを閉じ、塗りつぶし、描く
cpdf_closepath_stroke /// void cpdf_closepath_stroke ( int pdf document)\nパスを閉じ、線をパスに沿って描く
cpdf_closepath /// void cpdf_closepath ( int pdf document)\nパスを閉じる
cpdf_continue_text /// void cpdf_continue_text ( int pdf document, string text)\n次の行にテキストを出力する
cpdf_curveto /// void cpdf_curveto ( int pdf document, float x1, float y1, float x2, float y2, float x3, float y3, int mode)\n曲線を描く
cpdf_end_text /// void cpdf_end_text ( int pdf document)\nテキストセクションを終了する
cpdf_fill_stroke /// void cpdf_fill_stroke ( int pdf document)\nカレントのパスを塗りつぶし、描く
cpdf_fill /// void cpdf_fill ( int pdf document)\nカレントのパスを塗りつぶす
cpdf_finalize_page /// void cpdf_finalize_page ( int pdf document, int page number)\nページを終了する
cpdf_finalize /// void cpdf_finalize ( int pdf document)\nドキュメントを終了する
cpdf_global_set_document_limits /// void cpdf_global_set_document_limits ( int maxpages, int maxfonts, int maximages, int maxannotations, int maxobjects)\nPDFドキュメントの制限を設定する
cpdf_import_jpeg /// int cpdf_import_jpeg ( int pdf document, string file name, float x-coor, float y-coor, float angle, float width, float height, float x-scale, float y-scale, int [mode])\nJPEG 画像をオープンする
cpdf_lineto /// void cpdf_lineto ( int pdf document, float x-coor, float y-coor, int mode)\n線を描く
cpdf_moveto /// void cpdf_moveto ( int pdf document, float x-coor, float y-coor, int mode)\nカレントのポイントを設定する
cpdf_newpath /// void cpdf_newpath ( int pdf document)\n新規パスを開始する
cpdf_open /// int cpdf_open ( int compression, string filename)\n新規pdfドキュメントをオープンする
cpdf_output_buffer /// void cpdf_output_buffer ( int pdf document)\npdf ドキュメントをメモリバッファに出力する
cpdf_page_init /// void cpdf_page_init ( int pdf document, int page number, int orientation, float height, float width, float unit)\n新規ページを開始する
cpdf_place_inline_image /// void cpdf_place_inline_image ( int pdf document, int image, float x-coor, float y-coor, float angle, float width, float height, int [mode])\n画像をページに置く
cpdf_rect /// void cpdf_rect ( int pdf document, float x-coor, float y-coor, float width, float height, int mode)\n矩形を描く
cpdf_restore /// void cpdf_restore ( int pdf document)\n以前に保存した環境を回復させる
cpdf_rlineto /// void cpdf_rlineto ( int pdf document, float x-coor, float y-coor, int mode)\n線を描く
cpdf_rmoveto /// void cpdf_rmoveto ( int pdf document, float x-coor, float y-coor, int mode)\nカレントのポイントを設定する
cpdf_rotate_text /// void cpdf_rotate_text ( int pdfdoc, float angle)\n テキスト回転角を設定する 
cpdf_rotate /// void cpdf_rotate ( int pdf document, float angle)\n回転を設定する
cpdf_save_to_file /// void cpdf_save_to_file ( int pdf document, string filename)\npdf ドキュメントをファイルに書きこむ
cpdf_save /// void cpdf_save ( int pdf document)\n現在の環境を保存する
cpdf_scale /// void cpdf_scale ( int pdf document, float x-scale, float y-scale)\n倍率を設定する
cpdf_set_action_url /// void cpdf_set_action_url ( int pdfdoc, float xll, float yll, float xur, float xur, string url [, int mode])\n ハイパーリンクを設定する 
cpdf_set_char_spacing /// void cpdf_set_char_spacing ( int pdf document, float space)\n文字間隔を設定する
cpdf_set_creator /// void cpdf_set_creator ( string creator)\npdf ドキュメントの creator フィールドを設定する
cpdf_set_current_page /// void cpdf_set_current_page ( int pdf document, int page number)\nカレントページを設定する
cpdf_set_font_directories /// void cpdf_set_font_directories ( int pdfdoc, string pfmdir, string pfbdir)\n 外部フォントを使用した際、検索するディレクトリを設定する 
cpdf_set_font_map_file /// void cpdf_set_font_map_file ( int pdfdoc, string filename)\n 外部フォントを使用している場合、フォント名をファイル名変換マップ に設定する 
cpdf_set_font /// void cpdf_set_font ( int pdf document, string font name, float size, string encoding)\nフォントの種類とサイズを選択する
cpdf_set_horiz_scaling /// void cpdf_set_horiz_scaling ( int pdf document, float scale)\nテキストの水平方向の倍率を設定する
cpdf_set_keywords /// void cpdf_set_keywords ( string keywords)\npdfドキュメントのkeywords フィールドを設定する
cpdf_set_leading /// void cpdf_set leading ( int pdf document, float distance)\nテキスト行の間隔を設定する
cpdf_set_page_animation /// void cpdf_set_page_animation ( int pdf document, int transition, float duration)\nページ間の移行時間を設定する
cpdf_set_subject /// void cpdf_set_subject ( string subject)\npdfドキュメントのsubject フィールドを設定する
cpdf_set_text_matrix /// void cpdf_set_text_matrix ( int pdf document, array matrix)\nテキスト行列を設定する
cpdf_set_text_pos /// void cpdf_set_text_pos ( int pdf document, float x-coor, float y-coor, int mode)\nテキスト位置を設定する
cpdf_set_text_rendering /// void cpdf_set_text_rendering ( int pdf document, int mode)\nテキストのレンダリング法を定義する
cpdf_set_text_rise /// void cpdf_set_text_rise ( int pdf document, float value)\nテキストの高さを設定する
cpdf_set_title /// void cpdf_set_title ( string title)\npdf ドキュメントの title フィールドを設定する
cpdf_set_viewer_preferences /// void cpdf_set_viewer_preferences ( int pdfdoc, array preferences)\n ドキュメントのビューワ上での表示方法を設定する 
cpdf_set_word_spacing /// void cpdf_set_word_spacing ( int pdf document, float space)\n単語間の間隔を設定する
cpdf_setdash /// void cpdf_setdash ( int pdf document, float white, float black)\n破線のパターンを設定する
cpdf_setflat /// void cpdf_setflat ( int pdf document, float value)\nflatness を設定する
cpdf_setgray_fill /// void cpdf_setgray_fill ( int pdf document, float value)\n塗りつぶし色をグレー値に設定する
cpdf_setgray_stroke /// void cpdf_setgray_stroke ( int pdf document, float gray value)\n描画色をグレー値に設定する
cpdf_setgray /// void cpdf_setgray ( int pdf document, float gray value)\n描画、塗りつぶし色をグレー値に設定する
cpdf_setlinecap /// void cpdf_setlinecap ( int pdf document, int value)\nlinecap パラメータを設定する
cpdf_setlinejoin /// void cpdf_setlinejoin ( int pdf document, long value)\nlinejoin パラメータを設定するparameter
cpdf_setlinewidth /// void cpdf_setlinewidth ( int pdf document, float width)\n線幅を設定する
cpdf_setmiterlimit /// void cpdf_setmiterlimit ( int pdf document, float value)\nmiter のリミットを設定する
cpdf_setrgbcolor_fill /// void cpdf_setrgbcolor_fill ( int pdf document, float red value, float green value, float blue value)\n塗りつぶし色をRGBカラー値に設定する
cpdf_setrgbcolor_stroke /// void cpdf_setrgbcolor_stroke ( int pdf document, float red value, float green value, float blue value)\n描画色をRGBカラー値に設定する
cpdf_setrgbcolor /// void cpdf_setrgbcolor ( int pdf document, float red value, float green value, float blue value)\n描画色および塗りつぶし色をRGB値に設定??
cpdf_show_xy /// void cpdf_show_xy ( int pdf document, string text, float x-coor, float y-coor [, int mode])\n指定位置にテキストを出力する
cpdf_show /// void cpdf_show ( int pdf document, string text)\n現在位置にテキストを出力する
cpdf_stringwidth /// float cpdf_stringwidth ( int pdf document, string text)\nカレントフォントのテキストの幅を返す
cpdf_stroke /// void cpdf_stroke ( int pdf document)\nパスに沿って線を描く
cpdf_text /// void cpdf_text ( int pdf document, string text, float x-coor, float y-coor [, int mode [, float orientation [, int alignmode]]])\nテキストをパラメータを元に出力する
cpdf_translate /// void cpdf_translate ( int pdf document, float x-coor, float y-coor [, int mode])\n座標系の原点を設定する
crack_check /// bool crack_check ( [resource dictionary, string password])\n指定したパスワードに関して強度チェックを行う
crack_closedict /// bool crack_closedict ( [resource dictionary])\nオープンされているCrackLib辞書を閉じる
crack_getlastmessage /// string crack_getlastmessage ( void)\n直近の強度チェックからのメッセージを返す
crack_opendict /// resource crack_opendict ( string dictionary)\n新規CrackLib辞書をオープンする
curl_close /// void curl_close ( int ch)\nCURLセッションを閉じる
curl_errno /// int curl_errno ( int ch)\n直近のエラー番号を意味する整数を返す
curl_error /// string curl_error ( int ch)\n カレントのセッションに関して直近のエラー文字列を返す 
curl_exec /// bool curl_exec ( int ch)\nCURLセッションを実行する
curl_getinfo /// string curl_getinfo ( int ch, int opt)\n 指定した伝送に関する情報を得る 
curl_init /// int curl_init ( string [url])\nCURLセッションを初期化
curl_setopt /// bool curl_setopt ( int ch, string option, mixed value)\nCURL転送用オプションを設定する
curl_version /// string curl_version ( void)\nカレントのCURLのバージョンを返す
cybercash_base64_decode /// string cybercash_base64_decode ( string inbuff)\nBASE64デコードを行う
cybercash_base64_encode /// string cybercash_base64_encode ( string inbuff)\nBASE64エンコードを行う
cybercash_decr /// array cybercash_decr ( string wmk, string sk, string inbuff)\n???
cybercash_encr /// array cybercash_encr ( string wmk, string sk, string inbuff)\n???
cybermut_creerformulairecm /// string cybermut_creerformulairecm ( string url_CM, string version, string TPE, string montant, string ref_commande, string texte_libre, string url_retour, string url_retour_ok, string url_retour_err, string langue, string code_societe, string texte_bouton)\n支払リクエスト用HTMLフォームを生成
cybermut_creerreponsecm /// string cybermut_creerreponsecm ( string phrase)\n 支払い確認用画面を生成する 
cybermut_testmac /// bool cybermut_testmac ( string code_MAC, string version, string TPE, string cdate, string montant, string ref_commande, string texte_libre, string code-retour)\n 受信した確認用メッセージに虚偽のデータが含まれていないことを 確認する 
cyrus_authenticate /// bool cyrus_authenticate ( resource connection [, string mechlist [, string service [, string user [, int minssf [, int maxssf]]]]])\nCyrus IMAPサーバに対する認証を行う
cyrus_bind /// bool cyrus_bind ( resource connection, array callbacks)\nCyrus IMAP接続へのコールバックをバインドする
cyrus_close /// bool cyrus_close ( resource connection)\ncyrusサーバへの接続を閉じる
cyrus_connect /// resource cyrus_connect ( [string host [, string port [, int flags]]])\nCyrus IMAPサーバに接続する
cyrus_query /// bool cyrus_query ( resource connection, string query)\nCyrus IMAPサーバへクエリを送信する
cyrus_unbind /// bool cyrus_unbind ( resource connection, string trigger_name)\nUnbind ... 
ctype_alnum /// bool ctype_alnum ( string c)\n英数字かどうかを確認
ctype_alpha /// bool ctype_alpha ( string c)\n英字かどうかを確認
ctype_cntrl /// bool ctype_cntrl ( string c)\n制御文字かどうかを確認
ctype_digit /// bool ctype_digit ( string c)\n数字かどうかを確認
ctype_graph /// bool ctype_graph ( string c)\n空白を除き出力可能な文字かどうかを確認
ctype_lower /// bool ctype_lower ( string c)\n小文字かどうかを確認
ctype_print /// bool ctype_print ( string c)\n出力可能な文字かどうかを確認
ctype_punct /// bool ctype_punct ( string c)\n 空白文字以外の出力可能な文字または英数字かどうかを調べる 
ctype_space /// bool ctype_space ( string c)\n空白文字かどうか調べる
ctype_upper /// bool ctype_upper ( string c)\n大文字かどうか調べる
ctype_xdigit /// bool ctype_xdigit ( string c)\n 16進数を表す文字かどうかを調べる 
dba_close /// void dba_close ( int handle)\nデータベースを閉じる
dba_delete /// bool dba_delete ( string key, int handle)\nキーが指すエントリを削除する
dba_exists /// bool dba_exists ( string key, int handle)\nキーが存在するかどうかを確認する
dba_fetch /// string dba_fetch ( string key, int handle)\nキーが指すデータを取得する
dba_firstkey /// string dba_firstkey ( int handle)\n最初のキーを取得する
dba_handlers /// array dba_handlers ( void)\nList handlers available
dba_insert /// bool dba_insert ( string key, string value, int handle)\nエントリを挿入する
dba_list /// array dba_list ( void)\nList all open database files
dba_nextkey /// string dba_nextkey ( int handle)\n次のキーを取得する
dba_open /// int dba_open ( string path, string mode, string handler, [...])\nデータベースをオープンする
dba_optimize /// bool dba_optimize ( int handle)\nデータベースを最適化する
dba_popen /// int dba_popen ( string path, string mode, string handler, [...])\nデータベースを持続的にオープンする
dba_replace /// bool dba_replace ( string key, string value, int handle)\nエントリを置換または挿入する
dba_sync /// bool dba_sync ( int handle)\nデータベースを同期する
checkdate /// int checkdate ( int month, int day, int year)\nグレグリオ歴の日付/時刻の妥当性を確認します
date /// string date ( string format, int [timestamp])\nローカルの日付/時刻を書式化する
getdate /// array getdate ( int [timestamp])\n日付/時刻情報の取得
gettimeofday /// array gettimeofday ( void)\n現在の時間を得る
gmdate /// string gmdate ( string format, int [timestamp])\nGMT/CUT の日付／時刻を書式化
gmmktime /// int gmmktime ( int hour, int minute, int second, int month, int day, int year, int [is_dst])\nGMT日付によるUNIXタイムスタンプを取得する
gmstrftime /// string gmstrftime ( string format, int [timestamp])\n ロケールの設定に基づきGMT/CUT 時刻/日付をフォーマットする 
localtime /// array localtime ( int [timestamp], bool [is_associative])\nローカルタイムを得る
microtime /// string microtime ( void)\n 現在のUNIXタイムスタンプをマイクロ秒まで返す 
mktime /// int mktime ( int hour, int minute, int second, int month, int day, int year, int [is_dst])\n日付を UNIX のタイムスタンプとして取得する
strftime /// string strftime ( string format, int [timestamp])\n ローカルな設定に基づきローカルな日付・時間をフォーマットします 
strtotime /// int strtotime ( string time, int [now])\n 英文形式の日付をUNIXタイムスタンプに変換する 
time /// int time ( void)\n現在の UNIX タイムスタンプを返す
dbase_add_record /// bool dbase_add_record ( int dbase_identifier, array record)\ndBase データベースにレコードを追加する
dbase_close /// bool dbase_close ( int dbase_identifier)\ndBase データベースを閉じる
dbase_create /// int dbase_create ( string filename, array fields)\ndBase データベースを作成する
dbase_delete_record /// bool dbase_delete_record ( int dbase_identifier, int record)\ndBase データベースからレコードを削除する
dbase_get_record_with_names /// array dbase_get_record_with_names ( int dbase_identifier, int record)\n dBaseデータベースからレコードを連想配列として得る 
dbase_get_record /// array dbase_get_record ( int dbase_identifier, int record)\ndBase データベースからレコードを得る
dbase_numfields /// int dbase_numfields ( int dbase_identifier)\n dBase データベースにおけるフィールド数を返す 
dbase_numrecords /// int dbase_numrecords ( int dbase_identifier)\n dBase データベースにおけるレコード数を返す 
dbase_open /// int dbase_open ( string filename, int flags)\ndBase データベースをオープンする
dbase_pack /// bool dbase_pack ( int dbase_identifier)\ndBase データベースをパックする
dbase_replace_record /// bool dbase_replace_record ( int dbase_identifier, array record, int dbase_record_number)\ndBase データベースのレコードを置換する
dblist /// string dblist ( void)\n使用されているDBM互換ライブラリの一覧を返す
dbmclose /// bool dbmclose ( int dbm_identifier)\ndbm データベースを閉じます
dbmdelete /// bool dbmdelete ( int dbm_identifier, string key)\ndbm データベースから値を削除します
dbmexists /// bool dbmexists ( int dbm_identifier, string key)\ndbm データベースにキー検索を行います
dbmfetch /// string dbmfetch ( int dbm_identifier, string key)\n dbm データベースからキーの値を取り出します 
dbmfirstkey /// string dbmfirstkey ( int dbm_identifier)\ndbm データベースから最初のキーを取り出します
dbminsert /// int dbminsert ( int dbm_identifier, string key, string value)\ndbm データベースへの値の挿入
dbmnextkey /// string dbmnextkey ( int dbm_identifier, string key)\ndbm データベースから次のキーを取り出します
dbmopen /// int dbmopen ( string filename, string flags)\nDBMデータベースをオープンします
dbmreplace /// bool dbmreplace ( int dbm_identifier, string key, string value)\ndbm データベース中の値を置き換えます
dbx_close /// boolean dbx_close ( dbx_link_object link_identifier)\nオープンされた接続/データベースを閉じる
dbx_compare /// int dbx_compare ( array row_a, array row_b, string columnname_or_index [, int flags])\n ソートするために二つのレコードを比較する 
dbx_connect /// dbx_link_object dbx_connect ( string module, string host, string database, string username, string password [, int persistent])\n接続/データベースをオープンする
dbx_error /// string dbx_error ( dbx_link_object link_identifier)\n (接続時だけでなく)使用するモジュールの最新の関数コールにおけるエ ラーメッセージを出力する 
dbx_escape_string /// string dbx_escape_string ( object link_identifier, string text)\n Escape a string so it can safely be used in an sql-statement. 
dbx_query /// dbx_result_object dbx_query ( dbx_link_object link_identifier, string sql_statement [, long flags])\nクエリを送信し、(ある場合には)結果を全て取得する
dbx_sort /// boolean dbx_sort ( dbx_result_object result, string user_compare_function)\n カスタマイズされたsort関数により、dbx_queryから結果をソートする 
dbplus_add /// int dbplus_add ( resource relation, array tuple)\n関係にタプルを追加する
dbplus_aql /// resource dbplus_aql ( string query [, string server [, string dbpath]])\nAQLクエリを実行する
dbplus_chdir /// string dbplus_chdir ( [string newdir])\nデータベース仮想カレントディレクトリを設定/取得
dbplus_close /// int dbplus_close ( resource relation)\n関係を閉じる
dbplus_curr /// int dbplus_curr ( resource relation, array tuple)\n関係からカレントのタプルを取得
dbplus_errcode /// string dbplus_errcode ( int errno)\n 指定したエラーコードまたは直近のエラーに関するエラー文字列を取得 する 
dbplus_errno /// int dbplus_errno ( void)\n直近の操作に関するエラーコードを取得する
dbplus_find /// int dbplus_find ( resource relation, array constraints, mixed tuple)\n関係に拘束を設定する
dbplus_first /// int dbplus_first ( resource relation, array tuple)\n関係から最初のタプルを取得する
dbplus_flush /// int dbplus_flush ( resource relation)\n関係に行った全ての変更をフラッシュする
dbplus_freealllocks /// int dbplus_freealllocks ( void)\n このクライアントにより保持された全てのロックを解放する 
dbplus_freelock /// int dbplus_freelock ( resource relation, string tname)\nタプルの書き込みロックを解放する
dbplus_freerlocks /// int dbplus_freerlocks ( resource relation)\n指定した関係に関する全てのタプルロックを解放する
dbplus_getlock /// int dbplus_getlock ( resource relation, string tname)\nタプルの書き込みロックを取得する
dbplus_getunique /// int dbplus_getunique ( resource relation, int uniqueid)\nあうる関係のユニークなID番号を取得する
dbplus_info /// int dbplus_info ( resource relation, string key, array )\n???
dbplus_last /// int dbplus_last ( resource relation, array tuple)\n関係から直近のタプルを取得する
dbplus_lockrel /// int dbplus_lockrel ( resource relation)\n関係に書き込みロックを要求する
dbplus_next /// int dbplus_next ( resource relation, array )\n関係から次のタプルを取得する
dbplus_open /// resource dbplus_open ( string name)\n関係ファイルをオープンする
dbplus_prev /// int dbplus_prev ( resource relation, array tuple)\n関係から前のタプルを取得する
dbplus_rchperm /// int dbplus_rchperm ( resource relation, int mask, string user, string group)\n関係の許可属性を変更する
dbplus_rcreate /// resource dbplus_rcreate ( string name, mixed domlist [, boolean overwrite])\n関係を新規に作成する
dbplus_rcrtexact /// resource dbplus_rcrtexact ( string name, resource relation, boolean overwrite)\n
dbplus_rcrtlike /// resource dbplus_rcrtlike ( string name, resource relation, int flag)\n
dbplus_resolve /// int dbplus_resolve ( string relation_name)\n関係のホスト情報を取得する
dbplus_restorepos /// int dbplus_restorepos ( resource relation, array tuple)\n???
dbplus_rkeys /// resource dbplus_rkeys ( resource relation, mixed domlist)\n関係の主キーを新規に指定する
dbplus_ropen /// resource dbplus_ropen ( string name)\n関係ファイルをローカルにオープンする
dbplus_rquery /// int dbplus_rquery ( string query, string dbpath)\nローカルに(raw) AQLクエリを実行する
dbplus_rrename /// int dbplus_rrename ( resource relation, string name)\n関係の名前を変更する
dbplus_rsecindex /// resource dbplus_rsecindex ( resource relation, mixed domlist, int type)\n 関係に新規セカンダリインデックスを作成する 
dbplus_runlink /// int dbplus_runlink ( resource relation)\nファイルシステムから関係を削除する
dbplus_rzap /// int dbplus_rzap ( resource relation)\n関係から全てのタプルを削除する
dbplus_savepos /// int dbplus_savepos ( resource relation)\n???
dbplus_setindex /// int dbplus_setindex ( resource relation, string idx_name)\n???
dbplus_setindexbynumber /// int dbplus_setindexbynumber ( resource relation, int idx_number)\n???
dbplus_sql /// resource dbplus_sql ( string query, string server, string dbpath)\nSQLクエリを実行する
dbplus_tcl /// int dbplus_tcl ( int sid, string script)\nサーバ側でTCLコードを実行する
dbplus_tremove /// int dbplus_tremove ( resource relation, array tuple [, array current])\nタプルを削除し、新規カレントタプルを返す
dbplus_undo /// int dbplus_undo ( resource relation)\n???
dbplus_undoprepare /// int dbplus_undoprepare ( resource relation)\n???
dbplus_unlockrel /// int dbplus_unlockrel ( resource relation)\n関係の書き込みロックを中断する
dbplus_unselect /// int dbplus_unselect ( resource relation)\n関係から制約を削除する
dbplus_update /// int dbplus_update ( resource relation, array old, array new)\n関係の指定したタプルを更新する
dbplus_xlockrel /// int dbplus_xlockrel ( resource relation)\n関係の排他的ロックを要求する
dbplus_xunlockrel /// int dbplus_xunlockrel ( resource relation)\n関係の排他的ロックを解放する
dio_close /// void dio_close ( resource fd)\nfdで指定したファイル記述子を閉じる
dio_fcntl /// mixed dio_fcntl ( resource fd, int cmd [, mixed arg])\nfdについてCライブラリのfcntlを実行する
dio_open /// resource dio_open ( string filename, int flags [, int mode])\n 許可属性flagsと作成許可属性modeを指定して新規にfilenameをオープン する 
dio_read /// string dio_read ( resource fd [, int n])\n fdからnバイト読みこんで返す。nが指定されない場合は、1kブロックを 読みこむ 
dio_seek /// int dio_seek ( resource fd, int pos, int whence)\nfd上でwhenceからposに移動する
dio_stat /// array dio_stat ( resource fd)\n ファイル記述子fdに関するstat情報を取得する 
dio_tcsetattr /// dio_tcsetattr ( resource fd, array options)\n Sets terminal attributes and baud rate for a serial port 
dio_truncate /// bool dio_truncate ( resource fd, int offset)\n ファイル記述子fdをオフセットバイトへ丸める 
dio_write /// int dio_write ( resource fd, string data [, int len])\n オプションで丸め長さを指定してデータを書き込む 
chdir /// bool chdir ( string directory)\nディレクトリを変更します
chroot /// int chroot ( string directory)\nルートディレクトリを変更する
dir /// object dir ( string directory)\nディレクトリ・クラス
closedir /// void closedir ( resource dir_handle)\nディレクトリ・ハンドルをクローズします
getcwd /// string getcwd ( void)\nカレントのワーキングディレクトリを取得する
opendir /// resource opendir ( string path)\nディレクトリ・ハンドルのオープン
readdir /// string readdir ( resource dir_handle)\nディレクトリ・ハンドルからのエントリ読み込み
rewinddir /// void rewinddir ( resource dir_handle)\nディレクトリ・ハンドルを元に戻します
DomAttribute->name /// bool DomAttribute->name ( void)\n 属性の名前を返す 
DomAttribute->specified /// bool DomAttribute->specified ( void)\n 属性が指定されているかどうか調べる 
DomAttribute->value /// bool DomAttribute->value ( void)\n 属性の値を返す 
DomDocument->add_root [deprecated] /// resource DomDocument->add_root ( string name)\n ルートノードを追加する 
DomDocument->create_attribute /// object DomDocument->create_attribute ( string name, string value)\n 新規属性を作成する 
DomDocument->create_cdata_section /// string DomDocument->create_cdata_section ( string content)\n 新規cdataノードを作成する 
DomDocument->create_comment /// object DomDocument->create_comment ( string content)\n 新規コメントノードを作成する 
DomDocument->create_element_ns /// object DomDocument->create_element_ns ( string uri, string name [, string prefix])\n Create new element node with an associated namespace 
DomDocument->create_element /// object DomDocument->create_element ( string name)\n 新規エレメントノードを作成する 
DomDocument->create_entity_reference /// object DomDocument->create_entity_reference ( string content)\n 
DomDocument->create_processing_instruction /// string DomDocument->create_processing_instruction ( string content)\n 新規PIノードを作成する 
DomDocument->create_text_node /// object DomDocument->create_text_node ( string content)\n 新規テキストノードを作成する 
DomDocument->doctype /// object DomDocument->doctype ( void)\n ドキュメント型を返す 
DomDocument->document_element /// object DomDocument->document_element ( void)\n ルートエレメントノードを返す 
DomDocument->dump_file /// string DomDocument->dump_file ( string filename [, bool compressionmode [, bool format]])\n 内部XMLツリーをファイルにダンプする 
DomDocument->dump_mem /// string DomDocument->dump_mem ( [bool format])\n 内部XMLツリーを文字列にダンプする 
DomDocument->get_element_by_id /// object DomDocument->get_element_by_id ( string id)\n 
DomDocument->get_elements_by_tagname /// array DomDocument->get_elements_by_tagname ( string name)\n 
DomDocument->html_dump_mem /// string DomDocument->html_dump_mem ( void)\n HTMLとして文字列に内部XMLツリーをダンプする 
DomDocument->xinclude /// int DomDocument->xinclude ( void)\n Substitutes XIncludes in a DomDocument Object. 
DomDocumentType->entities /// array DomDocumentType->entities ( void)\n エントリのリスト返す 
DomDocumentType->internal_subset /// bool DomDocumentType->internal_subset ( void)\n 内部サブセットを返す 
DomDocumentType->name /// string DomDocumentType->name ( void)\n ドキュメントの型名を返す 
DomDocumentType->notations /// array DomDocumentType->notations ( void)\n ノーテーションのリストを返す 
DomDocumentType->public_id /// string DomDocumentType->public_id ( void)\n document typeのpublic IDを返す 
DomDocumentType->system_id /// string DomDocumentType->system_id ( void)\n document typeのsystem IDを返す 
DomElement->get_attribute_node /// object DomElement->get_attribute_node ( object attr)\n 属性の値を返す 
DomElement->get_attribute /// object DomElement->get_attribute ( string name)\n 属性の値を返す 
DomElement->get_elements_by_tagname /// bool DomElement->get_elements_by_tagname ( string name)\n タグ名により要素を取得する 
DomElement->has_attribute /// bool DomElement->has_attribute ( string name)\n 属性があるかどうかを調べる 
DomElement->remove_attribute /// bool DomElement->remove_attribute ( string name)\n 属性を削除する 
DomElement->set_attribute_node /// bool DomElement->set_attribute_node ( object attr)\n 新規属性を設定する 
DomElement->set_attribute /// bool DomElement->set_attribute ( string name, string value)\n 新規属性を追加する 
DomElement->tagname /// string DomElement->tagname ( void)\n 要素名を返す 
DomNode->add_namespace /// bool DomNode->add_namespace ( string uri, string prefix)\n Adds a namespace declaration to a node. 
DomNode->append_child /// object DomNode->append_child ( object newnode)\n 子ノードの最後に新規に子ノードを追加する 
DomNode->append_sibling /// object DomNode->append_sibling ( object newnode)\n 新規に兄弟をノードに追加する 
DomNode->attributes /// array DomNode->attributes ( void)\n 属性のリストを返す 
DomNode->child-nodes /// array DomNode->child_nodes ( void)\n 子ノードを返す 
DomNode->clone_node /// object DomNode->clone_node ( void)\n ノードの複製を作る 
DomNode->dump_node /// string DomNode->dump_node ( void)\n ノードを１つダンプする 
DomNode->first_child /// bool DomNode->first_child ( void)\n 最初の子ノードを返す 
DomNode->get_content /// string DomNode->get_content ( void)\n ノードのコンテンツを取得する 
DomNode->has_attributess /// bool DomNode->has_attributes ( void)\n ノードが属性を有しているかを調べる 
DomNode->has_child_nodes /// bool DomNode->has_child_nodes ( void)\n ノードが子ノードを有しているかを調べる 
DomNode->insert_before /// object DomNode->insert_before ( object newnode, object refnode)\n 新規ノードを子ノードとして挿入する 
DomNode->is_blank_node /// bool DomNode->is_blank_node ( void)\n ノードが空かどうか調べる 
DomNode->last_child /// object DomNode->last_child ( void)\n 最後の子ノードを返す 
DomNode->next_sibling /// object DomNode->next_sibling ( void)\n 次の兄弟ノードを返す 
DomNode->node_name /// string DomNode->node_name ( void)\n ノード名を返す 
DomNode->node_type /// int DomNode->node_type ( void)\n ノードの型を返す 
DomNode->node_value /// string DomNode->node_value ( void)\n ノードの値を返す 
DomNode->owner_document /// object DomNode->owner_document ( void)\n このノードが属するドキュメントを返す 
DomNode->parent_node /// object DomNode->parent_node ( void)\n 親ノードを返す 
DomNode->prefix /// string DomNode->prefix ( void)\n ノードの名前空間接頭辞を返す 
DomNode->previous_sibling /// object DomNode->previous_sibling ( void)\n 前の兄弟ノードを返す 
DomNode->remove_child /// object DomNode->remove_child ( object oldchild)\n 子ノードのリストから子ノードを削除する 
DomNode->replace_child /// object DomNode->replace_child ( object oldnode, object newnode)\n Replaces a child 
DomNode->replace_node /// object DomNode->replace_node ( void)\n ノードを置換する 
DomNode->set_content /// bool DomNode->set_content ( void)\n ノードのコンテンツを設定する 
DomNode->set_name /// bool DomNode->set_name ( void)\n ノードの名前を設定する 
DomNode->set_namespace /// void DomNode->set_namespace ( string uri [, string prefix])\n Sets namespace of a node. 
DomNode->unlink_node /// object DomNode->unlink_node ( void)\n ノードを削除する 
DomProcessingInstruction->data /// string DomProcessingInstruction->data ( void)\n PIノードのデータを返す 
DomProcessingInstruction->target /// string DomProcessingInstruction->target ( void)\n PIノードのターゲットを返す 
DomXsltStylesheet->process /// object DomXsltStylesheet->process ( object DomDocument [, array xslt_parameters [, bool param_is_xpath]])\n Applies the XSLT-Transformation on a DomDocument Object. 
domxml_new_doc /// object domxml_new_doc ( string version)\n 空のXMLドキュメントを作成する 
domxml_open_file /// object domxml_open_file ( string filename)\nXMLファイルからDOMオブジェクトを作成する
domxml_open_mem /// object domxml_open_mem ( string str)\nXMLドキュメントからDOMオブジェクトを作成する
domxml_version /// string domxml_version ( void)\n XMLライブラリのバージョンを取得する 
domxml_xmltree /// object domxml_xmltree ( string str)\n XMLドキュメントからPHPオブジェクトツリーを作成する 
domxml_xslt_stylesheet_doc /// object domxml_xslt_stylesheet_doc ( object DocDocument Object)\n Creates a DomXsltStylesheet Object from a DomDocument Object. 
domxml_xslt_stylesheet_file /// object domxml_xslt_stylesheet_file ( string xsl file)\n Creates a DomXsltStylesheet Object from a xsl document in a file. 
domxml_xslt_stylesheet /// object domxml_xslt_stylesheet ( string xsl document)\n Creates a DomXsltStylesheet Object from a xml document in a string. 
xpath_eval_expression /// array xpath_eval_expression ( object xpath_context)\n 指定した文字列のXPathロケーション式を評価する 
xpath_eval /// array xpath_eval ( object xpath context)\n 指定した文字列のXPathロケーションを評価する 
xpath_new_context /// object xpath_new_context ( object dom document)\n 新規xpathコンテキストを作成する 
xptr_eval /// int xptr_eval ( [object xpath_context, string eval_str])\n 指定した文字列のXPtrロケーションパスを評価する 
xptr_new_context /// string xptr_new_context ( [object doc_handle])\n 新規XPathコンテキストを作成する 
dotnet_load /// int dotnet_load ( string assembly_name [, string datatype_name [, int codepage]])\nDOTNETモジュールをロードする
error_log /// int error_log ( string message, int message_type, string [destination], string [extra_headers])\nエラーメッセージを送信する
error_reporting /// int error_reporting ( int [level])\n出力するPHPエラーの種類を設定する
restore_error_handler /// void restore_error_handler ( void)\n 以前のエラーハンドラ関数を回復する 
set_error_handler /// string set_error_handler ( string error_handler)\n ユーザ定義のエラーハンドラ関数を設定する 
trigger_error /// void trigger_error ( string error_msg, int [error_type])\n ユーザレベルのエラー/警告/通知メッセージを生成する 
user_error /// void user_error ( string error_msg, int [error_type])\n ユーザレベルのエラー/警告/通知メッセージを発生する 
fbsql_affected_rows /// int fbsql_affected_rows ( [int link_identifier])\n 直近のFrontBase処理により作用を受けたレコードの数を得る 
fbsql_autocommit /// bool fbsql_autocommit ( resource link_identifier [, bool OnOff])\nautocommitを有効または無効にする
fbsql_change_user /// resource fbsql_change_user ( string user, string password [, string database [, int link_identifier]])\n アクティブな接続にログインしているユーザを変更する 
fbsql_close /// boolean fbsql_close ( [resource link_identifier])\nFrontBase接続を閉じる
fbsql_commit /// bool fbsql_commit ( [resource link_identifier])\nデータベースへのトランザクションをコミットする
fbsql_connect /// resource fbsql_connect ( [string hostname [, string username [, string password]]])\nFrontBaseサーバへの接続をオープンする
fbsql_create_blob /// string fbsql_create_blob ( string blob_data [, resource link_identifier])\nBLOBを生成する
fbsql_create_clob /// string fbsql_create_clob ( string clob_data [, resource link_identifier])\nCLOBを生成する
fbsql_create_db /// bool fbsql_create_db ( string database name [, resource link_identifier])\nFrontBaseデータベースを作成する
fbsql_data_seek /// bool fbsql_data_seek ( resource result_identifier, int row_number)\n内部結果ポインタを移動する
fbsql_database_password /// string fbsql_database_password ( resource link_identifier [, string database_password])\n FrontBaseデータベースのパスワードを設定または取得する 
fbsql_database /// string fbsql_database ( resource link_identifier [, string database])\n No description given yet 
fbsql_db_query /// resource fbsql_db_query ( string database, string query [, resource link_identifier])\nFrontBaseクエリを送信する
fbsql_db_status /// int fbsql_db_status ( string database_name [, resource link_identifier])\n指定したデータベースのステータスを取得する
fbsql_drop_db /// bool fbsql_drop_db ( string database_name [, resource link_identifier])\nFrontBaseデータベースを破棄(削除)する
fbsql_errno /// int fbsql_errno ( [resource link_identifier])\n 前のFrontBase演算からエラーメッセージの数値的な値を返します。 
fbsql_error /// string fbsql_error ( [resource link_identifier])\n 前のFrontBase操作からエラーメッセージのテキストを返す 
fbsql_fetch_array /// array fbsql_fetch_array ( resource result [, int result_type])\n 連想配列、数値配列、または両方として結果レコードを取得する 
fbsql_fetch_assoc /// array fbsql_fetch_assoc ( resource result)\n 連想配列として結果レコードを取得する 
fbsql_fetch_field /// object fbsql_fetch_field ( resource result [, int field_offset])\n 結果からカラム情報を得て、オブジェクトとして返す 
fbsql_fetch_lengths /// array fbsql_fetch_lengths ( [resource result])\n 結果の各出力の長さを得る 
fbsql_fetch_object /// object fbsql_fetch_object ( resource result [, int result_type])\nオブジェクトとして結果レコードを取得する
fbsql_fetch_row /// array fbsql_fetch_row ( resource result)\n数値配列として結果レコードを得る
fbsql_field_flags /// string fbsql_field_flags ( resource result, int field_offset)\n クエリ結果において指定したフィールドに関するフラグを得る 
fbsql_field_len /// int fbsql_field_len ( resource result, int field_offset)\n 指定したフィールドの長さを返す 
fbsql_field_name /// string fbsql_field_name ( resource result, int field_index)\n 結果の指定したフィールドの名前を得る 
fbsql_field_seek /// bool fbsql_field_seek ( resource result, int field_offset)\n 指定したフィールドオフセットに結果ポインタを設定する 
fbsql_field_table /// string fbsql_field_table ( resource result, int field_offset)\n 指定したフィールドがあるテーブルの名前を得る 
fbsql_field_type /// string fbsql_field_type ( resource result, int field_offset)\n 結果の中で指定したフィールドの型を得る 
fbsql_free_result /// bool fbsql_free_result ( int result)\n結果メモリを開放する
fbsql_get_autostart_info /// array fbsql_get_autostart_info ( [resource link_identifier])\n No description given yet 
fbsql_hostname /// string fbsql_hostname ( resource link_identifier [, string host_name])\n No description given yet 
fbsql_insert_id /// int fbsql_insert_id ( [resource link_identifier])\n 直近のINSERT処理により生成されたIDを得る 
fbsql_list_dbs /// resource fbsql_list_dbs ( [resource link_identifier])\n FrontBaseサーバで利用可能なデータベースの一覧を得る 
fbsql_list_fields /// resource fbsql_list_fields ( string database_name, string table_name [, resource link_identifier])\nFrontBase結果フィールドの一覧を得る
fbsql_list_tables /// resource fbsql_list_tables ( string database [, resource link_identifier])\nFrontBaseデータベースのテーブル一覧を得る
fbsql_next_result /// bool fbsql_next_result ( int result_id)\n内部結果ポインタを次の結果に移動する
fbsql_num_fields /// int fbsql_num_fields ( resource result)\n結果のフィールド数を得る
fbsql_num_rows /// int fbsql_num_rows ( resource result)\n結果のレコード数を得る
fbsql_password /// string fbsql_password ( resource link_identifier [, string password])\n No description given yet 
fbsql_pconnect /// resource fbsql_pconnect ( [string hostname [, string username [, string password]]])\n FrontBaseサーバへの持続的接続をオープンする 
fbsql_query /// resource fbsql_query ( string query [, resource link_identifier])\nFrontBaseクエリを送信する
fbsql_read_blob /// string fbsql_read_blob ( string blob_handle [, resource link_identifier])\nデータベースからBLOBを読み込む
fbsql_read_clob /// string fbsql_read_clob ( string clob_handle [, resource link_identifier])\nデータベースからCLOBを読み込む
fbsql_result /// mixed fbsql_result ( resource result, int row [, mixed field])\n結果データを得る
fbsql_rollback /// bool fbsql_rollback ( [resource link_identifier])\nデータベースへのトランザクションをロールバックする
fbsql_select_db /// resource fbsql_select_db ( string database_name [, resource link_identifier])\nFrontBaseデータベースを選択する
fbsql_set_lob_mode /// bool fbsql_set_lob_mode ( resource result, string database_name)\n FrontBase結果セットのLOB取得モードを設定する 
fbsql_set_transaction /// void fbsql_set_transaction ( resource link_identifier, int Locking, int Isolation)\n トランザクションのロックとアイソレーションを設定する 
fbsql_start_db /// bool fbsql_start_db ( string database_name [, resource link_identifier])\n ローカルまたはリモートサーバのデータベースを開始する 
fbsql_stop_db /// bool fbsql_stop_db ( string database_name [, resource link_identifier])\n ローカルまたはリモートサーバのデータベースを停止する 
fbsql_tablename /// string fbsql_tablename ( resource result, int i)\nフィールドのテーブル名を得る
fbsql_username /// string fbsql_username ( resource link_identifier [, string username])\n No description given yet 
fbsql_warnings /// bool fbsql_warnings ( [bool OnOff])\nFrontBase警告を有効または無効にする
filepro_fieldcount /// int filepro_fieldcount ( void)\n filePro データベース中のフィールド数を返します
filepro_fieldname /// string filepro_fieldname ( int field_number)\nフィールド名を取得する
filepro_fieldtype /// string filepro_fieldtype ( int field_number)\nフィールド型を取得する
filepro_fieldwidth /// int filepro_fieldwidth ( int field_number)\nフィールド幅を得る
filepro_retrieve /// string filepro_retrieve ( int row_number, int field_number)\nfilePro データベースのデータを検索します
filepro_rowcount /// int filepro_rowcount ( void)\n filePro データベースの行の数を返します
filepro /// bool filepro ( string directory)\nmap ファイルの読み込みと照合を行う
basename /// string basename ( string path [, string suffix])\n パス中のファイル名の部分を返す 
chgrp /// int chgrp ( string filename, mixed group)\nファイルのグループを変更する
chmod /// int chmod ( string filename, int mode)\nファイルのモードを変更する
chown /// int chown ( string filename, mixed user)\nファイルの所有者を変更する
clearstatcache /// void clearstatcache ( void)\nファイルstatのキャッシュをクリアする
copy /// int copy ( string source, string dest)\nファイルをコピーする
delete /// void delete ( string file)\nダミーの関数エントリ
dirname /// string dirname ( string path)\nパス中のディレクトリ名の部分を返す
disk_free_space /// float disk_free_space ( string directory)\nディレクトリの利用可能なスペースを返す
disk_total_space /// float disk_total_space ( string directory)\nディレクトリの全体サイズを返す
diskfreespace /// float diskfreespace ( string directory)\ndisk_free_space()へのエイリアス
fclose /// bool fclose ( int fp)\nオープンされたファイルポインタをクローズする
feof /// int feof ( int fp)\n ファイルポインタがファイル終端に達しているかどうか調べる 
fflush /// int fflush ( int fp)\n出力をファイルにフラッシュする
fgetc /// string fgetc ( int fp)\nファイルポインタから1文字取り出す
fgetcsv /// array fgetcsv ( int fp, int length, string [delimiter])\n ファイルポインタから行を取得し、CSVフィールドを処理する 
fgets /// string fgets ( int fp [, int length])\nファイルポインタから1行取得する
fgetss /// string fgetss ( int fp, int length, string [allowable_tags])\nファイルポインタから1行取り出し、HTMLタグを取り除く 
file_exists /// bool file_exists ( string filename)\nファイルの存在をチェックする
file_get_contents /// string file_get_contents ( string filename [, int use_include_path])\nReads entire file into a string
file /// array file ( string filename, int [use_include_path])\nファイル全体を読み込んで配列に格納する
fileatime /// int fileatime ( string filename)\nファイルの最終アクセス時刻を取得する
filectime /// int filectime ( string filename)\nファイルのinode変更時刻を取得する
filegroup /// int filegroup ( string filename)\nファイルのグループを取得する
fileinode /// int fileinode ( string filename)\nファイルのinodeを取得する
filemtime /// int filemtime ( string filename)\nファイルの更新時刻を取得する
fileowner /// int fileowner ( string filename)\nファイルの所有者を取得する
fileperms /// int fileperms ( string filename)\nファイルの許可属性を取得する
filesize /// int filesize ( string filename)\nファイルのサイズを取得する
filetype /// string filetype ( string filename)\nファイルタイプを取得する
flock /// bool flock ( int fp, int operation, int [wouldblock])\n汎用のファイルロックを行う
fnmatch /// array fnmatch ( string pattern, string string [, int flags])\nMatch filename against a pattern
fopen /// int fopen ( string filename, string mode, int [use_include_path])\nファイルまたはURLをオープンする
fpassthru /// int fpassthru ( int fp)\n ファイルポインタ上に残っているすべてのデータを出力する 
fputs /// int fputs ( int fp, string str, int [length])\nファイルポインタに書き込む 
fread /// string fread ( int fp, int length)\nバイナリ・モードでファイルを読み込む
fscanf /// mixed fscanf ( int handle, string format, string [var1])\nフォーマットに基づきファイルからの入力を処理する
fseek /// int fseek ( int fp, int offset, int [whence])\nファイルポインタを移動する
fstat /// array fstat ( int fp)\n オープンしたファイルポインタからファイルに関する情報を得ます 
ftell /// int ftell ( int fp)\nファイルポインタから読み書きの位置を取得する
ftruncate /// int ftruncate ( int fp, int size)\n ファイルを指定した長さに丸める 
fwrite /// int fwrite ( int fp, string string, int [length])\nバイナリ・モードによるファイル書き込み
glob /// array glob ( string pattern [, int flags])\nFind pathnames matching a pattern
is_dir /// bool is_dir ( string filename)\nファイルがディレクトリかどうかを調べる
is_executable /// bool is_executable ( string filename)\nファイルが実行可能かどうかを調べる
is_file /// bool is_file ( string filename)\n通常ファイルかどうかを調べる
is_link /// bool is_link ( string filename)\n ファイルがシンボリックリンクかどうかを調べる 
is_readable /// bool is_readable ( string filename)\nファイルが読み込み可能かどうかを知る
is_uploaded_file /// bool is_uploaded_file ( string filename)\n HTTP POSTによりアップロードされたファイルかどうかを調べる 
is_writable /// bool is_writable ( string filename)\nファイルが書き込み可能かどうかを調べる
is_writeable /// bool is_writeable ( string filename)\nファイルが書き込み可能かどうか確認する
link /// int link ( string target, string link)\nハードリンクを作成する
linkinfo /// int linkinfo ( string path)\nリンクk関する情報を取得する
lstat /// array lstat ( string filename)\n ファイルまたはシンボリックリンクに関する情報を与えます 
mkdir /// int mkdir ( string pathname, int mode)\nディレクトリを作る
move_uploaded_file /// bool move_uploaded_file ( string filename, string destination)\n新しい位置にアップロードされたファイeを移動する
parse_ini_file /// array parse_ini_file ( string filename [, bool process_sections])\n設定ファイルをパースする
pathinfo /// array pathinfo ( string path)\nファイルパスに関する情報を返す
pclose /// int pclose ( int fp)\nプロセスのファイルポインタをクローズする
popen /// int popen ( string command, string mode)\nプロセスへのファイルポインタをオープンする
readfile /// int readfile ( string filename, int [use_include_path])\nファイルを出力する
readlink /// string readlink ( string path)\nシンボリックリンク先を返す
realpath /// string realpath ( string path)\n絶対パス名を返す
rename /// int rename ( string oldname, string newname)\nファイルをリネームする
rewind /// int rewind ( int fp)\nファイルポインタの位置を先頭に戻す
rmdir /// int rmdir ( string dirname)\nディレクトリを削除する
set_file_buffer /// int set_file_buffer ( int fp, int buffer)\n 指定したファイルポインタのファイルバッファを設定する 
stat /// array stat ( string filename)\nファイルに関する情報を取得する
stream_get_meta_data /// array file_get_meta_data ( resource stream)\nRetrieves header/meta data from streams/file pointers
stream_register_wrapper /// boolean stream_register_wrapper ( string protocol, string classname)\nRegister a URL wrapper implemented as a PHP class
stream_set_blocking /// bool stream_set_blocking ( resource stream, int mode)\nSet blocking/non-blocking mode on a stream
stream_set_timeout /// bool stream_set_timeout ( resource stream, int seconds, int microseconds)\nSet timeout period on a stream
stream_set_write_buffer /// int stream_set_write_buffer ( resource stream, int buffer)\nSets file buffering on the given stream
symlink /// int symlink ( string target, string link)\nシンボリックリンクを作成する
tempnam /// string tempnam ( string dir, string prefix)\nユニークなファイル名を生成する
tmpfile /// int tmpfile ( void)\nテンポラリファイルを作成する
touch /// int touch ( string filename, int time)\nファイルの最終更新日をセットする
umask /// int umask ( int mask)\n現在のumaskを変更する
unlink /// int unlink ( string filename)\nファイルを削除する
fdf_add_doc_javascript /// bool fdf_add_doc_javascript ( resource fdfdoc, string script_name, string script_code)\nAdds javascript code to the FDF document
fdf_add_template /// bool fdf_add_template ( int fdfdoc, int newpage, string filename, string template, int rename)\nテンプレートをFDFに追加する
fdf_close /// bool fdf_close ( int fdf_document)\nFDF ドキュメントを閉じる
fdf_create /// int fdf_create ( void )\n新規 FDF ドキュメントを作成する
fdf_errno /// int fdf_errno ( void)\nReturn error code for last fdf operation
fdf_error /// string fdf_error ( [int error_code])\nReturn error description for fdf error code
fdf_get_ap /// bool fdf_get_ap ( resource fdf_document, string field, int face, string filename)\nGet the appearance of a field
fdf_get_attachment /// array fdf_get_attachment ( resource fdf_document, string fieldname, string savepath)\nExtracts uploaded file embedded in the FDF
fdf_get_encoding /// string fdf_get_encoding ( resource fdf_document)\nGet the value of the /Encoding key
fdf_get_file /// string fdf_get_file ( int fdf_document)\n/F キーの値を得る
fdf_get_status /// string fdf_get_status ( int fdf_document)\n/STATUS キーの値を得る
fdf_get_value /// string fdf_get_value ( int fdf_document, string fieldname)\nフィールドの値を得る
fdf_get_version /// string fdf_get_version ( [resource fdf_document])\nGets version number for FDF api or file 
fdf_header /// bool fdf_header ( void)\nSets FDF-specific output headers
fdf_next_field_name /// string fdf_next_field_name ( int fdf_document [, string fieldname])\n次のフィールド名を得る
fdf_open_string /// resource fdf_open ( string fdf_data)\nRead a FDF document from a string
fdf_open /// int fdf_open ( string filename)\nFDF ドキュメントをオープンする
fdf_save_string /// string fdf_save_string ( resource fdf_document)\nReturns the FDF document as a string
fdf_save /// int fdf_save ( string filename)\nFDF ドキュメントを保存する
fdf_set_ap /// bool fdf_set_ap ( int fdf_document, string field_name, int face, string filename, int page_number)\nフィールドの外観を設定する
fdf_set_encoding /// bool fdf_set_encoding ( int fdf_document, string encoding)\nFDF文字エンコーディング
fdf_set_file /// bool fdf_set_file ( int fdf_document, string filename)\n/F キーの値を設定する
fdf_set_flags /// bool fdf_set_flags ( int fdf_document, string fieldname, int whichFlags, int newFlags)\nフィールドのフラグを設定する
fdf_set_javascript_action /// bool fdf_set_javascript_action ( int fdf_document, string fieldname, int trigger, string script)\nフィールドの javascript アクションを設定する
fdf_set_opt /// bool fdf_set_opt ( int fdf_document, string fieldname, int element, string str1, string str2)\nフィールドのオプションを設定する
fdf_set_status /// bool fdf_set_status ( int fdf_document, string status)\n/STATUS キーの値を設定する
fdf_set_submit_form_action /// bool fdf_set_submit_form_action ( int fdf_document, string fieldname, int trigger, string script, int flags)\nフィールドのjavascriptアクションを設定する
fdf_set_target_frame /// bool fdf_target_frame ( resource fdf_document, string frame_name)\nSet target frame for form display
fdf_set_value /// bool fdf_set_value ( int fdf_document, string fieldname, string value, int isName)\nフィールドの値を設定する
fdf_set_version /// string fdf_set_version ( resource fdf_document, string version)\nSets version number for a FDF file 
fribidi_log2vis /// string fribidi_log2vis ( string str, string direction, int charset)\n論理文字列を可視文字列に変換する
ftp_cdup /// bool ftp_cdup ( resource ftp_stream)\n親ディレクトリに移動する
ftp_chdir /// bool ftp_chdir ( resource ftp_stream, string directory)\nFTP サーバー上でディレクトリを移動する
ftp_close /// void ftp_close ( resource ftp_stream)\nFTP接続を閉じる
ftp_connect /// resource ftp_connect ( string host [, int port [, int timeout]])\nFTP 接続をオープンする
ftp_delete /// bool ftp_delete ( resource ftp_stream, string path)\nftp サーバー上のファイルを削除する
ftp_exec /// bool ftp_exec ( resource stream, string command)\n ftpサーバでプログラム実行する 
ftp_fget /// bool ftp_fget ( resource ftp_stream, resource fp, string remote_file, int mode)\n FTP サーバーからファイルをダウンロードし、オープン中のファイルに 保存する 
ftp_fput /// bool ftp_fput ( resource ftp_stream, string remote_file, resource fp, int mode)\n オープン中のファイルをFTPサーバーにアップロードする 
ftp_get_option /// bool ftp_get_option ( resource stream, int option)\n カレントのFTPストリームの種々の実行動作を取得する 
ftp_get /// bool ftp_get ( resource ftp_stream, string local_file, string remote_file, int mode)\nFTPサーバーからファイルをダウンロードする
ftp_login /// bool ftp_login ( resource ftp_stream, string username, string password)\nFTP 接続でログインする
ftp_mdtm /// int ftp_mdtm ( resource ftp_stream, string remote_file)\n指定したファイルが最後に修正された時間を返す
ftp_mkdir /// string ftp_mkdir ( resource ftp_stream, string directory)\nディレクトリを作成する
ftp_nb_continue /// bool ftp_nb_continue ( resource ftp_stream)\nContinues retrieving/sending a file (non-blocking)
ftp_nb_fget /// bool ftp_nb_fget ( resource ftp_stream, resource fp, string remote_file, int mode [, int resumepos])\nRetrieves a file from the FTP server and writes it to an open file (non-blocking)
ftp_nb_fput /// bool ftp_nb_fput ( resource ftp_stream, string remote_file, resource fp, int mode [, int startpos])\nStores a file from an open file to the FTP server (non-blocking)
ftp_nb_get /// bool ftp_nb_get ( resource ftp_stream, string local_file, string remote_file, int mode [, int resumepos])\nRetrieves a file from the FTP server and writes it to a local file (non-blocking)
ftp_nb_put /// bool ftp_nb_put ( resource ftp_stream, string remote_file, string local_file, int mode [, int startpos])\nStores a file on the FTP server (non-blocking)
ftp_nlist /// array ftp_nlist ( resource ftp_stream, string directory)\n指定したディレクトリのファイルの一覧を返す
ftp_pasv /// bool ftp_pasv ( resource ftp_stream, bool pasv)\nパッシブモードをオンまたはオフにする
ftp_put /// bool ftp_put ( resource ftp_stream, string remote_file, string local_file, int mode)\nFTP サーバーにファイルをアップロードする
ftp_pwd /// string ftp_pwd ( resource ftp_stream)\n現在のディレクトリ名を返す
ftp_quit /// void ftp_quit ( resource ftp_stream)\nFTP接続を閉じる
ftp_rawlist /// array ftp_rawlist ( resource ftp_stream, string directory)\n 指定したディレクトリの詳細なファイル一覧を返す 
ftp_rename /// bool ftp_rename ( resource ftp_stream, string from, string to)\nftp サーバー上のファイルの名前を変更する
ftp_rmdir /// bool ftp_rmdir ( resource ftp_stream, string directory)\nディレクトリを削除する
ftp_set_option /// bool ftp_set_option ( resource stream, int option, mixed value)\n FTP実行オプションを設定する 
ftp_site /// bool ftp_site ( resource ftp_stream, string cmd)\nSITEコマンドをサーバーに送信する
ftp_size /// int ftp_size ( resource ftp_stream, string remote_file)\n指定したファイルのサイズを返す
ftp_ssl_connect /// resource ftp_ssl_connect ( string host [, int port [, int timeout]])\nOpens an Secure SSL-FTP connection
ftp_systype /// string ftp_systype ( resource ftp_stream)\n リモート FTP サーバーのシステム型IDを返す 
call_user_func_array /// mixed call_user_func_array ( string function_name [, array paramarr])\n パラメータの配列を指定してユーザ関数をコールする 
call_user_func /// mixed call_user_func ( string function_name [, mixed parameter [, mixed ...]])\n 最初の引数で指定したユーザ関数をコールする 
create_function /// string create_function ( string args, string code)\n匿名(ラムダ形式)関数を作成する
func_get_arg /// mixed func_get_arg ( int arg_num)\n引数のリストから要素を1つ返す
func_get_args /// array func_get_args ( void )\n関数の引数リストを配列として返す
func_num_args /// int func_num_args ( void )\n関数に渡された引数の数を返す
function_exists /// bool function_exists ( string function_name)\n 指定した関数が定義されている場合にTRUEを返す 
get_defined_functions /// array get_defined_functions ( void )\n 定義済みの全ての関数を配列で返す 
register_shutdown_function /// int register_shutdown_function ( string func)\nシャットダウン時に実行する関数を登録する
register_tick_function /// void register_tick_function ( string func [, mixed arg])\n 各tickで実行する関数を登録する 
unregister_tick_function /// void unregister_tick_function ( string func [, mixed arg])\n 各tickの実行用の関数の登録を解除する 
bind_textdomain_codeset /// string bind_textdomain_codeset ( string domain, string codeset)\n DOMAINメッセージカタログからのメッセージが変更される文字エンコー ディングを指定する 
bindtextdomain /// string bindtextdomain ( string domain, string directory)\nドメインのパスを設定する
dcgettext /// string dcgettext ( string domain, string message, int category)\n単一の参照に関するドメインを上書きする
dcngettext /// string dcngettext ( string domain, string msgid1, string msgid2, int n, int category)\n dcgettext()の複数版
dgettext /// string dgettext ( string domain, string message)\nカレントのドメインを上書きする
dcngettext /// string dcngettext ( string domain, string msgid1, string msgid2, int n)\ndcgettext()の複数型です
gettext /// string gettext ( string message)\nカレントドメインのメッセージの参照する
ngettext /// string ngettext ( string msgid1, string msgid2, int n)\ngettextの複数版
textdomain /// string textdomain ( string text_domain)\nデフォルトドメインを設定する
gmp_abs /// resource gmp_abs ( resource a)\n絶対値
gmp_add /// resource gmp_add ( resource a, resource b)\n数値の加算
gmp_and /// resource gmp_and ( resource a, resource b)\n論理演算 AND
gmp_clrbit /// resource gmp_clrbit ( resource &a, int index)\nビットをクリアする
gmp_cmp /// int gmp_cmp ( resource a, resource b)\n数を比較する
gmp_com /// resource gmp_com ( resource a)\n aの補数を計算する 
gmp_div_q /// resource gmp_div_q ( resource a, resource b, int [round])\n数値の割算
gmp_div_qr /// array gmp_div_qr ( resource n, resource d, int [round])\n割算を行い、商と余りを得る
gmp_div_r /// resource gmp_div_r ( resource n, resource d, int [round])\n割算の余り
gmp_div /// resource gmp_div ( resource a, resource b)\n割算を行う
gmp_divexact /// resource gmp_divexact ( resource n, resource d)\n正確な割算
gmp_fact /// resource gmp_fact ( int a)\n階乗
gmp_gcd /// resource gmp_gcd ( resource a, resource b)\n最大公約数を計算する
gmp_gcdext /// array gmp_gcdext ( resource a, resource b)\n最大公約数と乗数を計算する
gmp_hamdist /// int gmp_hamdist ( resource a, resource b)\nハミング距離
gmp_init /// resource gmp_init ( mixed number)\nGMP 数を作成する
gmp_intval /// int gmp_intval ( resource gmpnumber)\nGMP 数を整数に変換する
gmp_invert /// resource gmp_invert ( resource a, resource b)\n法による逆
gmp_jacobi /// int gmp_jacobi ( resource a, resource p)\nヤコビ記号
gmp_legendre /// int gmp_legendre ( resource a, resource p)\nルジェンドル記号
gmp_mod /// resource gmp_mod ( resource n, resource d)\nモジュロ演算
gmp_mul /// resource gmp_mul ( resource a, resource b)\n数値の乗算
gmp_neg /// resource gmp_neg ( resource a)\n符号を反転する
gmp_or /// resource gmp_or ( resource a, resource b)\n論理演算 OR
gmp_perfect_square /// bool gmp_perfect_square ( resource a)\n平方数かどうかを調べる
gmp_popcount /// int gmp_popcount ( resource a)\nカウントを増やす
gmp_pow /// resource gmp_pow ( resource base, int exp)\n累乗
gmp_powm /// resource gmp_powm ( resource base, resource exp, resource mod)\n累乗とモジュロ
gmp_prob_prime /// int gmp_prob_prime ( resource a, int [reps])\n数が"ほぼ素数"であるかどうかを調べる
gmp_random /// resource gmp_random ( int limiter)\n乱数
gmp_scan0 /// int gmp_scan0 ( resource a, int start)\n0を探す
gmp_scan1 /// int gmp_scan1 ( resource a, int start)\n1 を探す
gmp_setbit /// resource gmp_setbit ( resource &a, int index, bool [set_clear])\nビットを設定する
gmp_sign /// int gmp_sign ( resource a)\n数の符号
gmp_sqrt /// resource gmp_sqrt ( resource a)\n平方根
gmp_sqrtrm /// array gmp_sqrtrm ( resource a)\n余りと平方根
gmp_strval /// string gmp_strval ( resource gmpnumber, int [base])\nGMP 数を文字列に変換する
gmp_sub /// resource gmp_sub ( resource a, resource b)\n数値の減算
gmp_xor /// resource gmp_xor ( resource a, resource b)\n論理演算 XOR
header /// int header ( string string [, bool replace])\n生のHTTPヘッダを送信する
headers_sent /// boolean headers_sent ( void)\nヘッダーが送信されている場合に TRUE を返す
setcookie /// int setcookie ( string name, string [value], int [expire], string [path], string [domain], int [secure])\nクッキーを送信する
hw_Array2Objrec /// strin hw_array2objrec ( array object_array)\n オブジェクト配列からオブジェクトレコードに属性を変換する 
hw_changeobject /// void hw_changeobject ( int link, int objid, array attributes)\n オブジェクトの属性を変更する(古い関数) 
hw_Children /// array hw_children ( int connection, int objectID)\n子のオブジェクト ID
hw_ChildrenObj /// array hw_childrenobj ( int connection, int objectID)\n子のオブジェクトレコード
hw_Close /// int hw_close ( int connection)\nHyperwave 接続を閉じる
hw_Connect /// int hw_connect ( string host, int port, string username, string password)\n接続をオープンする
hw_connection_info /// void hw_connection_info ( int link)\n Hyperwaveサーバへの接続に関する情報を出力する 
hw_Cp /// int hw_cp ( int connection, array object_id_array, int destination id)\nオブジェクトをコピーする
hw_Deleteobject /// int hw_deleteobject ( int connection, int object_to_delete)\nオブジェクトを削除する
hw_DocByAnchor /// int hw_docbyanchor ( int connection, int anchorID)\nアンカーに属するオブジェクトのオブジェクト ID
hw_DocByAnchorObj /// string hw_docbyanchorobj ( int connection, int anchorID)\nアンカーが指すオブジェクトレコード
hw_Document_Attributes /// string hw_document_attributes ( int hw_document)\nhw_document のオブジェクトレコード
hw_Document_BodyTag /// string hw_document_bodytag ( int hw_document)\nhw_document の BODY タグ
hw_Document_Content /// string hw_document_content ( int hw_document)\nhw_documentの内容を返す
hw_Document_SetContent /// string hw_document_setcontent ( int hw_document, string content)\nhw_document の内容を設定/置換する
hw_Document_Size /// int hw_document_size ( int hw_document)\nhw_document のサイ?
hw_dummy /// string hw_dummy ( int link, int id, int msgid)\n Hyperwaveダミー関数 
hw_EditText /// int hw_edittext ( int connection, int hw_document)\nテキストドキュメントを取得する
hw_Error /// int hw_error ( int connection)\nエラー番号
hw_ErrorMsg /// string hw_errormsg ( int connection)\n エラーメッセージを返す 
hw_Free_Document /// int hw_free_document ( int hw_document)\nhw_document を解放する
hw_GetAnchors /// array hw_getanchors ( int connection, int objectID)\nドキュメントのアンカーのオブジェクト ID
hw_GetAnchorsObj /// array hw_getanchorsobj ( int connection, int objectID)\nドキュメントのアンカーのオブジェクトレコード
hw_GetAndLock /// string hw_getandlock ( int connection, int objectID)\n オブジェクトレコードを返しおよびオブジェクトをロックする 
hw_GetChildColl /// array hw_getchildcoll ( int connection, int objectID)\n子のコレクションのオブジェクト ID
hw_GetChildCollObj /// array hw_getchildcollobj ( int connection, int objectID)\n子のコレクションのオブジェクトレコード
hw_GetChildDocColl /// array hw_getchilddoccoll ( int connection, int objectID)\nコレクションの子ドキュメントのオブジェクト ID
hw_GetChildDocCollObj /// array hw_getchilddoccollobj ( int connection, int objectID)\nコレクションの子ドキュメントのオブジェクトレコード
hw_GetObject /// array hw_getobject ( int connection, [int|array] objectID, string query)\nオブジェクトレコード
hw_GetObjectByQuery /// array hw_getobjectbyquery ( int connection, string query, int max_hits)\nオブジェクトを検索する
hw_GetObjectByQueryColl /// array hw_getobjectbyquerycoll ( int connection, int objectID, string query, int max_hits)\nコレクションのオブジェクトを検索する
hw_GetObjectByQueryCollObj /// array hw_getobjectbyquerycollobj ( int connection, int objectID, string query, int max_hits)\nコレクションのオブジェクトを検索する
hw_GetObjectByQueryObj /// array hw_getobjectbyqueryobj ( int connection, string query, int max_hits)\nオブジェクトを朧?する
hw_GetParents /// array hw_getparents ( int connection, int objectID)\n親のオブジェクト ID
hw_GetParentsObj /// array hw_getparentsobj ( int connection, int objectID)\n親のオブジェクトレコード
hw_getrellink /// string hw_getrellink ( int link, int rootid, int sourceid, int destid)\n rootidに相対的なsourceからdestへのリンクを得る 
hw_GetRemote /// int hw_getremote ( int connection, int objectID)\nリモートドキュメントを得る
hw_GetRemoteChildren /// int hw_getremotechildren ( int connection, string object record)\nリモートドキュメントの子を得る
hw_GetSrcByDestObj /// array hw_getsrcbydestobj ( int connection, int objectID)\nオブジェクトを指すアンカーを返す
hw_GetText /// int hw_gettext ( int connection, int objectID, mixed [rootID/prefix])\nテキストドキュメントを取得する
hw_getusername /// string hw_getusername ( int connection)\n現在ログインしているユーザーの名前
hw_Identify /// int hw_identify ( string username, string password)\nユーザーとして認証する
hw_InCollections /// array hw_incollections ( int connection, array object_id_array, array collection_id_array, int return_collections)\n コレクションにオブジェクト ID があるかどうかを確認する 
hw_Info /// string hw_info ( int connection)\n接続に関する情報
hw_InsColl /// int hw_inscoll ( int connection, int objectID, array object_array)\nコレクションを挿入する
hw_InsDoc /// int hw_insdoc ( int connection, int parentID, string object_record, string text)\nドキュメントを挿入する
hw_insertanchors /// string hw_insertanchors ( int hwdoc, array anchorecs, array dest [, array urlprefixes])\n textにアンカーのみを挿入する 
hw_InsertDocument /// int hw_insertdocument ( int connection, int parent_id, int hw_document)\nドキュメントをアップロードする
hw_InsertObject /// int hw_insertobject ( int connection, string object rec, string parameter)\nオブジェクトレコードを挿入する
hw_mapid /// int hw_mapid ( int connection, int server id, int object id)\nグローバルIDを仮想的なローカルIDに割りつける
hw_Modifyobject /// int hw_modifyobject ( int connection, int object_to_change, array remove, array add, int mode)\nオブジェクトレコードを修正する
hw_Mv /// int hw_mv ( int connection, array object id array, int source id, int destination id)\nオブジェクトを移動する
hw_New_Document /// int hw_new_document ( string object_record, string document_data, int document_size)\n新しいドキュメントを作成する
hw_Objrec2Array /// array hw_objrec2array ( string object_record, array [format])\n 属性をオブジェクトレコードからオブジェクト配列に変換する 
hw_Output_Document /// int hw_output_document ( int hw_document)\nhw_document を出力する
hw_pConnect /// int hw_pconnect ( string host, int port, string username, string password)\n持続的データベース接続を作成する
hw_PipeDocument /// int hw_pipedocument ( int connection, int objectID)\nドキュメントを取得する
hw_Root /// int hw_root ( )\nルートオブジェクト ID
hw_setlinkroot /// void hw_setlinkroot ( int link, int rootid)\n 計算されたリンクのIDを設定する Set the id to which links are calculated 
hw_stat /// string hw_stat ( int link)\n ステータス文字列を返す 
hw_Unlock /// int hw_unlock ( int connection, int objectID)\nオブジェクトをアンロックする
hw_Who /// int hw_who ( int connection)\n現在ログイン中のユーザーのリスト
hw_api_attribute->key /// string key ( void )\nReturns key of the attribute
hw_api_attribute->langdepvalue /// string langdepvalue ( string language)\nReturns value for a given language
hw_api_attribute->value /// string value ( void )\nReturns value of the attribute
hw_api_attribute->values /// array values ( void )\nReturns all values of the attribute
hw_api_attribute /// object attribute ( [string name [, string value]])\nCreates instance of class hw_api_attribute
hw_api->checkin /// object checkin ( array parameter)\nChecks in an object
hw_api->checkout /// object checkout ( array parameter)\nChecks out an object
hw_api->children /// array children ( array parameter)\nReturns children of an object
hw_api_content->mimetype /// string mimetype ( void )\nReturns mimetype
hw_api_content->read /// string read ( string buffer, integer len)\nRead content
hw_api->content /// object content ( array parameter)\nReturns content of an object
hw_api->copy /// object copy ( array parameter)\nCopies physically
hw_api->dbstat /// object dbstat ( array parameter)\nReturns statistics about database server
hw_api->dcstat /// object dcstat ( array parameter)\nReturns statistics about document cache server
hw_api->dstanchors /// object dstanchors ( array parameter)\nReturns a list of all destination anchors
hw_api->dstofsrcanchors /// object dstofsrcanchors ( array parameter)\nReturns destination of a source anchor
hw_api_error->count /// int count ( void )\nReturns number of reasons
hw_api_error->reason /// object reason ( void )\nReturns reason of error
hw_api->find /// array find ( array parameter)\nSearch for objects
hw_api->ftstat /// object ftstat ( array parameter)\nReturns statistics about fulltext server
hwapi_hgcsp /// object hwapi_hgcsp ( string hostname [, int port])\nReturns object of class hw_api
hw_api->hwstat /// object hwstat ( array parameter)\nReturns statistics about Hyperwave server
hw_api->identify /// object identify ( array parameter)\nLog into Hyperwave Server
hw_api->info /// object info ( array parameter)\nReturns information about server configuration
hw_api->insert /// object insert ( array parameter)\nInserts a new object
hw_api->insertanchor /// object insertanchor ( array parameter)\nInserts a new object of type anchor
hw_api->insertcollection /// object insertcollection ( array parameter)\nInserts a new object of type collection
hw_api->insertdocument /// object insertdocument ( array parameter)\nInserts a new object of type document
hw_api->link /// object link ( array parameter)\nCreates a link to an object
hw_api->lock /// object lock ( array parameter)\nLocks an object
hw_api->move /// object move ( array parameter)\nMoves object between collections
hw_api_content /// string content ( string content, string mimetype)\nCreate new instance of class hw_api_content
hw_api_object->assign /// object assign ( array parameter)\nClones object
hw_api_object->attreditable /// bool attreditable ( array parameter)\nChecks whether an attribute is editable
hw_api_object->count /// int count ( array parameter)\nReturns number of attributes
hw_api_object->insert /// bool insert ( object attribute)\nInserts new attribute
hw_api_object /// object hw_api_object ( array parameter)\nCreates a new instance of class hw_api_object
hw_api_object->remove /// bool remove ( string name)\nRemoves attribute
hw_api_object->title /// string title ( array parameter)\nReturns the title attribute
hw_api_object->value /// string value ( string name)\nReturns value of attribute
hw_api->object /// object hw_api->object ( array parameter)\nRetrieve attribute information
hw_api->objectbyanchor /// object objectbyanchor ( array parameter)\nReturns the object an anchor belongs to
hw_api->parents /// array parents ( array parameter)\nReturns parents of an object
hw_api_reason->description /// string description ( void )\nReturns description of reason
hw_api_reason->type /// object type ( void )\nReturns type of reason
hw_api->remove /// object remove ( array parameter)\nDelete an object
hw_api->replace /// object replace ( array parameter)\nReplaces an object
hw_api->setcommitedversion /// object setcommitedversion ( array parameter)\nCommits version other than last version
hw_api->srcanchors /// object srcanchors ( array parameter)\nReturns a list of all source anchors
hw_api->srcsofdst /// object srcsofdst ( array parameter)\nReturns source of a destination object
hw_api->unlock /// object unlock ( array parameter)\nUnlocks a locked object
hw_api->user /// object user ( array parameter)\nReturns the own user object
hw_api->userlist /// object userlist ( array parameter)\nReturns a list of all logged in users
iconv_get_encoding /// array iconv_get_encoding ( [string type])\n 文字エンコーディング変換のカレントの設定を取得する 
iconv_set_encoding /// array iconv_set_encoding ( string type, string charset)\n 文字エンコーディング変換用の設定を行なう 
iconv /// string iconv ( string in_charset, string out_charset, string str)\n リクエストした文字エンコーディングに文字列を変換する 
ob_iconv_handler /// array ob_iconv_handler ( string contents, int status)\n 出力バッファハンドラとして文字エンコーディングを変換する 
exif_imagetype /// int|false exif_imagetype ( string filename)\nイメージの型を定義する
exif_read_data /// array exif_read_data ( string filename [, string sections [, bool arrays [, bool thumbnail]]])\n JPEGまたはTIFFから EXIFヘッダを読みこむ 
exif_thumbnail /// string exif_thumbnail ( string filename [, int &width [, int &height]])\nTIFFまたはJPEGイメージに埋め込まれたサムネイルを取得する
GetImageSize /// array getimagesize ( string filename, array [imageinfo])\nJPEG、GIF、PNG、SWF画像の大きさを取得する
image_type_to_mime_type /// string image_type_to_mime_type ( int imagetype)\nGet Mime-Type for image-type returned by getimagesize, exif_read_data, exif_thumbnail, exif_imagetype
Image2WBMP /// int image2WBMP ( int im [, string filename [, int threshold]])\nブラウザまたはファイルにイメージを出力する
ImageAlphaBlending /// int imagealphablending ( resource im, bool blendmode)\nイメージをblendingモードに設定する
ImageArc /// int imagearc ( int im, int cx, int cy, int w, int h, int s, int e, int col)\n部分楕円の描画
ImageChar /// int imagechar ( int im, int font, int x, int y, string c, int col)\n水平に文字を描画
ImageCharUp /// int imagecharup ( int im, int font, int x, int y, string c, int col)\n垂直に文字を描画
ImageColorAllocate /// int imagecolorallocate ( int im, int red, int green, int blue)\n画像で使用する色を作成する
ImageColorAt /// int imagecolorat ( int im, int x, int y)\nピクセルの色のインデックスを取得
ImageColorClosest /// int imagecolorclosest ( int im, int red, int green, int blue)\n 指定した色に最も近い色のインデックスを取得する 
ImageColorClosestAlpha /// int imagecolorclosestalpha ( resource im, int red, int green, int blue, int alpha)\n 指定した色+アルファ値に最も近い色のIDを取得 
ImageColorClosestThwb /// int imagecolorclosesthwb ( int im, int red, int green, int blue)\n 指定した色に最も近いhue、白、黒を有する色のインデックスを得る 
ImageColorDeAllocate /// int imagecolordeallocate ( int im, int index)\n イメージの色リソースを開放する 
ImageColorExact /// int imagecolorexact ( int im, int red, int green, int blue)\n指定した色のインデックスを取得する
ImageColorExactAlpha /// int imagecolorexactalpha ( resource im, int red, int green, int blue, int alpha)\n指定した色+アルファ値のIDを取得
ImageColorResolve /// int imagecolorresolve ( int im, int red, int green, int blue)\n 指定した色または出来るだけ近い色のインデックスを得る 
ImageColorResolveAlpha /// int imagecolorresolvealpha ( resource im, int red, int green, int blue, int alpha)\n 指定した色+アルファ値または最も近い色のIDを取得する 
ImageColorSet /// bool imagecolorset ( int im, int index, int red, int green, int blue)\n指定したパレットインデックスの色を設定する
ImageColorsForIndex /// array imagecolorsforindex ( int im, int index)\nカラーインデックスからカラーの取得
ImageColorsTotal /// int imagecolorstotal ( int im)\n画像パレットの色数の検出
ImageColorTransparent /// int imagecolortransparent ( int im, int [col])\n透明色の定義
ImageCopy /// int ImageCopy ( int dst_im, int src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h)\n 画像の一部をコピーする 
ImageCopyMerge /// int ImageCopyMerge ( int dst_im, int src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct)\n イメージの一部をコピー、マージする 
ImageCopyMergeGray /// int ImageCopyMergeGray ( int dst_im, int src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct)\n グレースケールでイメージの一部をコピー、マージする 
ImageCopyResampled /// int imagecopyresampled ( resource dst_im, resource src_im, int dstX, int dstY, int srcX, int srcY, int dstW, int dstH, int srcW, int srcH)\n 再サンプリングを行いイメージの一部をコピー、伸縮する 
ImageCopyResized /// int imagecopyresized ( int dst_im, int src_im, int dstX, int dstY, int srcX, int srcY, int dstW, int dstH, int srcW, int srcH)\n画像の一部の複製とサイズ変更
ImageCreate /// int imagecreate ( int x_size, int y_size)\nパレットを使用する新規画像の作成
ImageCreateFromGD2 /// int imagecreatefromgd2 ( string filename)\n GD2ファイルまたはURLから新規イメージを生成する 
ImageCreateFromGD2Part /// int imagecreatefromgd2part ( string filename, int srcX, int srcY, int width, int height)\n GD2ファイルまたはURLの指定した部分から新規イメージを生成する 
ImageCreateFromGD /// int imagecreatefromgd ( string filename)\n GDファイルまたはURLから新規イメージを生成する 
ImageCreateFromGif /// int imagecreatefromgif ( string filename)\nファイルまたはURLから新規画像を作成
ImageCreateFromJPEG /// int imagecreatefromjpeg ( string filename)\nファイル又はURLから新規JPEG画像を作成する
ImageCreateFromPNG /// int imagecreatefrompng ( string filename)\nファイルまたはURLから新規PNG画像を作成する
ImageCreateFromString /// int imagecreatefromstring ( string image)\n 文字列の中のイメージストリームから新規イメージを作成する 
ImageCreateFromWBMP /// int imagecreatefromwbmp ( string filename)\n ファイルまたはURLから新規イメージをWindowsビットマップ形式のイメー ジを作成する 
ImageCreateFromXBM /// int imagecreatefromxbm ( string filename)\nファイル又はURLから新規イメージを生成する
ImageCreateFromXPM /// int imagecreatefromxpm ( string filename)\nファイルまたはURLから新規イメージを生成する
ImageCreateTrueColor /// resource imagecreatetruecolor ( int x_size, int y_size)\nTrueColorイメージを新規に作成する
ImageDashedLine /// int imagedashedline ( int im, int x1, int y1, int x2, int y2, int col)\nダッシュライン(破線)の描画
ImageDestroy /// int imagedestroy ( int im)\n画像の消去
ImageEllipse /// int imageellipse ( resource im, int cx, int cy, int w, int h, int col)\n楕円を描画する
ImageFill /// int imagefill ( int im, int x, int y, int col)\n塗り潰し
ImageFilledArc /// int imagefilledarc ( int im, int cx, int cy, int w, int h, int s, int e, int col, int style)\n部分楕円を描画し、塗りつぶす
ImageFilledEllipse /// int imagefilledellipse ( resource im, int cx, int cy, int w, int h, int col)\n塗りつぶされた楕円を描画する
ImageFilledPolygon /// int imagefilledpolygon ( int im, array points, int num_points, int col)\n塗りつぶした多角形の描画
ImageFilledRectangle /// int imagefilledrectangle ( int im, int x1, int y1, int x2, int y2, int col)\n塗りつぶした矩形の描画
ImageFillToBorder /// int imagefilltoborder ( int im, int x, int y, int border, int col)\n特定色での塗りつぶし
ImageFontHeight /// int imagefontheight ( int font)\nフォントの高さの取得
ImageFontWidth /// int imagefontwidth ( int font)\nフォントの幅の取得
ImageFtBBox /// array imageftbbox ( int size, int angle, string font_file, string text [, array extrainfo])\n freetype2によるフォントを用いたテキストを囲む箱を取得する 
ImageFtText /// array imagefttext ( int im, int size, int angle, int x, int y, int col, string font_file, string text [, array extrainfo])\n FreeType 2によるフォントを用いてイメージにテキストを描画する 
ImageGammaCorrect /// int imagegammacorrect ( int im, float inputgamma, float outputgamma)\n GDイメージにガンマ補正を適用する 
ImageGD2 /// int imagegd2 ( int im [, string filename])\n GD2イメージをブラウザまたはファイルに出力する 
ImageGD /// int imagegd ( int im [, string filename])\n GDイメージをブラウザまたはファイルに出力する 
ImageGif /// int imagegif ( int im, string [filename])\nブラウザーまたはファイルへ画像を出力する
ImageInterlace /// int imageinterlace ( int im, int [interlace])\nインターレースを有効もしくは無効にする
ImageJPEG /// int imagejpeg ( int im, string [filename], int [quality])\n画像をブラウザまたはファイルに出力する
ImageLine /// int imageline ( int im, int x1, int y1, int x2, int y2, int col)\n直線の描画
ImageLoadFont /// int imageloadfont ( string file)\n新規フォントのロード
ImagePaletteCopy /// int imagepalettecopy ( resource destination, resource source)\n あるイメージから他のイメージにパレットをコピーする 
ImagePNG /// int imagepng ( int im, string [filename])\n PNGイメージをブラウザまたはファイルに出力する 
ImagePolygon /// int imagepolygon ( int im, array points, int num_points, int col)\n多角形の描画
ImagePSBBox /// array imagepsbbox ( string text, int font, int size, int [space], int [tightness], float [angle])\n PostScript Type1 フォントを用いてテキスト矩形のバウンディングボックス を指定する 
ImagePSCopyFont /// int imagepscopyfont ( int fontindex)\n 後で修正するためにロード済みのフォントのコピーを作成する 
ImagePSEncodeFont /// int imagepsencodefont ( int font_index, string encodingfile)\nフォントの文字エンコードベクトルを変更する
ImagePsExtendFont /// bool imagepsextendfont ( int font_index, float extend)\nフォントを展開または圧縮する
ImagePSFreeFont /// void imagepsfreefont ( int fontindex)\nPostScript Type 1 フォント用メモリを解放する
ImagePSLoadFont /// int imagepsloadfont ( string filename)\nファイルから PostScript Type 1 フォントをロードする
ImagePsSlantFont /// bool imagepsslantfont ( int font_index, float slant)\nフォントを傾ける
ImagePSText /// array imagepstext ( int image, string text, int font, int size, int foreground, int background, int x, int y [, int space [, int tightness [, float angle [, int antialias_steps]]]])\n PostScript Type1 フォントを用いて画像の上に文字列を描く 
ImageRectangle /// int imagerectangle ( int im, int x1, int y1, int x2, int y2, int col)\n矩形の描画
imagerotate /// ressource imagerotate ( resource src_im, float angle, int bgd_color)\nRotate an image with a given angle
ImageSetBrush /// int imagesetbrush ( resource im, resource brush)\n線の描画用にブラシイメージを設定する
ImageSetPixel /// int imagesetpixel ( int im, int x, int y, int col)\n点の生成
ImageSetStyle /// int imagesetstyle ( resource im, array style)\n線描画用のスタイルを設定する
ImageSetThickness /// void imagesetthickness ( resource im, int thickness)\n線描画用の線幅を設定する
ImageSetTile /// int imagesettile ( resource im, resource tile)\n塗りつぶし用のイメージを設定する
ImageString /// int imagestring ( int im, int font, int x, int y, string s, int col)\n文字列を水平に描画する
ImageStringUp /// int imagestringup ( int im, int font, int x, int y, string s, int col)\n文字列を垂直に描画する
ImageSX /// int imagesx ( int im)\n画像の幅を取得
ImageSY /// int imagesy ( int im)\n画像の高さを取得する
ImageTrueColorToPalette /// void imagetruecolortopalette ( resource im, bool dither, int ncolors)\nTrueColorイメージをパレットイメージに変換する
ImageTTFBBox /// array ImageTTFBBox ( int size, int angle, string fontfile, string text)\n TypeTypeフォントを使用したテキストのbounding boxの生成 
ImageTTFText /// array ImageTTFText ( int im, int size, int angle, int x, int y, int col, string fontfile, string text)\nTrueTypeフォントを使用したテキストの出力
ImageTypes /// int imagetypes ( void)\n 使用中のPHPの実行ファイルでサポートされているイメージの型を返す 
ImageWBMP /// int imageWBMP ( int im, string [filename])\nブラウザまたはファイルにイメージを出力する
iptcembed /// array iptcembed ( string iptcdata, string jpeg_file_name [, int spool])\n バイナリIPTCデータをJPEGイメージに埋めこむ 
iptcparse /// array iptcparse ( string iptcblock)\n バイナリのIPTChttp://www.iptc.org/ブロックを パースする 
http://www.iptc.org/ /// \n
JPEG2WBMP /// int jpeg2wbmp ( string jpegname, string wbmpname, int d_height, int d_width, int threshold)\n JPEGイメージファイルからWBMPイメージファイルに変換する 
PNG2WBMP /// int png2wbmp ( string pngname, string wbmpname, int d_height, int d_width, int threshold)\n PNGイメージファイルからWBMPイメージファイルに変換する 
read_exif_data /// array read_exif_data ( string filename)\nJPEGからEXIFヘッダを読み込む
imap_8bit /// string imap_8bit ( string string)\n 8bit 文字列を quoted-printable 文字列に変換する 
imap_alerts /// array imap_alerts ( void)\n ページリクエストの間または最後にスタックがリセットされて以来発生した 全てのIMAP警告メッセージを返す 
imap_append /// int imap_append ( int imap_stream, string mbox, string message, string [flags])\n 指定されたメールボックスに文字列メッセージを追加する 
imap_base64 /// string imap_base64 ( string text)\nBASE64 でエンコードされたテキストのデコード
imap_binary /// string imap_binary ( string string)\n8ビット文字列をbase64文字列に変換する
imap_body /// string imap_body ( int imap_stream, int msg_number, int [flags])\nメッセージ本文を読む
imap_bodystruct /// object imap_bodystruct ( int stream_id, int msg_no, int section)\n 指定したメッセージの指定したbodyセクションの構造を読み込む 
imap_check /// object imap_check ( int imap_stream)\n現在のメールボックスをチェックする
imap_clearflag_full /// string imap_clearflag_full ( int stream, string sequence, string flag, string options)\nメッセージのフラグをクリアする
imap_close /// int imap_close ( int imap_stream, int [flags])\nIMAP ストリームをクローズする
imap_createmailbox /// int imap_createmailbox ( int imap_stream, string mbox)\n新しいメールボックスを作る
imap_delete /// int imap_delete ( int imap_stream, int msg_number, int [flags])\n 現在のメールボックスから削除するメッセージに印を付ける 
imap_deletemailbox /// int imap_deletemailbox ( int imap_stream, string mbox)\nメールボックスを削除する
imap_errors /// array imap_errors ( void)\n ページのリクエストの間かエラースタックがリセットされて以来 生じた全てのIMAPエラーを返す 
imap_expunge /// int imap_expunge ( int imap_stream)\n 削除用にマークされたすべてのメッセージを削除する 
imap_fetch_overview /// array imap_fetch_overview ( int imap_stream, string sequence)\n 指定したメッセージのヘッダ情報の概要を読む 
imap_fetchbody /// string imap_fetchbody ( int imap_stream, int msg_number, string part_number, flags [flags])\nメッセージ本文中の特定のセクションを取り出す
imap_fetchheader /// string imap_fetchheader ( int imap_stream, int msgno, int flags)\nメッセージのヘッダを返す
imap_fetchstructure /// object imap_fetchstructure ( int imap_stream, int msg_number, int [flags])\n 特定のメッセージの構造を読み込む 
imap_get_quota /// array imap_get_quota ( int imap_stream, string quota_root)\n クオータレベルの設定、メールボックス毎の使用状況を取得する 
imap_get_quotaroot /// array imap_get_quotaroot ( resource imap_stream, string quota_root)\n Retrieve the quota settings per user 
imap_getmailboxes /// array imap_getmailboxes ( int imap_stream, string ref, string pattern)\n メールボックスのリストを読み込み、各ボックスに関する詳細な情報を返す 
imap_getsubscribed /// array imap_getsubscribed ( int imap_stream, string ref, string pattern)\n購読中の全メールボックスの一覧
imap_header /// object imap_header ( int imap_stream, int msg_number, int [fromlength], int [subjectlength], string [defaulthost])\nメッセージのヘッダを読む
imap_headerinfo /// object imap_headerinfo ( int imap_stream, int msg_number, int [fromlength], int [subjectlength], string [defaulthost])\nメッセージヘッダを読み込む
imap_headers /// array imap_headers ( int imap_stream)\n メールボックス内の、すべてのメッセージのヘッダを返す 
imap_last_error /// string imap_last_error ( void)\n ページリクエスト時に生じた直近の IMAP エラーを返す 
imap_list /// array imap_list ( resource imap_stream, string ref, string pattern)\nRead the list of mailboxes
imap_listmailbox /// array imap_listmailbox ( int imap_stream, string ref, string pattern)\nメールボックスのリストを読む
imap_listscan /// array imap_listscan ( resource imap_stream, string ref, string pattern, string content)\n Read the list of mailboxes, takes a string to search for in the text of the mailbox 
imap_listsubscribed /// array imap_listsubscribed ( int imap_stream, string ref, string pattern)\n購読中のすべてのメールボックス一覧
imap_lsub /// array imap_lsub ( resource imap_stream, string ref, string pattern)\nList all the subscribed mailboxes
imap_mail_compose /// string imap_mail_compose ( array envelope, array body)\n 指定したエンベロープおよびボディーセクションに基づきMIMEメッセー ジを作成 
imap_mail_copy /// int imap_mail_copy ( int imap_stream, string msglist, string mbox, int [flags])\n指定されたメッセージをメールボックスにコピーする 
imap_mail_move /// int imap_mail_move ( int imap_stream, string msglist, string mbox, int [flags])\n 指定されたメッセージをメールボックスに移動する 
imap_mail /// string imap_mail ( string to, string subject, string message, string [additional_headers], string [cc], string [bcc], string [rpath])\n e-mailメッセージを送信する 
imap_mailboxmsginfo /// object imap_mailboxmsginfo ( int imap_stream)\n現在のメールボックスに関する情報を得る
imap_mime_header_decode /// array imap_mime_header_decode ( string text)\nMIMEヘッダーエレメントをデコードする
imap_msgno /// int imap_msgno ( int imap_stream, int uid)\n指定したUIDのメッセージ番号を返す
imap_num_msg /// int imap_num_msg ( int stream_id)\n 現在のメールボックスのメッセージ数を取得する 
imap_num_recent /// int imap_num_recent ( int imap_stream)\n現在のメールボックスにある新規メッセージの数の取得
imap_open /// int imap_open ( string mailbox, string username, string password, int [flags])\n メールボックスへのIMAPストリームをオープンする 
imap_ping /// int imap_ping ( int imap_stream)\nIMAP ストリームの有効性チェック
imap_qprint /// string imap_qprint ( string string)\nquoted-printable 文字列を 8 ビット文字列に変換する 
imap_renamemailbox /// int imap_renamemailbox ( int imap_stream, string old_mbox, string new_mbox)\nメールボックスの名前を変更する
imap_reopen /// int imap_reopen ( int imap_stream, string mailbox, string [flags])\n 新規メールボックスへのIMAP ストリームを再度オープンする 
imap_rfc822_parse_adrlist /// array imap_rfc822_parse_adrlist ( string address, string default_host)\nアドレス文字列を解釈します
imap_rfc822_parse_headers /// object imap_rfc822_parse_headers ( string headers, string [defaulthost])\n文字列からメールヘッダを解釈する
imap_rfc822_write_address /// string imap_rfc822_write_address ( string mailbox, string host, string personal)\n 指定したメールボックス、ホスト、個人情報を適当にフォーマットされ た電子メールアドレスにして返す 
imap_scanmailbox /// array imap_scanmailbox ( int imap_stream, string ref, string pattern, string content)\n メールボックスのリストを読み、メールボックスのテキストにおいて 文字列を検索する 
imap_search /// array imap_search ( int imap_stream, string criteria, int flags)\n 指定した検索条件にマッチするメッセージを配列として返す 
imap_set_quota /// int imap_set_quota ( int imap_stream, string quota_root, int quota_limit)\n指定したメールボックスにクオータを設定する
imap_setacl /// int imap_setacl ( int stream_id, string mailbox, string id, string rights)\n 指定したメールボックスのACLを設定する 
imap_setflag_full /// string imap_setflag_full ( int stream, string sequence, string flag, string options)\nメッセージにフラグをセットする
imap_sort /// array imap_sort ( int stream, int criteria, int reverse, int options)\n
imap_status /// object imap_status ( int imap_stream, string mailbox, int options)\n 現在のメールボックス以外のメールボックスのステータス情報を返す 
imap_subscribe /// int imap_subscribe ( int imap_stream, string mbox)\nメールボックスの購読
imap_thread /// int imap_thread ( int stream_id [, int flags])\n REFERENCESツリーによりスレッド化して返す 
imap_uid /// int imap_uid ( int imap_stream, int msgno)\n 指定したメッセージシーケンス番号の UID を返す 
imap_undelete /// int imap_undelete ( int imap_stream, int msg_number)\n削除マークがついているメッセージのマークをはずす
imap_unsubscribe /// int imap_unsubscribe ( int imap_stream, string mbox)\nメールボックスの購読をやめる
imap_utf7_decode /// string imap_utf7_decode ( string text)\n 修正版UTF-7 エンコードされた文字列をデコードする 
imap_utf7_encode /// string imap_utf7_encode ( string data)\n 8ビットデータを修正版UTF-7テキストにに変換する 
imap_utf8 /// string imap_utf8 ( string text)\n テキストをUTF8に変換する 
ifx_affected_rows /// int ifx_affected_rows ( int result_id)\nクエリーで作用された行の数を得る
ifx_blobinfile_mode /// void ifx_blobinfile_mode ( int mode)\n 全ての select クエリーに関するデフォルトの BLOB モードを設定する 
ifx_byteasvarchar /// void ifx_byteasvarchar ( int mode)\nデフォルトのバイトモードを設定する
ifx_close /// int ifx_close ( int [link_identifier])\nInformix 接続を閉じる
ifx_connect /// int ifx_connect ( string [database], string [userid], string [password])\nInformix サーバーへの接続をオープンする
ifx_copy_blob /// int ifx_copy_blob ( int bid)\n指定した BLOB オブジェクトを2重化する
ifx_create_blob /// int ifx_create_blob ( int type, int mode, string param)\nBLOB オブジェクトを作成する
ifx_create_char /// int ifx_create_char ( string param)\n文字オブジェクトを作成する
ifx_do /// int ifx_do ( int result_id)\n事前に準備された SQL 文を実行する
ifx_error /// string ifx_error ( void)\n直近の Informix コールのエラーコードを返す
ifx_errormsg /// string ifx_errormsg ( int [errorcode])\n直近の Informix コールのエラーメッセージを返す
ifx_fetch_row /// array ifx_fetch_row ( int result_id, mixed [position])\n配列として行を得る
ifx_fieldproperties /// array ifx_fieldproperties ( int result_id)\nSQL フィールドプロパティのリスト
ifx_fieldtypes /// array ifx_fieldtypes ( int result_id)\nInformix SQL フィールドのリスト
ifx_free_blob /// int ifx_free_blob ( int bid)\nBLOB オブジェクトを削除する
ifx_free_char /// int ifx_free_char ( int bid)\n文字オブジェクトを削除する
ifx_free_result /// int ifx_free_result ( int result_id)\nクエリーに関するリソースを解放する
ifx_get_blob /// int ifx_get_blob ( int bid)\nBLOB オブジェクトの内容を返す
ifx_get_char /// int ifx_get_char ( int bid)\n文字オブジェクトの内容を返す
ifx_getsqlca /// array ifx_getsqlca ( int result_id)\nクエリ実行後、sqlca.sqlerrd[0..5] の値を得る
ifx_htmltbl_result /// int ifx_htmltbl_result ( int result_id, string [html_table_options])\n クエリー結果の全行を HTML テーブルにフォーマットする 
ifx_nullformat /// void ifx_nullformat ( int mode)\nS取得する行のデフォルトの返り値を設定する
ifx_num_fields /// int ifx_num_fields ( int result_id)\nクエリーのカラム数を返します
ifx_num_rows /// int ifx_num_rows ( int result_id)\nクエリーから既に取得された行の数を数える
ifx_pconnect /// int ifx_pconnect ( string [database], string [userid], string [password])\n持続的 Informix 接続をオープンする
ifx_prepare /// int ifx_prepare ( string query, int conn_id, int [cursor_def], mixed blobidarray)\nSQL 文を実行用に準備する
ifx_query /// int ifx_query ( string query, int [link_identifier], int [cursor_type], mixed [blobidarray])\nInformix クエリーを送信する
ifx_textasvarchar /// void ifx_textasvarchar ( int mode)\nデフォルトのテキストモードを設定する
ifx_update_blob /// ifx_update_blob ( int bid, string content)\nBLOB オブジェクトの内容を更新する
ifx_update_char /// int ifx_update_char ( int bid, string content)\n文字オブジェクトの内容を更新する
ifxus_close_slob /// int ifxus_close_slob ( int bid)\nSLOB オブジェクトを削除する
ifxus_create_slob /// int ifxus_create_slob ( int mode)\nSLOB オブジェクトを作成し、オープンする
ifxus_free_slob /// int ifxus_free_slob ( int bid)\nSLOB オブジェクトを削除する
ifxus_open_slob /// int ifxus_open_slob ( long bid, int mode)\nSLOB オブジェクトをオープンする
ifxus_read_slob /// int ifxus_read_slob ( long bid, long nbytes)\nSLOB オブジェクトから n バイト読みこむ
ifxus_seek_slob /// int ifxus_seek_slob ( long bid, int mode, long offset)\n現在のファイル位置またはシーク位置を返す
ifxus_tell_slob /// int ifxus_tell_slob ( long bid)\nカレントのファイルまたはシーク位置を返す
ifxus_write_slob /// int ifxus_write_slob ( long bid, string content)\nSLOB オブジェクトに文字列を書きこむ
ibase_blob_add /// int ibase_blob_add ( int blob_id, string data)\n 生成されたblobにデータを追加する 
ibase_blob_cancel /// int ibase_blob_cancel ( int blob_id)\n blobの生成を取り消す 
ibase_blob_close /// int ibase_blob_close ( int blob_id)\n blobを閉じる 
ibase_blob_create /// int ibase_blob_create ( [int link_identifier])\n データを追加するためにblobを生成する 
ibase_blob_echo /// int ibase_blob_echo ( string blob_id_str)\n ブラウザにblobの内容を出力する 
ibase_blob_get /// string ibase_blob_get ( int blob_id, int len)\n オープンしたblobからデータのバイト数を取得する 
ibase_blob_import /// string ibase_blob_import ( [int link_identifier, int file_id])\n blobを生成し、ファイルをコピーし、閉じる 
ibase_blob_info /// object ibase_blob_info ( string blob_id_str)\n blobの長さと他の便利な情報を返す 
ibase_blob_open /// int ibase_blob_open ( string blob_id)\n データの一部を取得するためにblobをオープンする 
ibase_close /// int ibase_close ( int [connection_id])\n InterBaseデータベースへの接続を閉じる 
ibase_commit /// int ibase_commit ( int [link_identifier], int trans_number)\nトランザクションをコミットする
ibase_connect /// int ibase_connect ( string database, string [username], string [password], string [charset], int [buffers], int [dialect], string [role])\n InterBaseデータベースへの接続をオープンする 
ibase_errmsg /// string ibase_errmsg ( void)\n エラーメッセージを返す 
ibase_execute /// int ibase_execute ( int query, int [bind_args])\n準備されたクエリを実行する
ibase_fetch_object /// object ibase_fetch_object ( int result_id)\nInterBaseデータベースからオブジェクトを得る
ibase_fetch_row /// array ibase_fetch_row ( int result_identifier)\nInterBaseデータベースから1行分の結果を取得する
ibase_field_info /// array ibase_field_info ( int result, int field number)\n フィールドに関する情報を得る 
ibase_free_query /// int ibase_free_query ( int query)\n 準備されたクエリにより確保されたメモリを解放する 
ibase_free_result /// int ibase_free_result ( int result_identifier)\n結果セットを解放する
ibase_num_fields /// int ibase_num_fields ( int result_id)\n 結果セットにおけるフィールド数を得る 
ibase_pconnect /// int ibase_pconnect ( string database, string [username], string [password], string [charset], int [buffers], int [dialect], string [role])\n InterBaseデータベースへの持続的接続をオープンする 
ibase_prepare /// int ibase_prepare ( int [link_identifier], string query)\n 後でパラメータのバインド及び実行するためにクエリを準備する 
ibase_query /// int ibase_query ( int [link_identifier], string query, int [bind_args])\nInterBaseデータベースでクエリを実行する
ibase_rollback /// int ibase_rollback ( int [link_identifier], int trans_number)\nトランザクションをロールバックする
ibase_timefmt /// int ibase_timefmt ( string format, int [columntype])\n クエリーから返されるtimestamp、data、time型カラムのフォーマットを設定する 
ibase_trans /// int ibase_trans ( int [trans_args], int [link_identifier])\nトランザクションを開始する
ingres_autocommit /// bool ingres_autocommit ( resource [link])\nautocommitをオンまたはオフに切替える
ingres_close /// bool ingres_close ( resource [link])\nIngres II データベース接続を閉じる
ingres_commit /// bool ingres_commit ( resource [link])\nトランザクションをコミットする
ingres_connect /// resource ingres_connect ( string [database], string [username], string [password])\nIngres II データベースへの接続をオープンする
ingres_fetch_array /// array ingres_fetch_array ( int [result_type], resource [link])\n1行分の結果を配列に取得する
ingres_fetch_object /// object ingres_fetch_object ( int [result_type], resource [link])\n1行分の結果をオブジェクトとして取得する
ingres_fetch_row /// array ingres_fetch_row ( resource [link])\n1行分の結果を数値添字配列として取得する
ingres_field_length /// int ingres_field_length ( int index, resource [link])\nフィールド長を得る
ingres_field_name /// string ingres_field_name ( int index, resource [link])\nクエリ結果においてフィールド名を得る
ingres_field_nullable /// bool ingres_field_nullable ( int index, resource [link])\nフィールドにNULL値を設定可能かどうか調べる
ingres_field_precision /// int ingres_field_precision ( int index, resource [link])\nフィールドの精度を得る
ingres_field_scale /// int ingres_field_scale ( int index, resource [link])\nフィールドのスケールを得る
ingres_field_type /// string ingres_field_type ( int index, resource [link])\nクエリ結果においてフィールドの型を得る
ingres_num_fields /// int ingres_num_fields ( resource [link])\n 直近のクエリにより返されたフィールドの数を得る 
ingres_num_rows /// int ingres_num_rows ( resource [link])\n 直近のクエリで作用されたレコードの数を取得し、返す 
ingres_pconnect /// resource ingres_pconnect ( string [database], string [username], string [password])\n Ingres II データベースへの持続的接続をオープンする 
ingres_query /// bool ingres_query ( string query, resource [link])\nIngres II にSQLクエリを送信する
ingres_rollback /// bool ingres_rollback ( resource [link])\nトランザクションをロールバックする
ircg_channel_mode /// boolean ircg_channel_mode ( resource connection, string channel, string mode_spec, string nick)\n ユーザ用にチャンネルモードフラグを設定する 
ircg_disconnect /// boolean ircg_disconnect ( resource connection, string reason)\n サーバへの接続を閉じる 
ircg_fetch_error_msg /// array ircg_fetch_error_msg ( resource connection)\n 以前のircg処理からエラーを返す 
ircg_get_username /// string ircg_get_username ( int connection)\n 接続用にユーザ名を取得する 
ircg_html_encode /// boolean ircg_html_encode ( string html_string)\n HTMLで保存された文字列をエンコードする 
ircg_ignore_add /// boolean ircg_ignore_add ( resource connection, string nick)\n サーバ上の除外リストにユーザを追加する 
ircg_ignore_del /// boolean ircg_ignore_del ( resource connection, string nick)\n サーバ上の除外リストからユーザを削除する 
ircg_is_conn_alive /// boolean ircg_is_conn_alive ( resource connection)\n 接続ステータスを確認する 
ircg_join /// boolean ircg_join ( resource connection, string channel)\n 接続中のサーバ上でチャンネルに接続する 
ircg_kick /// boolean ircg_kick ( resource connection, string channel, string nick, string reason)\n サーバ上のチャネルからユーザを排除する 
ircg_lookup_format_messages /// boolean ircg_lookup_format_messages ( string name)\n IRCメッセージの表示用文字列フォーマットの設定を選択する 
ircg_msg /// boolean ircg_msg ( resource connection, string recipient, string message [, boolean suppress])\n サーバ上のチャンネルまたはユーザにメッセージを送信する 
ircg_nick /// boolean ircg_nick ( resource connection, string nick)\n サーバ上のニックネームを変更する 
ircg_nickname_escape /// string ircg_nickname_escape ( string nick)\n ニックネームの中の特別な文字がIRC互換となるようにデコードする 
ircg_nickname_unescape /// string ircg_nickname_unescape ( string nick)\n エンコードされたニックネームをデコードする 
ircg_notice /// boolean ircg_notice ( resource connection, string , string message)\n サーバ上のユーザに通知を送信する 
ircg_part /// boolean ircg_part ( resource connection, string channel)\n サーバ上のチャンネルから離脱する 
ircg_pconnect /// resource ircg_pconnect ( string username [, string server_ip [, int server_port [, string msg_format [, array ctcp_messages [, array user_settings]]]]])\n IRCサーバに接続する 
ircg_register_format_messages /// boolean ircg_register_format_messages ( string name, array messages)\n IRCメッセージの表示用文字列フォーマットの設定を登録する 
ircg_set_current /// boolean ircg_set_current ( resource connection)\n 出力用にカレントの接続を設定する 
ircg_set_file /// bool ircg_set_file ( int connection, string path)\n 接続用にログファイルを設定する 
ircg_set_on_die /// bool ircg_set_on_die ( int connection, string host, int port, string data)\n 接続が終了する際にホスト側で実行されるアクションを設定する 
ircg_topic /// boolean ircg_topic ( resource connection, string channel, string new_topic)\n サーバ上のチャネル用にトピックを設定する 
ircg_whois /// boolean ircg_whois ( resource connection, string nick)\n サーバ上のニックネームからユーザ情報を検索する 
java_last_exception_clear /// void java_last_exception_clear ( void)\n直近の例外をクリアする
java_last_exception_get /// exception java_last_exception_get ( void)\n直近のJava例外を取得する
ldap_8859_to_t61 /// string ldap_8859_to_t61 ( string value)\n 8859文字をt61文字に変換する 
ldap_add /// int ldap_add ( int link_identifier, string dn, array entry)\nLDAP ディレクトリにエントリを付加する
ldap_bind /// int ldap_bind ( int link_identifier, string [bind_rdn], string [bind_password])\nLDAP ディレクトリにバインドする
ldap_close /// int ldap_close ( int link_identifier)\nLDAP サーバーへのリンクを閉じる
ldap_compare /// int ldap_compare ( int link_identifier, string dn, string attribute, string value)\n DNで指定したエントリで見付かった属性の値を比較する 
ldap_connect /// int ldap_connect ( string [hostname], int [port])\nLDAP サーバーへ接続する
ldap_count_entries /// int ldap_count_entries ( int link_identifier, int result_identifier)\nサーチ時のエントリ数をカウントする
ldap_delete /// int ldap_delete ( int link_identifier, string dn)\nディレクトリからエントリを削除する
ldap_dn2ufn /// string ldap_dn2ufn ( string dn)\n DN をユーザに分かりやすい名前のフォーマットに変換する 
ldap_err2str /// string ldap_err2str ( int errno)\n LDAP のエラー番号をエラーメッセージ文字列に変換する 
ldap_errno /// int ldap_errno ( int link_id)\n 直近の LDAP コマンドのLDAP エラー番号を返す 
ldap_error /// string ldap_error ( int link_id)\n 直近のLDAPコマンドのLDAP エラーメッセージを返す 
ldap_explode_dn /// array ldap_explode_dn ( string dn, int with_attrib)\nDN を構成要素毎に分割する
ldap_first_attribute /// string ldap_first_attribute ( int link_identifier, int result_entry_identifier, int ber_identifier)\n最初の属性を返す
ldap_first_entry /// int ldap_first_entry ( int link_identifier, int result_identifier)\n 最初の結果 ID を返す
ldap_first_reference /// int ldap_first_reference ( int link, int result)\n 最初のリファレンスを返す 
ldap_free_result /// int ldap_free_result ( int result_identifier)\n結果メモリを開放する
ldap_get_attributes /// array ldap_get_attributes ( int link_identifier, int result_entry_identifier)\nサーチ結果エントリから属性を得る
ldap_get_dn /// string ldap_get_dn ( int link_identifier, int result_entry_identifier)\n結果エントリから DN を得る
ldap_get_entries /// array ldap_get_entries ( int link_identifier, int result_identifier)\n全ての結果エントリを得る
ldap_get_option /// boolean ldap_get_option ( int link_identifier, int option, mixed retval)\n指定したオプションの現在の値を得る
ldap_get_values_len /// array ldap_get_values_len ( int link_identifier, int result_entry_identifier, string attribute)\n結果エントリから全てのバイナリ値を得る
ldap_get_values /// array ldap_get_values ( int link_identifier, int result_entry_identifier, string attribute)\n結果エントリから全ての値を得る
ldap_list /// int ldap_list ( int link_identifier, string base_dn, string filter, array [attributes], int [attrsonly], int [sizelimit], int [timelimit], int [deref])\nシングルレベル探索を行う
ldap_mod_add /// int ldap_mod_add ( int link_identifier, string dn, array entry)\n現在の属性に属性を追加する
ldap_mod_del /// int ldap_mod_del ( int link_identifier, string dn, array entry)\n現在の属性から属性を削除する
ldap_mod_replace /// int ldap_mod_replace ( int link_identifier, string dn, array entry)\n属性を新規の値に置換する
ldap_modify /// int ldap_modify ( int link_identifier, string dn, array entry)\nLDAP エントリを修正する
ldap_next_attribute /// string ldap_next_attribute ( int link_identifier, int result_entry_identifier, int ber_identifier)\n結果における次の属性を得る
ldap_next_entry /// int ldap_next_entry ( int link_identifier, int result_entry_identifier)\n次の結果エントリを得る
ldap_next_reference /// int ldap_next_reference ( int link, int entry)\n 次のリファレンスを得る 
ldap_parse_reference /// boolean ldap_parse_reference ( int link, int entry, array referrals)\n 参照エントリかえあ情報を展開する 
ldap_parse_result /// boolean ldap_parse_result ( int link, int result, int errcode, string matcheddn, string errmsg, array referrals)\n 結果から情報を展開する 
ldap_read /// int ldap_read ( int link_identifier, string base_dn, string filter, array [attributes], int [attrsonly], int [sizelimit], int [timelimit], int [deref])\nエントリを読み込む
ldap_rename /// boolean ldap_rename ( int link_identifier, string dn, string newrdn, string newparent, boolean deleteoldrdn)\nエントリ名を修正する
ldap_search /// int ldap_search ( int link_identifier, string base_dn, string filter, array [attributes], int [attrsonly], int [sizelimit], int [timelimit], int [deref])\nLDAP ツリーを探索する
ldap_set_option /// bool ldap_set_option ( int link_identifier, int option, mixed newval)\n指定したオプションの値を設定する
ldap_set_rebind_proc /// int ldap_set_rebind_proc ( int link, string callback)\n 参照先を再バインドするためのコールバック関数を設定する 
ldap_sort /// int ldap_sort ( int link, int result, string sortfilter)\n LDAP結果エントリをソートする 
ldap_start_tls /// int ldap_start_tls ( int link)\n TLSを開始する 
ldap_t61_to_8859 /// string ldap_t61_to_8859 ( string value)\n t61文字を8859文字に変換する 
ldap_unbind /// int ldap_unbind ( int link_identifier)\nLDAP ディレクトリへのバインドを解除する
ezmlm_hash /// int ezmlm_hash ( string addr)\nEZMLMで必要なハッシュ値を計算する
mail /// bool mail ( string to, string subject, string message, string [additional_headers], string [additional_parameters])\nメールの送信
mailparse_determine_best_xfer_encoding /// int mailparse_determine_best_xfer_encoding ( resource fp)\n ファイルポインタから内容を読み込む際に最も適したエンコーディング を定義する 
mailparse_msg_create /// int mailparse_msg_create ( void)\n メッセージをパースするために使用可能なハンドルを返す 
mailparse_msg_extract_part_file /// string mailparse_msg_extract_part_file ( resource rfc2045, string filename [, string callbackfunc])\n メッセージセクションを展開/デコードし、transfer encodingをデコー ドする 
mailparse_msg_extract_part /// void mailparse_msg_extract_part ( resource rfc2045, string msgbody [, string callbackfunc])\n メッセージセクションを展開/デコードする。callbackfuncが指定されな い場合、コンテンツは"stdout"に送られる 
mailparse_msg_free /// void mailparse_msg_free ( resource rfc2045buf)\n mailparse_msg_creaにより確保されたハンドルを解放する 
mailparse_msg_get_part_data /// array mailparse_msg_get_part_data ( resource rfc2045)\n メッセージに関する情報の連想配列を返す 
mailparse_msg_get_part /// int mailparse_msg_get_part ( resource rfc2045, string mimesection)\n MIMEメッセージの指定したセクションに関するハンドルを返す 
mailparse_msg_get_structure /// array mailparse_msg_get_structure ( resource rfc2045)\n 指定したメッセージ内のMIMEセクション名の配列を返す 
mailparse_msg_parse_file /// resource mailparse_msg_parse_file ( string filename)\nファイルをパースし、その構造を表すリソースを返す
mailparse_msg_parse /// void mailparse_msg_parse ( resource rfc2045buf, string data)\nデータをパースし、バッファに追加する
mailparse_rfc822_parse_addresses /// array mailparse_rfc822_parse_addresses ( string addresses)\n アドレスをパースし、そのデータを含むハッシュを返す 
mailparse_stream_encode /// bool mailparse_stream_encode ( resource sourcefp, resource destfp, string encoding)\n ソースファイルポインタのストリームからデータを取得し、エンコーディ ングを適用し、出力ファイルポインタに書き込む 
mailparse_uudecode_all /// array mailparse_uudecode_all ( resource fp)\n ファイルポインタからデータをスキャン、uuencodeされたファイルを展 開、ファイル名のリストを含む配列を返す 
abs /// mixed abs ( mixed number)\n絶対値
acos /// float acos ( float arg)\nアークコサイン
acosh /// float acosh ( float arg)\n逆双曲線余弦
asin /// float asin ( float arg)\nアークサイン
asinh /// float asinh ( float arg)\n逆双曲線正弦
atan2 /// float atan2 ( float y, float x)\n2変数のアークタンジェント
atan /// float atan ( float arg)\nアークタンジェント
atanh /// float atanh ( float arg)\n逆双曲線正接
base_convert /// strin base_convert ( string number, int frombase, int tobase)\n任意の基底に変換する
BinDec /// int bindec ( string binary_string)\n 2進数 を 10 進数に変換します
ceil /// float ceil ( float value)\n切り上げ
cos /// float cos ( float arg)\nコサイン
cosh /// float cosh ( float arg)\n双曲線余弦
decbin /// string decbin ( int number)\n 10 進数を 2進数 に変換します
dechex /// string dechex ( int number)\n 10 進数を 16 進数に変換します
decoct /// string decoct ( int number)\n10 進数を 8 進数に変換します。
deg2rad /// double deg2rad ( double number)\n 度単位の数値をラジアン単位に変換する 
exp /// float exp ( float arg)\n自然対数 e の累乗を計算します
expm1 /// float expm1 ( float number)\n 値がゼロに近い時にでも精度を保つためにexp(number)-1を返す 
floor /// float floor ( float value)\n切捨て
fmod /// float fmod ( float x, float y)\nReturns the floating point remainder (modulo) of the division of the arguments
getrandmax /// int getrandmax ( void)\n乱数の最大値を取得する
HexDec /// int hexdec ( string hex_string)\n16 進数を 10 進数に変換します。
hypot /// float hypot ( float num1, float num2)\n sqrt( num1*num1 + num2*num2)を返す 
is_finite /// bool is_finite ( float val)\n 
is_infinite /// bool is_infinite ( float val)\n 
is_nan /// bool is_nan ( float val)\n 
lcg_value /// double lcg_value ( void)\n複合型の線形合同発生器(LCG)
log10 /// float log10 ( float arg)\n底数 10 の対数
log1p /// float log1p ( float number)\n ゼロに近い場合の精度を維持するため、log(1 + number)を返す 
log /// float log ( float arg)\n自然対数
max /// mixed max ( mixed arg1, mixed arg2, mixed argn)\n最も大きい数値を返す
min /// mixed min ( mixed arg1, mixed arg2, mixed argn)\n最も小さい値を返す
mt_getrandmax /// int mt_getrandmax ( void)\n乱数値の最大値を表示する
mt_rand /// int mt_rand ( int [min], int [max])\n改良型乱数値を生成する
mt_srand /// void mt_srand ( int seed)\n改良型乱数生成器にシードを与える
OctDec /// int octdec ( string octal_string)\n8進数を10進数に変換する
pi /// double pi ( void)\n円周率の値を得る
pow /// number pow ( number base, number exp)\n指数関数値
rad2deg /// double rad2deg ( double number)\n ラジアン単位の数を等価な度単位の数に変換する 
rand /// int rand ( int [min], int [max])\n乱数を生成します
round /// double round ( double val, int [precision])\n浮動点整数を整数値に丸める
sin /// float sin ( float arg)\nサイン
sinh /// float sinh ( float arg)\n双曲線正弦
sqrt /// float sqrt ( float arg)\n平方根
srand /// void srand ( int seed)\n乱数ジェネレータを初期化する
tan /// float tan ( float arg)\nタンジェント
tanh /// float tanh ( float arg)\n双曲線正接
mb_convert_case /// string mb_convert_case ( string str, int mode [, string encoding])\n文字列に対してケースフォルディングを行う
mb_convert_encoding /// string mb_convert_encoding ( string str, string to-encoding [, mixed from-encoding])\n文字エンコーディングを変換する
mb_convert_kana /// string mb_convert_kana ( string str, string option [, mixed encoding])\n カナを("全角かな"、"半角かな"等に)変換する 
mb_convert_variables /// string mb_convert_variables ( string to-encoding, mixed from-encoding, mixed vars)\n変数の文字コードを変換する
mb_decode_mimeheader /// string mb_decode_mimeheader ( string str)\nMIMEヘッダフィールドの文字列をデコードする
mb_decode_numericentity /// string mb_decode_numericentity ( string str, array convmap [, string encoding])\n HTML数値エンティティを文字にデコードする 
mb_detect_encoding /// string mb_detect_encoding ( string str [, mixed encoding-list])\n文字エンコーディングを検出する
mb_detect_order /// array mb_detect_order ( [mixed encoding-list])\n 文字エンコーディング検出順序の設定/取得 
mb_encode_mimeheader /// string mb_encode_mimeheader ( string str [, string charset [, string transfer-encoding [, string linefeed]]])\nMIMEヘッダの文字列をエンコードする
mb_encode_numericentity /// string mb_encode_numericentity ( string str, array convmap [, string encoding])\n 文字をHTML数値エンティティにエンコードする 
mb_ereg_match /// bool mb_ereg_match ( string pattern, string string [, string option])\nマルチバイト文字列が正規表現に一致するか調べる
mb_ereg_replace /// string mb_ereg_replace ( string pattern, string replacement, string string [, array option])\nマルチバイト文字列に正規表現による置換を行う
mb_ereg_search_getpos /// array mb_ereg_search_getpos ( void)\n 次の正規表現検索を開始する位置を取得する 
mb_ereg_search_getregs /// array mb_ereg_search_getregs ( void)\n マルチバイト文字列が正規表現に一致する部分があるか調べる 
mb_ereg_search_init /// array mb_ereg_search_init ( string string [, string pattern [, string option]])\n マルチバイト正規表現検索用の文字列と正規表現を設定する 
mb_ereg_search_pos /// array mb_ereg_search_pos ( [string pattern [, string option]])\n 指定したマルチバイト文字列が正規表現に一致する部分の位置と長さを返 す 
mb_ereg_search_regs /// array mb_ereg_search_regs ( [string pattern [, string option]])\n 指定したマルチバイト文字列が正規表現に一致する部分を取得する 
mb_ereg_search_setpos /// array mb_ereg_search_setpos ( void)\n 次の正規表現検索を開始する位置を設定する 
mb_ereg_search /// bool mb_ereg_search ( [string pattern [, string option]])\n 指定したマルチバイト文字列が正規表現に一致するか調べる 
mb_ereg /// int mb_ereg ( string pattern, string string [, array regs])\nマルチバイト文字列に正規表現マッチを行う
mb_eregi_replace /// string mb_eregi_replace ( string pattern, string replace, string string)\n マルチバイト文字列に大文字小文字を区別せずに正規表現による置換を行う 
mb_eregi /// int mb_eregi ( string pattern, string string [, array regs])\n マルチバイト文字列に大文字小文字を区別しない正規表現マッチを行う 
mb_get_info /// string mb_get_info ( [string type])\nmbstringの内部設定値を取得する
mb_http_input /// string mb_http_input ( [string type])\nHTTP入力文字エンコーディングの検出
mb_http_output /// string mb_http_output ( [string encoding])\nHTTP出力文字エンコーディングの設定/取得
mb_internal_encoding /// string mb_internal_encoding ( [string encoding])\n 内部文字エンコーディングの設定/取得 
mb_language /// string mb_language ( [string language])\n カレントの言語を設定/取得 
mb_output_handler /// string mb_output_handler ( string contents, int status)\n 出力バッファ内で文字エンコーディングを変換するコールバック関数 
mb_parse_str /// boolean mb_parse_str ( string encoded_string [, array result])\n GET/POST/COOKIEデータをパースし、グローバル変数を設定する 
mb_preferred_mime_name /// string mb_preferred_mime_name ( string encoding)\nMIME文字設定を文字列で得る
mb_regex_encoding /// string mb_regex_encoding ( [string encoding])\n カレントの正規表現用のエンコーディングを文字列として返す 
mb_regex_set_options /// string mb_regex_set_options ( [string options])\n マルチバイト正規表現関数のデフォルトオプションを取得または設定する 
mb_send_mail /// boolean mb_send_mail ( string to, string subject, string message [, string additional_headers [, string additional_parameter]])\n エンコード変換を行ってメールを送信する 
mb_split /// array mb_split ( string pattern, string string [, int limit])\nマルチバイト文字列を正規表現により分割する
mb_strcut /// string mb_strcut ( string str, int start [, int length [, string encoding]])\n文字列の一部を得る
mb_strimwidth /// string mb_strimwidth ( string str, int start, int width, string trimmarker [, string encoding])\n指定した幅で文字列を丸める
mb_strlen /// string mb_strlen ( string str [, string encoding])\n文字列の長さを得る
mb_strpos /// int mb_strpos ( string haystack, string needle [, int offset [, string encoding]])\n 文字列の中に指定した文字列が最初に現れる位置を見つける 
mb_strrpos /// int mb_strrpos ( string haystack, string needle [, string encoding])\n 文字列の中に指定した文字列が最後に現れる位置を見つける 
mb_strtolower /// string mb_strtolower ( string str [, string encoding])\n文字列を小文字にする
mb_strtoupper /// string mb_strtoupper ( string str [, string encoding])\n文字列を大文字にする
mb_strwidth /// int mb_strwidth ( string str [, string encoding])\n文字列の幅を返す
mb_substitute_character /// mixed mb_substitute_character ( [mixed substrchar])\n置換文字の設定/入手
mb_substr_count /// int mb_substr_count ( string haystack, string needle [, string encoding])\n副文字列の出現関数を数える
mb_substr /// string mb_substr ( string str, int start [, int length [, string encoding]])\n文字列の一部を得る
mcal_append_event /// int mcal_append_event ( int mcal_stream)\nMCALカレンダーに新規イベントを保存する
mcal_close /// int mcal_close ( int mcal_stream, int flags)\nMCAL ストリームを閉じる
mcal_create_calendar /// string mcal_create_calendar ( int stream, string calendar)\n新規にMCALカレンダを作成する
mcal_date_compare /// int mcal_date_compare ( int a_year, int a_month, int a_day, int b_year, int b_month, int b_day)\n二つの日付を比較する
mcal_date_valid /// int mcal_date_valid ( int year, int month, int day)\n 指定した年月日が有効な日付である場合に TRUE を返す 
mcal_day_of_week /// int mcal_day_of_week ( int year, int month, int day)\n 指定した日の曜日を返す 
mcal_day_of_year /// int mcal_ ( int year, int month, int day)\n 指定した日の年間積算日を返す 
mcal_days_in_month /// int mcal_days_in_month ( int month, int year)\n 指定した月の日数を返す 
mcal_delete_calendar /// string mcal_delete_calendar ( int stream, string calendar)\nMCALカレンダを削除する
mcal_delete_event /// int mcal_delete_event ( int mcal_stream, int [event_id])\nMCAL カレンダーからイベントを削除する
mcal_event_add_attribute /// void mcal_event_add_attribute ( int stream, string attribute, string value)\n グローバルイベント構造体ストリームに属性およびその値を追加する 
mcal_event_init /// int mcal_event_init ( int stream)\n グローバルイベント構造体のストリームを初期化する 
mcal_event_set_alarm /// int mcal_event_set_alarm ( int stream, int alarm)\n グローバルイベント構造体ストリームのアラームを設定する 
mcal_event_set_category /// int mcal_event_set_category ( int stream, string category)\n グローバルイベント構造体ストリームの≪テゴリを設定する 
mcal_event_set_class /// int mcal_event_set_class ( int stream, int class)\n グローバルイベント構造体ストリームのクラスを設定する 
mcal_event_set_description /// int mcal_event_set_description ( int stream, string description)\n グローバルイベント構造体ストリームの description を設定する 
mcal_event_set_end /// int mcal_event_set_end ( int stream, int year, int month, int [day], int [hour], int [min], int [sec])\n グローバルイベント構造体ストリームの終了日を設定する 
mcal_event_set_recur_daily /// int mcal_event_set_recur_daily ( int stream, int year, int month, int day, int interval)\n グローバルイベント構造体ストリームの反復を設定する 
mcal_event_set_recur_monthly_mday /// int mcal_event_set_recur_monthly_mday ( int stream, int year, int month, int day, int interval)\n グローバルイベント構造体ストリームの繰り返しを設定する 
mcal_event_set_recur_monthly_wday /// int mcal_event_set_recur_monthly_wday ( int stream, int year, int month, int day, int interval)\n グローバルイベント構造体ストリームの繰り返しを設定する 
mcal_event_set_recur_none /// int mcal_event_set_recur_none ( int stream)\n グローバルイベント構造体ストリームの反復を設定する 
mcal_event_set_recur_weekly /// int mcal_event_set_recur_weekly ( int stream, int year, int month, int day, int interval, int weekdays)\n グローバルイベント構造体ストリームの繰り返しを設定する 
mcal_event_set_recur_yearly /// int mcal_event_set_recur_yearly ( int stream, int year, int month, int day, int interval)\n グローバルイベント構造体ストリームの繰り返しを設定する 
mcal_event_set_start /// int mcal_event_set_start ( int stream, int year, int month, int [day], int [hour], int [min], int [sec])\n グローバルイベント構造体ストリームの開始日を設定する 
mcal_event_set_title /// int mcal_event_set_title ( int stream, string title)\n グローバルイベント構造体ストリームのtitleを設定する 
mcal_expunge /// int mcal_expunge ( int stream)\n 削除マークを付けられた全てのイベントを削除する 
mcal_fetch_current_stream_event /// object mcal_fetch_current_stream_event ( int stream)\n 現在のイベント構造体ストリームを有するオブジェクトを返す 
mcal_fetch_event /// object mcal_fetch_event ( int mcal_stream, int event_id, int [options])\n カレンダーストリームからイベントを取得する 
mcal_is_leap_year /// int mcal_is_leap_year ( int year)\n 指定した年が閏年であるかどうかを返す 
mcal_list_alarms /// array mcal_list_alarms ( int mcal_stream, int [begin_year], int [begin_month], int [begin_day], int [end_year], int [end_month], int [end_day])\n 指定した datetime までにアラームを発生するイベントのリストを返す 
mcal_list_events /// array mcal_list_events ( int mcal_stream, object begin_date, object [end_date])\n 日付または日付の範囲に関してIDのリストを返す 
mcal_next_recurrence /// int mcal_next_recurrence ( int stream, int weekstart, array next)\nイベントが次に発生する日を返す
mcal_open /// int mcal_open ( string calendar, string username, string password [, int options])\nMCAL 接続をオープンする
mcal_popen /// int mcal_popen ( string calendar, string username, string password [, int options])\n永続的なMCAL接続をオープンする
mcal_rename_calendar /// string mcal_rename_calendar ( int stream, string old_name, string new_name)\nMCALカレンダの名前を変更する
mcal_reopen /// int mcal_reopen ( string calendar [, int options])\nMCAL接続を再オープンする
mcal_snooze /// int mcal_snooze ( int id)\nイベントのアラームをオフにする
mcal_store_event /// int mcal_store_event ( int mcal_stream)\nMCALカレンダーの既存のイベントを修正する
mcal_time_valid /// int mcal_time_valid ( int hour, int minutes, int seconds)\n 指定した時間、分、秒が有効な時間である場合に TRUE を返す 
mcal_week_of_year /// int mcal_week_of_year ( int day, int month, int year)\n 指定した日付の週番号を返す 
mcrypt_cbc /// string mcrypt_cbc ( int cipher, string key, string data, int mode, string [iv])\nCBC モードでデータを暗号化/複合化する
mcrypt_cfb /// string mcrypt_cfb ( int cipher, string key, string data, int mode, string iv)\nCFB モードでデータを暗号化/複合化する
mcrypt_create_iv /// string mcrypt_create_iv ( int size, int source)\n 乱数ソースから初期化ベクトル(IV)を生成する 
mcrypt_decrypt /// string mcrypt_decrypt ( string cipher, string key, string data, string mode, string [iv])\n 指定したパラメータで暗号化されたテキストを複合化する 
mcrypt_ecb /// string mcrypt_ecb ( int cipher, string key, string data, int mode)\nECB モードでデータを暗号化/複合化する
mcrypt_enc_get_algorithms_name /// string mcrypt_enc_get_algorithms_name ( resource td)\nオープンされたアルゴリズムの名前を返す
mcrypt_enc_get_block_size /// int mcrypt_enc_get_block_size ( resource td)\nオープンされたアルゴリズムのブロックサイズを返す
mcrypt_enc_get_iv_size /// int mcrypt_enc_get_iv_size ( resource td)\nオープンされたアルゴリズムのIVの大きさを返す
mcrypt_enc_get_key_size /// int mcrypt_enc_get_key_size ( resource td)\n オープンされたモードでサポートされる最大キー長を返す 
mcrypt_enc_get_modes_name /// string mcrypt_enc_get_modes_name ( resource td)\nオープンされたモードの名前を返す
mcrypt_enc_get_supported_key_sizes /// array mcrypt_enc_get_supported_key_sizes ( resource td)\n オープンされたアルゴリズムでサポートされるキー長を配列にして返す 
mcrypt_enc_is_block_algorithm_mode /// int mcrypt_enc_is_block_algorithm_mode ( resource td)\n オープンされたモードの暗号がブロックモードで動作するかどうかを調べる 
mcrypt_enc_is_block_algorithm /// int mcrypt_enc_is_block_algorithm ( resource td)\n オープンされたモードの暗号がブロックモードであるかどうかを調べる algorithm 
mcrypt_enc_is_block_mode /// int mcrypt_enc_is_block_mode ( resource td)\n オープンされたモードがブロック出力を行うかどうかを調べる 
mcrypt_enc_self_test /// int mcrypt_enc_self_test ( resource td)\n オープンしたモジュールのセルフテストを実行する 
mcrypt_encrypt /// string mcrypt_encrypt ( string cipher, string key, string data, string mode, string [iv])\n指定したパラメータでプレーンテキストを暗号化する
mcrypt_generic_deinit /// bool mcrypt_generic_deinit ( resource td)\n デストラクタtdにより指定された暗号化を終了する 
mcrypt_generic_end /// bool mcrypt_generic_end ( resource td)\n暗号処理を終了する
mcrypt_generic_init /// int mcrypt_generic_init ( resource td, string key, string iv)\n暗号化に必要な全てのバッファを初期化する
mcrypt_generic /// string mcrypt_generic ( resource td, string data)\nデータを暗号化する
mcrypt_get_block_size /// int mcrypt_get_block_size ( int cipher)\n指定した暗号のブロックサイズを得る
mcrypt_get_cipher_name /// string mcrypt_get_cipher_name ( int cipher)\n指定した暗号の名前を得る
mcrypt_get_iv_size /// int mcrypt_get_iv_size ( string cipher, string mode)\n 指定した暗号/モードの組み合わせに属するIVの大きさを返す 
mcrypt_get_key_size /// int mcrypt_get_key_size ( int cipher)\n指定した暗号のキーの長さを得る
mcrypt_list_algorithms /// array mcrypt_list_algorithms ( string [lib_dir])\nサポートされる全ての暗号を配列として取得する
mcrypt_list_modes /// array mcrypt_list_modes ( string [lib_dir])\n サポートされる全てのモードの配列を取得する
mcrypt_module_close /// bool mcrypt_module_close ( resource td)\n デストラクタtdを解放する 
mcrypt_module_get_algo_block_size /// int mcrypt_module_get_algo_block_size ( string algorithm, string [lib_dir])\n指定したアルゴリズムのブロック長を返す
mcrypt_module_get_algo_key_size /// int mcrypt_module_get_algo_key_size ( string algorithm, string [lib_dir])\n オープンされたモードでサポートされる最大キー長を返す 
mcrypt_module_get_supported_key_sizes /// array mcrypt_module_get_supported_key_sizes ( string algorithm [, string lib_dir])\nReturns an array with the supported keysizes of the opened algorithm
mcrypt_module_is_block_algorithm_mode /// bool mcrypt_module_is_block_algorithm_mode ( string mode, string [lib_dir])\n 指定したモジュールがブロックアルゴリズムであるかどうかを返す 
mcrypt_module_is_block_algorithm /// bool mcrypt_module_is_block_algorithm ( string algorithm, string [lib_dir])\n 指定したアルゴリズムがブロックアルゴリズムであるかを調べる 
mcrypt_module_is_block_mode /// bool mcrypt_module_is_block_mode ( string mode, string [lib_dir])\n 指定したモードがブロック出力を行うかどうかを返す 
mcrypt_module_open /// resource mcrypt_module_open ( string algorithm, string algorithm_directory, string mode, string mode_directory)\n 使用するアルゴリズムおよびモードのモジュールをオープンする 
mcrypt_module_self_test /// bool mcrypt_module_self_test ( string algorithm, string [lib_dir])\n 指定したモジュールのセルフテストを実行する 
mcrypt_ofb /// string mcrypt_ofb ( int cipher, string key, string data, int mode, string iv)\nOFB モードでデータを暗号化/複合化する
mdecrypt_generic /// string mdecrypt_generic ( resource td, string data)\nデータを複合化する
mcve_adduser /// int mcve_adduser ( resource conn, string admin_password, int usersetup)\n Add an MCVE user using usersetup structure 
mcve_adduserarg /// int mcve_adduserarg ( resource usersetup, int argtype, string argval)\n Add a value to user configuration structure 
mcve_bt /// int mcve_bt ( resource conn, string username, string password)\n Get unsettled batch totals 
mcve_checkstatus /// int mcve_checkstatus ( resource conn, int identifier)\n Check to see if a transaction has completed 
mcve_chkpwd /// int mcve_chkpwd ( resource conn, string username, string password)\n Verify Password 
mcve_chngpwd /// int mcve_chngpwd ( resource conn, string admin_password, string new_password)\n Change the system administrator's password 
mcve_completeauthorizations /// int mcve_completeauthorizations ( resource conn, int &array)\n Number of complete authorizations in queue, returning an array of their identifiers 
mcve_connect /// int mcve_connect ( resource conn)\n Establish the connection to MCVE 
mcve_connectionerror /// string mcve_connectionerror ( resource conn)\n Get a textual representation of why a connection failed 
mcve_deleteresponse /// bool mcve_deleteresponse ( resource conn, int identifier)\n Delete specified transaction from MCVE_CONN structure 
mcve_deletetrans /// bool mcve_deletetrans ( resource conn, int identifier)\n Delete specified transaction from MCVE_CONN structure 
mcve_deleteusersetup /// void mcve_deleteusersetup ( resource usersetup)\n Deallocate data associated with usersetup structure 
mcve_deluser /// int mcve_deluser ( resource conn, string admin_password, string username)\n Delete an MCVE user account 
mcve_destroyconn /// void mcve_destroyconn ( resource conn)\n Destroy the connection and MCVE_CONN structure 
mcve_destroyengine /// void mcve_destroyengine ( void)\n Free memory associated with IP/SSL connectivity 
mcve_disableuser /// int mcve_disableuser ( resource conn, string admin_password, string username)\n Disable an active MCVE user account 
mcve_edituser /// int mcve_edituser ( resource conn, string admin_password, int usersetup)\n Edit MCVE user using usersetup structure 
mcve_enableuser /// int mcve_enableuser ( resource conn, string admin_password, string username)\n Enable an inactive MCVE user account 
mcve_force /// int mcve_force ( resiurce conn, string username, string password, string trackdata, string account, string expdate, float amount, string authcode, string comments, string clerkid, string stationid, int ptrannum)\n Send a FORCE to MCVE. (typically, a phone-authorization) 
mcve_getcell /// string mcve_getcell ( resource conn, int identifier, string column, int row)\n Get a specific cell from a comma delimited response by column name 
mcve_getcellbynum /// string mcve_getcellbynum ( resource conn, int identifier, int column, int row)\n Get a specific cell from a comma delimited response by column number 
mcve_getcommadelimited /// string mcve_getcommadelimited ( resource conn, int identifier)\n Get the RAW comma delimited data returned from MCVE 
mcve_getheader /// string mcve_getheader ( resource conn, int identifier, int column_num)\n Get the name of the column in a comma-delimited response 
mcve_getuserarg /// string mcve_getuserarg ( resource usersetup, int argtype)\n Grab a value from usersetup structure 
mcve_getuserparam /// string mcve_getuserparam ( resource conn, long identifier, int key)\n Get a user response parameter 
mcve_gft /// int mcve_gft ( resource conn, string username, string password, int type, string account, string clerkid, string stationid, string comments, int ptrannum, string startdate, string enddate)\n Audit MCVE for Failed transactions 
mcve_gl /// int mcve_gl ( int conn, string username, string password, int type, string account, string batch, string clerkid, string stationid, string comments, int ptrannum, string startdate, string enddate)\n Audit MCVE for settled transactions 
mcve_gut /// int mcve_gut ( resource conn, string username, string password, int type, string account, string clerkid, string stationid, string comments, int ptrannum, string startdate, string enddate)\n Audit MCVE for Unsettled Transactions 
mcve_initconn /// resource mcve_initconn ( void)\n Create and initialize an MCVE_CONN structure 
mcve_initengine /// int mcve_initengine ( string location)\n Ready the client for IP/SSL Communication 
mcve_initusersetup /// resource mcve_initusersetup ( void)\n Initialize structure to store user data 
mcve_iscommadelimited /// int mcve_iscommadelimited ( resource conn, int identifier)\n Checks to see if response is comma delimited 
mcve_liststats /// int mcve_liststats ( resource conn, string admin_password)\n List statistics for all users on MCVE system 
mcve_listusers /// int mcve_listusers ( resource conn, string admin_password)\n List all users on MCVE system 
mcve_maxconntimeout /// bool mcve_maxconntimeout ( resource conn, int secs)\n The maximum amount of time the API will attempt a connection to MCVE 
mcve_monitor /// int mcve_monitor ( resource conn)\n Perform communication with MCVE (send/receive data) Non-blocking 
mcve_numcolumns /// int mcve_numcolumns ( resource conn, int identifier)\n Number of columns returned in a comma delimited response 
mcve_numrows /// int mcve_numrows ( resource conn, int identifier)\n Number of rows returned in a comma delimited response 
mcve_override /// int mcve_override ( resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string street, string zip, string cv, string comments, string clerkid, string stationid, int ptrannum)\n Send an OVERRIDE to MCVE 
mcve_parsecommadelimited /// int mcve_parsecommadelimited ( resource conn, int identifier)\n Parse the comma delimited response so mcve_getcell, etc will work 
mcve_ping /// int mcve_ping ( resource conn)\n Send a ping request to MCVE 
mcve_preauth /// int mcve_preauth ( resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string street, string zip, string cv, string comments, string clerkid, string stationid, int ptrannum)\n Send a PREAUTHORIZATION to MCVE 
mcve_preauthcompletion /// int mcve_preauthcompletion ( resource conn, string username, string password, float finalamount, int sid, int ptrannum)\n Complete a PREAUTHORIZATION... Ready it for settlement 
mcve_qc /// int mcve_qc ( resource conn, string username, string password, string clerkid, string stationid, string comments, int ptrannum)\n Audit MCVE for a list of transactions in the outgoing queue 
mcve_responseparam /// string mcve_responseparam ( resource conn, long identifier, string key)\n Get a custom response parameter 
mcve_return /// int mcve_return ( int conn, string username, string password, string trackdata, string account, string expdate, float amount, string comments, string clerkid, string stationid, int ptrannum)\n Issue a RETURN or CREDIT to MCVE 
mcve_returncode /// int mcve_returncode ( resource conn, int identifier)\n Grab the exact return code from the transaction 
mcve_returnstatus /// int mcve_returnstatus ( resource conn, int identifier)\n Check to see if the transaction was successful 
mcve_sale /// int mcve_sale ( resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string street, string zip, string cv, string comments, string clerkid, string stationid, int ptrannum)\n Send a SALE to MCVE 
mcve_setblocking /// int mcve_setblocking ( resource conn, int tf)\n Set blocking/non-blocking mode for connection 
mcve_setdropfile /// int mcve_setdropfile ( resource conn, string directory)\n Set the connection method to Drop-File 
mcve_setip /// int mcve_setip ( resource conn, string host, int port)\n Set the connection method to IP 
mcve_setssl /// int mcve_setssl ( resource conn, string host, int port)\n Set the connection method to SSL 
mcve_settimeout /// int mcve_settimeout ( resource conn, int seconds)\n Set maximum transaction time (per trans) 
mcve_settle /// int mcve_settle ( resource conn, string username, string password, string batch)\n Issue a settlement command to do a batch deposit 
mcve_text_avs /// string mcve_text_avs ( string code)\n Get a textual representation of the return_avs 
mcve_text_code /// string mcve_text_code ( string code)\n Get a textual representation of the return_code 
mcve_text_cv /// string mcve_text_cv ( int code)\n Get a textual representation of the return_cv 
mcve_transactionauth /// string mcve_transactionauth ( resource conn, int identifier)\n Get the authorization number returned for the transaction (alpha-numeric) 
mcve_transactionavs /// int mcve_transactionavs ( resource conn, int identifier)\n Get the Address Verification return status 
mcve_transactionbatch /// int mcve_transactionbatch ( resource conn, int identifier)\n Get the batch number associated with the transaction 
mcve_transactioncv /// int mcve_transactioncv ( resource conn, int identifier)\n Get the CVC2/CVV2/CID return status 
mcve_transactionid /// int mcve_transactionid ( resource conn, int identifier)\n Get the unique system id for the transaction 
mcve_transactionitem /// int mcve_transactionitem ( resource conn, int identifier)\n Get the ITEM number in the associated batch for this transaction 
mcve_transactionssent /// int mcve_transactionssent ( resource conn)\n Check to see if outgoing buffer is clear 
mcve_transactiontext /// string mcve_transactiontext ( resource conn, int identifier)\n Get verbiage (text) return from MCVE or processing institution 
mcve_transinqueue /// int mcve_transinqueue ( resource conn)\n Number of transactions in client-queue 
mcve_transnew /// int mcve_transnew ( resource conn)\n Start a new transaction 
mcve_transparam /// int mcve_transparam ( resource conn, long identifier, int key)\n Add a parameter to a transaction 
mcve_transsend /// int mcve_transsend ( resource conn, long identifier)\n Finalize and send the transaction 
mcve_ub /// int mcve_ub ( resource conn, string username, string password)\n Get a list of all Unsettled batches 
mcve_uwait /// int mcve_uwait ( long microsecs)\n Wait x microsecs 
mcve_verifyconnection /// bool mcve_verifyconnection ( resource conn, int tf)\n Set whether or not to PING upon connect to verify connection 
mcve_verifysslcert /// bool mcve_verifysslcert ( resource conn, int tf)\n Set whether or not to verify the server ssl certificate 
mcve_void /// int mcve_void ( resource conn, string username, string password, int sid, int ptrannum)\n VOID a transaction in the settlement queue 
mhash_count /// int mhash_count ( void)\n利用可能なハッシュIDの最大値を得る
mhash_get_block_size /// int mhash_get_block_size ( int hash)\n指定したハッシュのブロックサイズを得る
mhash_get_hash_name /// string mhash_get_hash_name ( int hash)\n指定したハッシュの名前を得る
mhash_keygen_s2k /// string mhash_keygen_s2k ( int hash, string password, string salt, int bytes)\nキーを生成する
mhash /// string mhash ( int hash, string data, string [key])\nハッシュ値を計算する
mime_content_type /// string mime_content_type ( string filename)\nDetect MIME Content-type for a file
mssql_bind /// int mssql_bind ( int stmt, string param_name, mixed var, int type [, int is_output [, int is_null [, int maxlen]]])\n ストアドプロシージャまたはリモートストアドプロシージャへパラメー タを追加する 
mssql_close /// int mssql_close ( int [link_identifier])\nMS SQL サーバーへの接続を閉じる
mssql_connect /// int mssql_connect ( string [servername], string [username], string [password])\nMS SQL サーバー接続をオープンする
mssql_data_seek /// int mssql_data_seek ( int result_identifier, int row_number)\n内部行ポインタを移動する
mssql_execute /// int mssql_execute ( int stmt)\n MS SQLサーバデータベースでストアドプロシージャを実行する 
mssql_fetch_array /// int mssql_fetch_array ( int result)\n配列として行を取得する
mssql_fetch_assoc /// array mssql_fetch_assoc ( int result_id [, int result_type])\n result_idで指定した結果集合でカレントの行を連想配列として返す 
mssql_fetch_batch /// int mssql_fetch_batch ( string result_index)\n レコードの次のバッチを返す 
mssql_fetch_field /// object mssql_fetch_field ( int result, int [field_offset])\nフィールド情報を取得する
mssql_fetch_object /// int mssql_fetch_object ( int result)\nオブジェクトとして行を取得する
mssql_fetch_row /// array mssql_fetch_row ( int result)\n配列として行を取得する
mssql_field_length /// int mssql_field_length ( int result, int [offset])\nフィールド長を得る
mssql_field_name /// int mssql_field_name ( int result, int [offset])\nフィールド名を得る
mssql_field_seek /// int mssql_field_seek ( int result, int field_offset)\nフィールドオフセットを設定する
mssql_field_type /// string mssql_field_type ( int result, int [offset])\nフィールド型を得る
mssql_free_result /// int mssql_free_result ( int result)\n結果保持用メモリを解放する
mssql_get_last_message /// string mssql_get_last_message ( void)\n サーバーの直近のメッセージを返す (min_message_severityに依存する?) 
mssql_guid_string /// string mssql_guid_string ( string binary [, int short_format])\n 16バイトバイナリGUIDを文字列に変換する 
mssql_init /// int mssql_init ( string sp_name [, int conn_id])\n ストアドプロシージャまたはリモートのストアドプロシージャを初期化 する 
mssql_min_error_severity /// void mssql_min_error_severity ( int severity)\nエラー判定基準を小さく設定する
mssql_min_message_severity /// void mssql_min_message_severity ( int severity)\nメッセージ判定基準を小さく設定する
mssql_next_result /// bool mssql_next_result ( int result_id)\n次の結果に内部結果ポインタを移動する
mssql_num_fields /// int mssql_num_fields ( int result)\n結果のフィールド数を得る
mssql_num_rows /// int mssql_num_rows ( string result)\n結果の行数を得る
mssql_pconnect /// int mssql_pconnect ( string [servername], string [username], string [password])\n持続的 MS SQL 接続をオープンする
mssql_query /// int mssql_query ( string query, int [link_identifier])\nMS SQL クエリーを送る
mssql_result /// int mssql_result ( int result, int i, mixed field)\n結果データを得る
mssql_rows_affected /// int mssql_rows_affected ( int conn_id)\n クエリにより取得したレコード数を返す 
mssql_select_db /// int mssql_select_db ( string database_name, int [link_identifier])\nMS SQL データベースを選択する
ming_setcubicthreshold /// void ming_setcubicthreshold ( int threshold)\n Set cubic threshold (?) 
ming_setscale /// void ming_setscale ( int scale)\n Set scale (?) 
ming_useswfversion /// void ming_useswfversion ( int version)\n Use SWF version (?) 
SWFAction /// new swfaction ( string script)\n新規アクションを作成する
SWFBitmap->getHeight /// int swfbitmap->getheight ( void)\nビットマップの高さを返す
SWFBitmap->getWidth /// int swfbitmap->getwidth ( void)\nビットマップの幅を返す
SWFBitmap /// new swfbitmap ( string filename [, int alphafilename])\nビットマップオブジェクトをロードする
swfbutton_keypress /// int swfbutton_keypress ( string str)\n Returns the action flag for keyPress(char) 
SWFbutton->addAction /// void swfbutton->addaction ( ressource action, int flags)\nアクションを追加する
SWFbutton->addShape /// void swfbutton->addshape ( ressource shape, int flags)\nボタンにシェープを追加する
SWFbutton->setAction /// void swfbutton->setaction ( ressource action)\nSets the action
SWFbutton->setdown /// void swfbutton->setdown ( ressource shape)\nAlias for addShape(shape, SWFBUTTON_DOWN))
SWFbutton->setHit /// void swfbutton->sethit ( ressource shape)\naddShape(shape, SWFBUTTON_HIT)へのエイリアス
SWFbutton->setOver /// void swfbutton->setover ( ressource shape)\naddShape(shape, SWFBUTTON_OVER)へのエイリアス
SWFbutton->setUp /// void swfbutton->setup ( ressource shape)\naddShape(shape, SWFBUTTON_UP)へのエイリアス
SWFbutton /// new swfbutton ( void)\n新規ボタンを作成する
SWFDisplayItem->addColor /// void swfdisplayitem->addcolor ( [int red [, int green [, int blue [, int a]]]])\n このアイテムの色変換に指定した色を追加する 
SWFDisplayItem->move /// void swfdisplayitem->move ( int dx, int dy)\nオブジェクトを相対座標系で移動する
SWFDisplayItem->moveTo /// void swfdisplayitem->moveto ( int x, int y)\nグローバル座標系でオブジェクトを移動する
SWFDisplayItem->multColor /// void swfdisplayitem->multcolor ( [int red [, int green [, int blue [, int a]]]])\nアイテムの色変換を乗算する
SWFDisplayItem->remove /// void swfdisplayitem->remove ( void)\nムービーからオブジェクトを削除する
SWFDisplayItem->Rotate /// void swfdisplayitem->rotate ( float ddegrees)\n相対座標系で回転する
SWFDisplayItem->rotateTo /// void swfdisplayitem->rotateto ( float degrees)\nグローバル座標系でオブジェクトを回転する
SWFDisplayItem->scale /// void swfdisplayitem->scale ( int dx, int dy)\n相対座標系でオブジェクトを拡大縮小する
SWFDisplayItem->scaleTo /// void swfdisplayitem->scaleto ( int x, int y)\nグローバル座標系でオブジェクトを拡大縮小する
SWFDisplayItem->setDepth /// void swfdisplayitem->setdepth ( float depth)\nz-orderを設定する
SWFDisplayItem->setName /// void swfdisplayitem->setname ( string name)\nオブジェクトの名前を設定する
SWFDisplayItem->setRatio /// void swfdisplayitem->setratio ( float ratio)\nオブジェクト比を設定する
SWFDisplayItem->skewX /// void swfdisplayitem->skewx ( float ddegrees)\nX-skewに追加する
SWFDisplayItem->skewXTo /// void swfdisplayitem->skewxto ( float degrees)\nX-skewを設定する
SWFDisplayItem->skewY /// void swfdisplayitem->skewy ( float ddegrees)\nY-skewに追加する
SWFDisplayItem->skewYTo /// void swfdisplayitem->skewyto ( float degrees)\nY-skewを設定する
SWFDisplayItem /// new swfdisplayitem ( void)\n新規に displayitem オブジェクトを作成する
SWFFill->moveTo /// void swffill->moveto ( int x, int y)\n塗りつぶしの原点を移動する
SWFFill->rotateTo /// void swffill->rotateto ( float degrees)\n塗りつぶしの回転を設定する
SWFFill->scaleTo /// void swffill->scaleto ( int x, int y)\n塗りつぶしの倍率を設定する
SWFFill->skewXTo /// void swffill->skewxto ( float x)\nx-skewを設定する
SWFFill->skewYTo /// void swffill->skewyto ( float y)\ny-skewを設定する
SWFFill /// The \nSWFFill オブジェクトをロードする
getwidth /// int swffont->getwidth ( string string)\n文字列の幅を返す
SWFFont /// new swffont ( string filename)\nフォントの定義をロードする
SWFGradient->addEntry /// void swfgradient->addentry ( float ratio, int red, int green, int blue [, int a])\n傾きリストにエントリを追加する
SWFGradient /// new swfgradient ( void)\n傾きオブジェクトを作成する
SWFMorph->getshape1 /// mixed swfmorph->getshape1 ( void)\n最初のシェープへのハンドルを得る
SWFMorph->getshape2 /// mixed swfmorph->getshape2 ( void)\n最後のシェープへのハンドルを得る
SWFMorph /// new swfmorph ( void)\n新規にSWFMorphオブジェクトを作成する
SWFMovie->add /// void swfmovie->add ( ressource instance)\nムービーにデータ型を追加する
SWFMovie->nextframe /// void swfmovie->nextframe ( void)\nアニメーションの次フレームに移動
SWFMovie->output /// void swfmovie->output ( void)\n作成したムービーを出力する
SWFMovie->remove /// void swfmovie->remove ( ressource instance)\n 表示リストからオブジェクトのインスタンスを削除する 
SWFMovie->save /// void swfmovie->save ( string filename)\nムービーをファイルに保存する
SWFMovie->setbackground /// void swfmovie->setbackground ( int red, int green, int blue)\n背景色を設定する
SWFMovie->setdimension /// void swfmovie->setdimension ( int width, int height)\nムービーの幅と高さを設定する
SWFMovie->setframes /// void swfmovie->setframes ( string numberofframes)\nアニメーションの総フレーム数を設定する
SWFMovie->setrate /// void swfmovie->setrate ( int rate)\nアニメーションのフレームレートを設定する
SWFMovie->streammp3 /// void swfmovie->streammp3 ( string mp3FileName)\nMP3 ファイルへのストリーム
SWFMovie /// new swfmovie ( void)\n SWFバージョン4ムービー形式で新規ムービーオブジェクトを作成する 
SWFShape->addFill /// void swfshape->addfill ( int red, int green, int blue [, int a])\n塗りつぶし色をシェープに追加する
SWFShape->drawCurve /// void swfshape->drawcurve ( int controldx, int controldy, int anchordx, int anchordy)\n曲線を画く (相対座標)
SWFShape->drawCurveTo /// void swfshape->drawcurveto ( int controlx, int controly, int anchorx, int anchory)\n曲線を画く
SWFShape->drawLine /// void swfshape->drawline ( int dx, int dy)\n線を画く (相対座標)
SWFShape->drawLineTo /// void swfshape->drawlineto ( int x, int y)\n線を画く
SWFShape->movePen /// void swfshape->movepen ( int dx, int dy)\nシェープのペンを(相対)移動する
SWFShape->movePenTo /// void swfshape->movepento ( int x, int y)\nシェープのペンを移動する
SWFShape->setLeftFill /// void swfshape->setleftfill ( swfgradient fill)\n左ラスター色を設定する
SWFShape->setLine /// void swfshape->setline ( int width [, int red [, int green [, int blue [, int a]]]])\n輪郭の線種を設定する
SWFShape->setRightFill /// void swfshape->setrightfill ( swfgradient fill)\n右ラスター色を設定する
SWFShape /// new swfshape ( void)\n新規に輪郭オブジェクトを作成する
SWFSprite->add /// void swfsprite->add ( resource object)\nオブジェクトをスプライトに追加する
SWFSprite->nextframe /// void swfsprite->nextframe ( void)\nアニメーションの次のフレームに移動する
SWFSprite->remove /// void swfsprite->remove ( ressource object)\nオブジェクトをスプライトから削除する
SWFSprite->setframes /// void swfsprite->setframes ( int numberofframes)\nアニメーションの総フレーム数を設定する
SWFSprite /// new swfsprite ( void)\nムービークリップ(スプライト)を作成する
SWFText->addString /// void swftext->addstring ( string string)\n文字列を画く
SWFText->getWidth /// void swftext->addstring ( string string)\n文字列の幅を計算する
SWFText->moveTo /// void swftext->moveto ( int x, int y)\nペンを移動する
SWFText->setColor /// void swftext->setcolor ( int red, int green, int blue [, int a])\nカレントのフォント色を設定する
SWFText->setFont /// void swftext->setfont ( string font)\nカレントのフォントを設定する
SWFText->setHeight /// void swftext->setheight ( int height)\nカレントのフォントの高さを設定する
SWFText->setSpacing /// void swftext->setspacing ( float spacing)\nカレントのフォントの間隔を設定する
SWFMorph /// new swftext ( void)\n新規にSWFTextオブジェクトを作成する
SWFTextField->addstring /// void swftextfield->addstring ( string string)\n指定した文字列をテキストフィールドに結合する
SWFTextField->align /// void swftextfield->align ( int alignement)\nテキストフィールドのアライメントを設定する
SWFTextField->setbounds /// void swftextfield->setbounds ( int width, int height)\nテキストフィールドの幅と高さを設定する
SWFTextField->setcolor /// void swftextfield->setcolor ( int red, int green, int blue [, int a])\nテキストフィールドの色を設定する
SWFTextField->setFont /// void swftextfield->setfont ( string font)\nテキストフィールドフォントを設定する
SWFTextField->setHeight /// void swftextfield->setheight ( int height)\n 指定したテキストフィールドフォントの高さを設定する 
SWFTextField->setindentation /// void swftextfield->setindentation ( int width)\n先頭行のインデントを設定する
SWFTextField->setLeftMargin /// void swftextfield->setleftmargin ( int width)\nテキストフィールドの左マージン幅を設定する
SWFTextField->setLineSpacing /// void swftextfield->setlinespacing ( int height)\nテキストフィールドの行間を設定する
SWFTextField->setMargins /// void swftextfield->setmargins ( int left, int right)\nテキストフィールドのマージン幅を設定する
SWFTextField->setname /// void swftextfield->setname ( string name)\n変数名を設定する
SWFTextField->setrightMargin /// void swftextfield->setrightmargin ( int width)\nキストフィールドの右マージン幅を設定する
SWFTextField /// new swftextfield ( [int flags])\nテキストフィールドのオブジェクトを作成する
connection_aborted /// int connection_aborted ( void)\n クライアントとの接続が断となった場合にTRUEを返す 
connection_status /// int connection_status ( void)\n接続ステータスのビットフィールドを返す
connection_timeout /// int connection_timeout ( void)\nスクリプトがタイムアウトした場合にTRUEを返す
constant /// mixed constant ( string name)\n定数の値を返す
define /// bool define ( string name, mixed value, bool [case_insensitive])\n名前を指定して定数を定義する
defined /// bool defined ( string name)\n 指定した名前の定数が存在するかどうかを調べる 
die /// この関数は\nexit()のエイリアス
eval /// mixed eval ( string code_str)\n文字列をPHPコードとして評価する
exit /// void exit ( [string status])\nメッセージを出力し、カレントのスクリプトを終了する
get_browser /// object get_browser ( string [user_agent])\n ユーザのブラウザの機能を取得する 
highlight_file /// bool highlight_file ( string filename)\nファイルの構文ハイライト表示
highlight_string /// bool highlight_string ( string str)\n文字列の構文ハイライト化
ignore_user_abort /// int ignore_user_abort ( int [setting])\n クライアント接続が断となった時にスクリプトの実行を中断するかどう かを設定する 
leak /// void leak ( int bytes)\nメモリーをリークする
pack /// string pack ( string format [, mixed args])\nデータをバイナリ文字列にパックする
show_source /// bool show_source ( string filename)\nファイルの構文ハイライト表示
sleep /// void sleep ( int seconds)\n実行を遅延させる
uniqid /// string uniqid ( string prefix, bool [lcg])\nユニークなIDを生成する
unpack /// array unpack ( string format, string data)\nバイナリ文字列からデータを切出します
usleep /// void usleep ( int micro_seconds)\nマイクロ秒単位で実行を遅延する
udm_add_search_limit /// int udm_add_search_limit ( int agent, int var, string val)\n種々の検索の制約を設定する
udm_alloc_agent /// int udm_alloc_agent ( string dbaddr [, string dbmode])\nmnoGoSearch セッションを確保する
udm_api_version /// int udm_api_version ( void)\nmnoGoSearch APIバージョンを取得する
udm_cat_list /// array udm_cat_list ( int agent, string category)\n カレントのカテゴリと同じレベルのカテゴリを全て取得する 
udm_cat_path /// array udm_cat_path ( int agent, string category)\nカレントのカテゴリへのパスを取得する
udm_check_charset /// int udm_check_charset ( int agent, string charset)\n 指定したcharsetをmnogosearchで認識されるかどうか調べる 
udm_check_stored /// int udm_check_stored ( int agent, int link, string doc_id)\n 保存された接続を調べる 
udm_clear_search_limits /// int udm_clear_search_limits ( int agent)\n mnoGoSearch 検索に関する全ての制約をクリアする 
udm_close_stored /// int udm_close_stored ( int agent, int link)\n 保存した接続を閉じる 
udm_crc32 /// int udm_crc32 ( int agent, string str)\n 指定した文字列のCRC32チェックサムを計算する 
udm_errno /// int udm_errno ( int agent)\nmnoGoSearch エラー番号を取得する
udm_error /// string udm_error ( int agent)\nmnoGoSearch エラーメッセージを得る
udm_find /// int udm_find ( int agent, string query)\n検索を実行する
udm_free_agent /// int udm_free_agent ( int agent)\nmnoGoSearch セッションを開放する
udm_free_ispell_data /// int udm_free_ispell_data ( int agent)\nispellデータ用に確保されたメモリを解放する
udm_free_res /// int udm_free_res ( int res)\nmnoGoSearch 結果を開放する
udm_get_doc_count /// int udm_get_doc_count ( int agent)\nGet total number of documents in database.
udm_get_res_field /// string udm_get_res_field ( int res, int row, int field)\nmnoGoSearch 結果フィールドを取得する
udm_get_res_param /// string udm_get_res_param ( int res, int param)\nmnoGoSearch 結果パラメータを取得する
udm_load_ispell_data /// int udm_load_ispell_data ( int agent, int var, string val1, string val2, int flag)\nispellデータを読み込む
udm_open_stored /// int udm_open_stored ( int agent, string storedaddr)\n 保存した接続をオープンする 
udm_set_agent_param /// int udm_set_agent_param ( int agent, int var, string val)\n mnoGoSearch エージェントのセッションパラメータを設定する 
msql_affected_rows /// int msql_affected_rows ( int query_identifier)\n変更された行の数を返す
msql_close /// int msql_close ( int link_identifier)\nmSQL 接続を閉じる
msql_connect /// int msql_connect ( [string hostname [, string server [, string username [, string password]]]])\nmSQL 接続を開く
msql_create_db /// int msql_create_db ( string database name, int [link_identifier])\nmSQL データベースを作成する
msql_createdb /// int msql_createdb ( string database name, int [link_identifier])\nmSQL データベースを作成する
msql_data_seek /// int msql_data_seek ( int query_identifier, int row_number)\n行に関する内部ポインタを移動する
msql_dbname /// string msql_dbname ( int query_identifier, int i)\nカレントの mSQL データベース名を得る
msql_drop_db /// int msql_drop_db ( string database_name, int link_identifier)\nmSQL データベースを破棄(削除)する
msql_dropdb /// \nmSQL データベースを破棄(削除)する
msql_error /// string msql_error ( int [link_identifier])\n 最後の msql コールに関してエラーメッセージを返す 
msql_fetch_array /// int msql_fetch_array ( int query_identifier, int [result_type])\n結果の行を配列として取得する
msql_fetch_field /// object msql_fetch_field ( int query_identifier, int field_offset)\nフィールド情報を得る
msql_fetch_object /// int msql_fetch_object ( int query_identifier, int [result_type])\n結果の行をオブジェクトとして取得する
msql_fetch_row /// array msql_fetch_row ( int query_identifier)\n結果の行を数値配列として取得する
msql_field_seek /// int msql_field_seek ( int query_identifier, int field_offset)\nフィールドオフセットを設定する
msql_fieldflags /// string msql_fieldflags ( int query_identifier, int i)\nフィールドフラグを得る
msql_fieldlen /// int msql_fieldlen ( int query_identifier, int i)\nフィールド長を得る
msql_fieldname /// string msql_fieldname ( int query_identifier, int field)\nフィールド名を得ます
msql_fieldtable /// int msql_fieldtable ( int query_identifier, int field)\nフィールドのテーブル名を得る
msql_fieldtype /// string msql_fieldtype ( int query_identifier, int i)\nフィールドの型を得ます
msql_free_result /// int msql_free_result ( int query_identifier)\n結果保持用メモリを開放する
msql_freeresult /// \n結果保持用メモリを開放する
msql_list_dbs /// int msql_list_dbs ( void)\nサーバー上の mSQL データベースのリストを返す
msql_list_fields /// int msql_list_fields ( string database, string tablename)\n結果フィールドのリストを得る
msql_list_tables /// int msql_list_tables ( string database)\nmSQL データベースにおけるテーブルのリストを得ます
msql_listdbs /// \nサーバーにおける mSQL データベースのリストを得ます
msql_listfields /// \n結果フィールドのリストを得る
msql_listtables /// \nmSQL データベースにおけるテーブルのリストを得ます
msql_num_fields /// int msql_num_fields ( int query_identifier)\n結果におけるフィールドの数を得ます
msql_num_rows /// int msql_num_rows ( int query_identifier)\n結果の行の数を得ます
msql_numfields /// int msql_numfields ( int query_identifier)\n結果におけるフィールドの数を得ます
msql_numrows /// int msql_numrows ( void)\n結果における行の数を返します
msql_pconnect /// int msql_pconnect ( [string server [, string username [, string password]]])\n持続的な mSQL 接続を開きます
msql_query /// int msql_query ( string query, int link_identifier)\nmSQL クエリーを送信します
msql_regcase /// \n 大文字小文字を区別しないマッチング用に正規表現を作成します 
msql_result /// int msql_result ( int query_identifier, int i, mixed field)\n結果のデータを得る
msql_select_db /// int msql_select_db ( string database_name, int link_identifier)\nmSQL データベースを選択します
msql_selectdb /// \nmSQL データベースを選択します
msql_tablename /// string msql_tablename ( int query_identifier, int field)\nフィールドのテーブル名を得ます
msql /// int msql ( string database, string query, int link_identifier)\nmSQL クエリーを送信する
mysql_affected_rows /// int mysql_affected_rows ( int [link_identifier])\n一番最近のクエリーで変更された行の数を得る
mysql_change_user /// int mysql_change_user ( string user, string password, string [database], resource [link_identifier])\n アクティブな接続でログイン中のユーザーを変更する 
mysql_client_encoding /// int mysql_client_encoding ( [resource link_identifier])\nReturns the name of the character set
mysql_close /// bool mysql_close ( resource [link_identifier])\nMySQL接続を閉じる
mysql_connect /// int mysql_connect ( [string server [, string username [, string password]]])\nMySQLサーバーへの接続をオープンする
mysql_create_db /// bool mysql_create_db ( string database_name, resource [link_identifier])\nMySQLデータベースを作成する
mysql_data_seek /// bool mysql_data_seek ( resource result_identifier, int row_number)\n内部的な結果ポインタを移動する
mysql_db_name /// string mysql_db_name ( resource result, int row, mixed [field])\nデータベース名を得る
mysql_db_query /// resource mysql_db_query ( string database, string query, resource [link_identifier])\nMySQLクエリーを送信する
mysql_drop_db /// bool mysql_drop_db ( string database_name, resource [link_identifier])\nMySQLデータベースを破棄(削除)する
mysql_errno /// int mysql_errno ( resource [link_identifier])\n 直近のMySQL処理からエラーメッセージのエラー番号を返す 
mysql_error /// string mysql_error ( resource [link_identifier])\n 直近に実行されたMySQLコールのエラーメッセージを返す 
mysql_escape_string /// string mysql_escape_string ( string unescaped_string)\n mysql_queryで使用するために文字列をエスケープする 
mysql_fetch_array /// array mysql_fetch_array ( resource result, int [result_type])\n 連想配列、添字配列、またはその両方として結果の行を取得する 
mysql_fetch_assoc /// array mysql_fetch_assoc ( resource result)\n 連想配列として結果の行を取得する 
mysql_fetch_field /// object mysql_fetch_field ( resource result, int [field_offset])\n 結果からカラム情報を取得し、オブジェクトとして返す 
mysql_fetch_lengths /// array mysql_fetch_lengths ( resource result)\n 結果における各出力の長さを得る 
mysql_fetch_object /// object mysql_fetch_object ( resource result, int [result_typ])\n結果の行をオブジェクトとして取得する
mysql_fetch_row /// array mysql_fetch_row ( resource result)\n結果を添字配列として取得する
mysql_field_flags /// string mysql_field_flags ( resource result, int field_offset)\n 結果において指定したフィールドのフラグを得る 
mysql_field_len /// int mysql_field_len ( int result, int field_offset)\n 指定したフィールドの長さを得る 
mysql_field_name /// string mysql_field_name ( resource result, int field_index)\n結果において指定したフィールド名を得る
mysql_field_seek /// int mysql_field_seek ( int result, int field_offset)\n 結果ポインタを指定したフィールドオフセットにセットする 
mysql_field_table /// string mysql_field_table ( int result, int field_offset)\n 指定したフィールドが含まれるテーブルの名前を得る 
mysql_field_type /// string mysql_field_type ( string result, int field_offset)\n 結果において指定したフィールドの型を得る 
mysql_free_result /// int mysql_free_result ( int result)\n結果保持用メモリを開放する
mysql_get_client_info /// string mysql_get_client_info ( void )\nMySQLクライアント情報を得る
mysql_get_host_info /// string mysql_get_host_info ( [resource link_identifier])\nMySQLホスト情報を得る
mysql_get_proto_info /// int mysql_get_proto_info ( [resource link_identifier])\nMySQLプロトコル情報を得る
mysql_get_server_info /// int mysql_get_server_info ( [resource link_identifier])\nMySQLサーバ情報を得る
mysql_info /// string mysql_info ( [resource link_identifier])\n Get information about the most recent query 
mysql_insert_id /// int mysql_insert_id ( int [link_identifier])\n直近のINSERTで生成されたIDを得る
mysql_list_dbs /// int mysql_list_dbs ( int [link_identifier])\n MySQLサーバー上で利用可能なデータベースのリストを得る 
mysql_list_fields /// int mysql_list_fields ( string database_name, string table_name, int [link_identifier])\nMySQL結果フィールドのリストを得る
mysql_list_processes /// resource mysql_list_processes ( [resource link_identifier])\nList MySQL processes
mysql_list_tables /// int mysql_list_tables ( string database, int [link_identifier])\nMySQL データベース上のテーブルのリストを得る
mysql_num_fields /// int mysql_num_fields ( int result)\n結果におけるフィールドの数を得る
mysql_num_rows /// int mysql_num_rows ( int result)\n結果における行の数を得る
mysql_pconnect /// int mysql_pconnect ( string [hostname [:port] [:/path/to/socket]] , string [username], string [password])\n MySQLサーバーへの持続的な接続をオープンする 
mysql_ping /// bool mysql_ping ( [resource link_identifier])\nPing a server connection or reconnect if there is no connection
mysql_query /// int mysql_query ( string query, int [link_identifier])\nSQLクエリーをMySQLに送信する
mysql_real_escape_string /// string mysql_real_escape_string ( string unescaped_string [, resource link_identifier])\n Escapes special characters in a string for use in a SQL statement, taking into account the current charset of the connection. 
mysql_result /// mixed mysql_result ( int result, int row, mixed [field])\n結果データを得る
mysql_select_db /// int mysql_select_db ( string database_name, int [link_identifier])\nMySQL データベースを選択する
mysql_stat /// string mysql_stat ( [resource link_identifier])\nGet current system status
mysql_tablename /// string mysql_tablename ( int result, int i)\nフィールドのテーブル名を得る
mysql_thread_id /// int mysql_thread_id ( [resource link_identifier])\nReturn the current thread ID
mysql_unbuffered_query /// resource mysql_unbuffered_query ( string query [, resource link_identifier [, int result_mode]])\n Send an SQL query to MySQL, without fetching and buffering the result rows 
msession_connect /// bool msession_connect ( string host, string port)\nmsessionサーバに接続する
msession_count /// int msession_count ( void)\nセッション数を得る
msession_create /// bool msession_create ( string session)\nセッションを作成する
msession_destroy /// bool msession_destroy ( string name)\nセッションを破棄する
msession_disconnect /// void msession_disconnect ( void)\nmsessionサーバへの接続を閉じる
msession_find /// array msession_find ( string name, string value)\n値を検索する
msession_get_array /// array msession_get_array ( string session)\n配列値を得る
msession_get /// string msession_get ( string session, string name, string value)\nセッションから値を取得する
msession_getdata /// string msession_getdata ( string session)\nデータを取得する ... ? 
msession_inc /// string msession_inc ( string session, string name)\nセッションの値を増加させる
msession_list /// array msession_list ( void)\nリスト ... ? 
msession_listvar /// array msession_listvar ( string name)\n変数を有するセッションの一覧を取得する
msession_lock /// int msession_lock ( string name)\nセッションをロックする
msession_plugin /// string msession_plugin ( string session, string val [, string param])\n msession personalityプラグイン内のエスケープ関数をコールする 
msession_randstr /// string msession_randstr ( int param)\nランダムな文字列を取得する
msession_set_array /// bool msession_set_array ( string session, array tuples)\n配列の値を設定する
msession_set /// bool msession_set ( string session, string name, string value)\nセッションに値を設定する
msession_setdata /// bool msession_setdata ( string session, string value)\nデータを設定する ... ?
msession_timeout /// int msession_timeout ( string session [, int param])\nセッションの有効期間を設定/取得する
msession_uniq /// string msession_uniq ( int param)\nユニークなIDを取得する
msession_unlock /// int msession_unlock ( string session, int key)\nセッションのロックを解除する
muscat_close /// int muscat_close ( resource muscat_handle)\n muscatセッションをシャットダウンし、全てのメモリをPHPに解放する 
muscat_get /// string muscat_get ( resource muscat_handle)\nコアmuscat APIから1行分のデータを取得する
muscat_give /// int muscat_give ( resource muscat_handle, string string)\nコアmuscat APIに文字列を送信する
muscat_setup_net /// resource muscat_setup_net ( string muscat_host, int port)\n新規muscatセッションを作成しハンドルを返す
muscat_setup /// resource muscat_setup ( int size [, string muscat_dir])\nmuscatセッションを新規に作成し、ハンドルを返す
checkdnsrr /// int checkdnsrr ( string host, string [type])\n 指定したインターネットホスト名もしくはIPアドレスに対応するDNSレコー ドを検索する 
closelog /// int closelog ( void)\nシステムログへの接続を閉じる
debugger_off /// int debugger_off ( void)\nPHPの内部デバッガを無効にする
debugger_on /// int debugger_on ( string address)\nPHPの内部デバッガを有効にする
define_syslog_variables /// void define_syslog_varaibles ( void)\nsyslogに関係する全ての定数を初期化する
fsockopen /// int fsockopen ( string hostname, int port [, int errno [, string errstr [, float timeout]]])\n インターネットもしくはUNIXドメインのソケット接続をオープンする 
gethostbyaddr /// string gethostbyaddr ( string ip_address)\n 指定したIPアドレスに対応するインターネットホスト名を取得する 
gethostbyname /// string gethostbyname ( string hostname)\n インターネットホスト名に対応するIPアドレスを取得する 
gethostbynamel /// array gethostbynamel ( string hostname)\n 指定したインターネットホスト名に対応するIPアドレスのリストを取得 する。 
getmxrr /// int getmxrr ( string hostname, array mxhosts, array [weight])\n 指定したインターネットホスト名に対応するMXレコードを取得する 
getprotobyname /// int getprotobyname ( string name)\n プロトコル名のプロトコル番号を得る 
getprotobynumber /// string getprotobynumber ( int number)\nプロトコル番号が指すプロトコル名を得る
getservbyname /// int getservbyname ( string service, string protocol)\n インターネットサービスおよびプロトコルが関連するポート番号を得る 
getservbyport /// string getservbyport ( int port, string protocol)\n ポートおよびプロトコルに対応するインターネットサービスを得る 
ip2long /// int ip2long ( string ip_address)\n (IPv4) インターネットプロトコルドット表記のアドレスを適当なアドレ スを有する文字列に変換する 
long2ip /// string long2ip ( int proper_address)\n (IPv4) インターネットアドレスをインターネット標準ドット表記に変換 します。 
openlog /// int openlog ( string ident, int option, int facility)\nシステムログへの接続をオープンする
pfsockopen /// int pfsockopen ( string hostname, int port [, int errno [, string errstr [, int timeout]]])\n 持続的なInternetまたはUnixドメインソケット接続をオープンする 
socket_get_status /// array socket_get_status ( resource socket_get_status)\n 既存のソケットリソースに関する情報を返す 
socket_set_blocking /// int socket_set_blocking ( int socket descriptor, int mode)\nソケットにおけるブロック非ブロックモードの設定
socket_set_timeout /// bool socket_set_timeout ( int socket descriptor, int seconds, int microseconds)\nソケットのタイムアウト時間を設定する
syslog /// int syslog ( int priority, string message)\nシステムログのメッセージを生成する
ncurses_addch /// int ncurses_addch ( int ch)\n カレント位置に文字を追加し、カーソルを進める 
ncurses_addchnstr /// int ncurses_addchnstr ( string s, int n)\n カレント位置に指定した長さの属性付きの文字列を追加する 
ncurses_addchstr /// int ncurses_addchstr ( string s)\n カレントの位置に属性付きの文字列を追加する 
ncurses_addnstr /// int ncurses_addnstr ( string s, int n)\n カレントの位置に指定した長さの文字列を追加する 
ncurses_addstr /// int ncurses_addstr ( string text)\nカレント位置にテキストを出力する
ncurses_assume_default_colors /// int ncurses_assume_default_colors ( int fg, int bg)\nカラー0のデフォルト色を定義する
ncurses_attroff /// int ncurses_attroff ( int attributes)\n指定した属性を無効とする
ncurses_attron /// int ncurses_attron ( int attributes)\n指定した属性を有効にする
ncurses_attrset /// int ncurses_attrset ( int attributes)\n指定した属性を設定する
ncurses_baudrate /// int ncurses_baudrate ( void)\n端末のボーレートを返す
ncurses_beep /// int ncurses_beep ( void)\n端末のビープを鳴らす
ncurses_bkgd /// int ncurses_bkgd ( int attrchar)\n端末画面の背景属性を設定する
ncurses_bkgdset /// void ncurses_bkgdset ( int attrchar)\n画面背景を制御する
ncurses_border /// int ncurses_border ( int left, int right, int top, int bottom, int tl_corner, int tr_corner, int bl_corner, int br_corner)\n属性付きの文字で画面周囲に境界を描画する
ncurses_can_change_color /// bool ncurses_can_change_color ( void)\n端末の色を変更可能かどうか確認する
ncurses_cbreak /// bool ncurses_cbreak ( void)\n入力のバッファリングを変更する
ncurses_clear /// bool ncurses_clear ( void)\nスクリーンをクリアする
ncurses_clrtobot /// bool ncurses_clrtobot ( void)\nカレント位置から最下部までスクリーンをクリアする
ncurses_clrtoeol /// bool ncurses_clrtoeol ( void)\nカレント位置から行末までスクリーンをクリアする
ncurses_color_set /// int ncurses_color_set ( int pair)\n前景/背景色を設定する
ncurses_curs_set /// int ncurses_curs_set ( int visibility)\nカーソル状態を設定する
ncurses_def_prog_mode /// bool ncurses_def_prog_mode ( void)\n端末(プログラム)モードを保存する
ncurses_def_shell_mode /// bool ncurses_def_shell_mode ( void)\n端末(シェル)モードを保存する
ncurses_define_key /// int ncurses_define_key ( string definition, int keycode)\nキーコードを定義する
ncurses_delay_output /// int ncurses_delay_output ( int milliseconds)\nパディング文字を用いて端末出力を遅延させる
ncurses_delch /// bool ncurses_delch ( void)\n カレント位置の文字を削除し、残った部分を左に移動する 
ncurses_deleteln /// bool ncurses_deleteln ( void)\n カレント位置の行を削除し、残りの部分を上に上げる
ncurses_delwin /// int ncurses_delwin ( resource window)\nncursesウインドウを削除する
ncurses_doupdate /// bool ncurses_doupdate ( void)\n 準備中の全ての出力を書き込み、端末をリフレッシュする 
ncurses_echo /// bool ncurses_echo ( void)\nキーボード入力のエコーを有効とする
ncurses_echochar /// int ncurses_echochar ( int character)\nリファレッシュを行いつつ1文字出力する
ncurses_end /// int ncurses_end ( void)\nncursesを終了し、画面を消去する
ncurses_erase /// bool ncurses_erase ( void)\n端末画面を消去する
ncurses_erasechar /// string ncurses_erasechar ( void)\n消去されたカレントの文字を返す
ncurses_filter /// int ncurses_filter ( void)\n
ncurses_flash /// bool ncurses_flash ( void)\n端末画面をフラッシュする(ビジュアルベル) 
ncurses_flushinp /// bool ncurses_flushinp ( void)\nキーボード入力バッファをフラッシュする
ncurses_getch /// int ncurses_getch ( void)\nキーボードから1文字読み込む
ncurses_getmouse /// bool ncurses_getmouse ( array mevent)\nマウスイベントを読みこむ
ncurses_halfdelay /// int ncurses_halfdelay ( int tenth)\n端末をハーフディレイモードにする
ncurses_has_colors /// bool ncurses_has_colors ( void)\nカラー端末かどうか確認する
ncurses_has_ic /// bool ncurses_has_ic ( void)\n挿入/削除機能の有無を確認する
ncurses_has_il /// bool ncurses_has_il ( void)\n行挿入/削除機能の有無を確認する
ncurses_has_key /// int ncurses_has_key ( int keycode)\n 端末キーボードにおいてファンクションキーの有無を調べる 
ncurses_hline /// int ncurses_hline ( int charattr, int n)\n カレント位置に属性付きの文字を用いて最大n文字長の線を水平に描画する 
ncurses_inch /// string ncurses_inch ( void)\nカレント位置の文字と属性を取得する
ncurses_init_color /// int ncurses_init_color ( int color, int r, int g, int b)\n新規にRGB値を設定する
ncurses_init_pair /// int ncurses_init_pair ( int pair, int fg, int bg)\n色の組を確保する
ncurses_init /// int ncurses_init ( void)\nncursesを初期化する
ncurses_insch /// int ncurses_insch ( int character)\n 文字を挿入し、カレント位置にある文字を含む残りの行を移動する 
ncurses_insdelln /// int ncurses_insdelln ( int count)\n カレント行の後に複数の行を挿入し、スクロールダウンする(負の数を指 定すると削除し、スクロールアップする) 
ncurses_insertln /// bool ncurses_insertln ( void)\n行を挿入し、残りの部分をスクロールダウンする
ncurses_insstr /// int ncurses_insstr ( string text)\n カレント位置に文字列を挿入し、残りの行を右に移動する 
ncurses_instr /// int ncurses_instr ( string buffer)\n端末画面から文字列を読み込む
ncurses_isendwin /// bool ncurses_isendwin ( void)\n Ncursesがendwinモードの場合、通常の画面出力が実行可能 
ncurses_keyok /// int ncurses_keyok ( int keycode, bool enable)\nキーコードを有効または無効にする
ncurses_killchar /// bool ncurses_killchar ( void)\nカレントの行削除文字を返す
ncurses_longname /// string ncurses_longname ( void)\n端末の説明を返す
ncurses_mouseinterval /// int ncurses_mouseinterval ( int milliseconds)\nマウスボタンクリックのタイムアウトを設定する
ncurses_mousemask /// int ncurses_mousemask ( int newmask, int oldmask)\nマウスオプションを設定する
ncurses_move /// int ncurses_move ( int y, int x)\n出力位置を移動する
ncurses_mvaddch /// int ncurses_mvaddch ( int y, int x, int c)\nカレント位置を移動し、文字を追加する
ncurses_mvaddchnstr /// int ncurses_mvaddchnstr ( int y, int x, string s, int n)\n 位置を移動し、指定長の属性付きの文字列を追加する 
ncurses_mvaddchstr /// int ncurses_mvaddchstr ( int y, int x, string s)\n 位置を移動し、属性付きの文字列を追加する 
ncurses_mvaddnstr /// int ncurses_mvaddnstr ( int y, int x, string s, int n)\n位置を移動し、指定長の文字列を追加する
ncurses_mvaddstr /// int ncurses_mvaddstr ( int y, int x, string s)\n位置を移動し、文字列を追加する
ncurses_mvcur /// int ncurses_mvcur ( int old_y, int old_x, int new_y, int new_x)\n直ちにカーソルを移動する
ncurses_mvdelch /// int ncurses_mvdelch ( int y, int x)\n位置を移動し、文字を削除、行の残りを左シフトする
ncurses_mvgetch /// int ncurses_mvgetch ( int y, int x)\n位置を移動し、新しい位置で文字を得る
ncurses_mvhline /// int ncurses_mvhline ( int y, int x, int attrchar, int n)\n 位置を新しく設定し、属性付きの文字を用いて最大n文字の水平線を描画 
ncurses_mvinch /// int ncurses_mvinch ( int y, int x)\n 位置を移動し、新しい位置の属性付きの文字を取得する 
ncurses_mvvline /// int ncurses_mvvline ( int y, int x, int attrchar, int n)\n 位置を新しく設定し、属性付きの文字を用いて最大n文字の垂直線を描画 する 
ncurses_mvwaddstr /// int ncurses_mvwaddstr ( resource window, int y, int x, string text)\nウインドウの新規位置に文字列を追加する
ncurses_napms /// int ncurses_napms ( int milliseconds)\nスリープ
ncurses_newwin /// int ncurses_newwin ( int rows, int cols, int y, int x)\n新規ウインドウを作成する
ncurses_nl /// bool ncurses_nl ( void)\n改行を復改/ラインフィードに変換
ncurses_nocbreak /// bool ncurses_nocbreak ( void)\n端末をcookedモードに変更する
ncurses_noecho /// bool ncurses_noecho ( void)\nキーボード入力エコーを無効にする
ncurses_nonl /// bool ncurses_nonl ( void)\n改行を復改/ラインフィードに変換しない
ncurses_noqiflush /// int ncurses_noqiflush ( void)\nシグナル文字のフラッシュを無効とする
ncurses_noraw /// bool ncurses_noraw ( void)\n端末をrawモード以外に変更する
ncurses_putp /// int ncurses_putp ( string text)\n
ncurses_qiflush /// int ncurses_qiflush ( void)\nシグナル文字のフラッシュを有効とする
ncurses_raw /// bool ncurses_raw ( void)\n端末をrawモードに変更する
ncurses_refresh /// int ncurses_refresh ( int ch)\n画面をリフレッシュする
ncurses_resetty /// bool ncurses_resetty ( void)\n保存した端末モードに復帰する
ncurses_savetty /// bool ncurses_savetty ( void)\n端末の状態を保存する
ncurses_scr_dump /// int ncurses_scr_dump ( string filename)\n画面の内容をファイルにダンプする
ncurses_scr_init /// int ncurses_scr_init ( string filename)\nファイルダンプから画面を初期化する
ncurses_scr_restore /// int ncurses_scr_restore ( string filename)\nファイルダンプから画面を復帰する
ncurses_scr_set /// int ncurses_scr_set ( string filename)\nファイルダンプから画面を継承する
ncurses_scrl /// int ncurses_scrl ( int count)\n カレント位置を変更せずに画面の内容をスクロールアップまたはダウン する 
ncurses_slk_attr /// bool ncurses_slk_attr ( void)\nカレントのソフトラベルキー属性を返す
ncurses_slk_attroff /// int ncurses_slk_attroff ( int intarg)\n
ncurses_slk_attron /// int ncurses_slk_attron ( int intarg)\n
ncurses_slk_attrset /// int ncurses_slk_attrset ( int intarg)\n
ncurses_slk_clear /// bool ncurses_slk_clear ( void)\n画面からソフトラベルをクリアする
ncurses_slk_color /// int ncurses_slk_color ( int intarg)\nソフトラベルキーの色を設定する
ncurses_slk_init /// bool ncurses_slk_init ( int format)\nソフトラベルキー関数を初期化する
ncurses_slk_noutrefresh /// bool ncurses_slk_noutrefresh ( void)\n仮想画面にソフトラベルキーをコピーする
ncurses_slk_refresh /// bool ncurses_slk_refresh ( void)\nソフトラベルキーを画面にコピーする
ncurses_slk_restore /// bool ncurses_slk_restore ( void)\nソフトラベルキーを復帰する
ncurses_slk_touch /// bool ncurses_slk_touch ( void)\n ncurses_slk_noutrefreshを実行する際に強制的に出力する 
ncurses_standend /// int ncurses_standend ( void)\n'standout'属性の使用を停止する
ncurses_standout /// int ncurses_standout ( void)\n'standout'属性の使用を開始する
ncurses_start_color /// int ncurses_start_color ( void)\n色の使用を開始する
ncurses_termattrs /// bool ncurses_termattrs ( void)\n 端末でサポートされる全ての属性フラグの論理和を返す 
ncurses_termname /// string ncurses_termname ( void)\n端末の(簡略)-名を返す
ncurses_timeout /// void ncurses_timeout ( int millisec)\n特別なキーシーケンスのタイムアウトを設定する
ncurses_typeahead /// int ncurses_typeahead ( int fd)\n typeahead確認用に別のファイル記述子を指定する 
ncurses_ungetch /// int ncurses_ungetch ( int keycode)\n入力ストリームに1文字戻す
ncurses_ungetmouse /// bool ncurses_ungetmouse ( array mevent)\nマウスイベントをキーにプッシュする
ncurses_use_default_colors /// bool ncurses_use_default_colors ( void)\n 端末のデフォルト色をカラーID -1に割り付ける 
ncurses_use_env /// void ncurses_use_env ( bool flag)\n端末の大きさに関する環境情報の使用を制御する
ncurses_use_extended_names /// int ncurses_use_extended_names ( bool flag)\n terminfo記述において拡張名の使用を制御する 
ncurses_vidattr /// int ncurses_vidattr ( int intarg)\n
ncurses_vline /// int ncurses_vline ( int charattr, int n)\n カレント位置に最大n文字の属性付きの文字を用いて垂直線を描画する 
ncurses_wrefresh /// int ncurses_wrefresh ( resource window)\n端末画面のウインドウをリフレッシュする
notes_body /// array notes_body ( string server, string mailbox, int msg_number)\n 指定したサーバにある指定したメールボックスのメッセージmeg_number をオープンする 
notes_copy_db /// string notes_copy_db ( string from_database_name, string to_database_name)\nフォームform_nameを用いてノートを作成する
notes_create_db /// bool notes_create_db ( string database_name)\nロータスノーツデータベースを作成する
notes_create_note /// string notes_create_note ( string database_name, string form_name)\nフォームform_nameを用いてノートを作成する
notes_drop_db /// bool notes_drop_db ( string database_name)\nロータスノーツデータベースを破棄する
notes_find_note /// bool notes_find_note ( string database_name, string name [, string type])\n database_nameにあるノートIDを返す。ノートの名前を指定する。typeは 省略可 
notes_header_info /// object notes_header_info ( string server, string mailbox, int msg_number)\n 指定したサーバ上の指定したメールボックスにあるメッセージ msg_numberをオープンする 
notes_list_msgs /// bool notes_list_msgs ( string db)\n選択したdatabase_nameからノートを返す
notes_mark_read /// string notes_mark_read ( string database_name, string user_name, string note_id)\nユーザuser_name用にnote_idに既読マークを付ける
notes_mark_unread /// string notes_mark_unread ( string database_name, string user_name, string note_id)\nユーザuser_name用にnote_idに未読マークを付ける
notes_nav_create /// bool notes_nav_create ( string database_name, string name)\ndatabase_nameにナビゲータ名を作成する
notes_search /// string notes_search ( string database_name, string keywords)\ndatabase_nameのキーワードにマッチするノーツを見つける
notes_unread /// string notes_unread ( string database_name, string user_name)\nカレントユーザuser_nameに関して未読のノートIDを返す
notes_version /// string notes_version ( string database_name)\nロータスノーツのバージョンを取得する
odbc_autocommit /// int odbc_autocommit ( int connection_id, int [OnOff])\nautocommitの動作をオンまたはオフにします
odbc_binmode /// int odbc_binmode ( int result_id, int mode)\nバイナリカラムデータを処理する
odbc_close_all /// void odbc_close_all ( void)\n全てのODBC接続を閉じます
odbc_close /// void odbc_close ( int connection_identifier)\nODBC 接続を閉じます
odbc_columnprivileges /// int odbc_columnprivileges ( int connection_id, string [qualifier], string [owner], string [table_name], string [column_name])\n カラムおよび付随する権限のリストを取得する際に使用する結果IDを返 す 
odbc_columns /// int odbc_columns ( int connection_id, string [qualifier], string [owner], string [table_name], string [column_name])\n 指定したテーブルにあるカラム名のリストを取得し、その情報を有する 結果IDを返す 
odbc_commit /// int odbc_commit ( int connection_id)\nODBCトランザクションをコミットします
odbc_connect /// int odbc_connect ( string dsn, string user, string password, int [cursor_type])\nデータソースに接続します
odbc_cursor /// string odbc_cursor ( int result_id)\nカーソル名を得ます
odbc_data_source /// resource odbc_data_source ( resource connection_id, constant fetch_type)\nReturns information about a current connection
odbc_do /// int odbc_do ( int conn_id, string query)\nodbc_exec()の同義語
odbc_error /// string odbc_error ( [int connection_id])\n直近のエラーコードを得る
odbc_errormsg /// string odbc_errormsg ( [int connection_id])\n直近のエラーメッセージを得る
odbc_exec /// int odbc_exec ( int connection_id, string query_string)\nSQL文を準備し、実行します
odbc_execute /// int odbc_execute ( int result_id, array [parameters_array])\n準備された文を実行します
odbc_fetch_array /// array odbc_fetch_array ( int result [, int rownumber])\n連想配列として結果の行を取得する
odbc_fetch_into /// bool odbc_fetch_into ( resource result_id [, int rownumber, array result_array])\n1行文の結果を配列に取り込みます
odbc_fetch_object /// object odbc_fetch_object ( int result [, int rownumber])\nオブジェクトとして結果の行を取得する
odbc_fetch_row /// bool odbc_fetch_row ( resource result_id [, int row_number])\n行を取り込みます
odbc_field_len /// string odbc_field_len ( int result_id, int field_number)\nフィールドの長さを得る
odbc_field_name /// string odbc_field_name ( int result_id, int field_number)\nカラム名を得ます
odbc_field_num /// int odbc_field_num ( int result_id, string field_name)\nカラム番号を返します
odbc_field_precision /// string odbc_field_precision ( int result_id, int field_number)\nodbc_field_len()の同義語
odbc_field_scale /// string odbc_field_scale ( int result_id, int field_number)\nフィールドの精度を得る
odbc_field_type /// int odbc_field_type ( int result_id, int field_number)\nフィールドのデータ型を返します
odbc_foreignkeys /// int odbc_foreignkeys ( int connection_id, string pk_qualifier, string pk_owner, string pk_table, string fk_qualifier, string fk_owner, string fk_table)\n 指定したテーブルの外部キーのリストまたは指定したテーブルの主キー を参照する他のテーブル外部キーのリストを返す 
odbc_free_result /// int odbc_free_result ( int result_id)\n結果を保持するリソースを開放します
odbc_gettypeinfo /// int odbc_gettypeinfo ( int connection_id, int [data_type])\n データソースによりサポートされるデータ型に関する情報を有する結果 IDを返す 
odbc_longreadlen /// int odbc_longreadlen ( int result_id, int length)\nLONGカラムを処理します
odbc_next_result /// bool odbc_next_result ( int result_id)\n複数の結果が利用可能などうか確認する
odbc_num_fields /// int odbc_num_fields ( int result_id)\n結果のカラム数を返します
odbc_num_rows /// int odbc_num_rows ( int result_id)\n結果における行数を返します
odbc_pconnect /// int odbc_pconnect ( string dsn, string user, string password, int [cursor_type])\n持続的なデータベース接続を開きます
odbc_prepare /// int odbc_prepare ( int connection_identifier, string query_string)\n実行用に文を準備します
odbc_primarykeys /// int odbc_primarykeys ( int connection_id, string qualifier, string owner, string table)\n テーブルの主キーを有するカラムの名前を取得する際に使用可能な結果 IDを返す 
odbc_procedurecolumns /// int odbc_procedurecolumns ( int connection_id, string [qualifier], string [owner], string [proc], string [column])\n プロシージャへのパラメータに関する情報を取得する 
odbc_procedures /// int odbc_procedures ( int connection_id, string [qualifier], string [owner], string [name])\n 指定したデータソースに保存されているプロシージャのリストを取得し、 その情報を有する結果IDを返す 
odbc_result_all /// int odbc_result_all ( int result_id, string [format])\nHTML テーブルとして結果を出力します
odbc_result /// string odbc_result ( int result_id, mixed field)\n結果データを得ます
odbc_rollback /// int odbc_rollback ( int connection_id)\nトランザクションをロールバックします
odbc_setoption /// int odbc_setoption ( int id, int function, int option, int param)\n ODBCの設定を茣Dます。エラーが発生した場合にFALSE、 その他の場合にTRUEを返します。 
odbc_specialcolumns /// int odbc_specialcolumns ( int connection_id, int type, string qualifier, string owner, string table, int scope, int nullable)\n テーブルのレコードを特定する最適なカラムの組合せまたはレコードの 値がトランザクションにより更新される際に自動的に更新されるカラム を返す 
odbc_statistics /// int odbc_statistics ( int connection_id, string qualifier, string owner, string table_name, int unique, int accuracy)\nテーブルに関する統計情報を取得する
odbc_tableprivileges /// int odbc_tableprivileges ( int connection_id, string [qualifier], string [owner], string [name])\n 各テーブルのリストおよび関連する権限のリストを取得する 
odbc_tables /// int odbc_tables ( int connection_id, string [qualifier], string [owner], string [name], string [types])\n 指定したデータソースに保存されたテーブルの名前のリストを取得し、 その情報を有する結果IDを返す 
aggregate_methods_by_list /// void aggregate_methods_by_list ( object object, string class_name, array methods_list [, boolean exclude])\n selective dynamic class methods aggregation to an object 
aggregate_methods_by_regexp /// void aggregate_methods_by_regexp ( object object, string class_name, string regexp [, boolean exclude])\n selective class methods aggregation to an object using a regular expression 
aggregate_methods /// void aggregate_methods ( object object, string class_name)\n dynamic class and object aggregation of methods 
aggregate_properties_by_list /// void aggregate_properties_by_list ( object object, string class_name, array properties_list [, boolean exclude])\n selective dynamic class properties aggregation to an object 
aggregate_properties_by_regexp /// void aggregate_properties_by_regexp ( object object, string class_name, string regexp [, boolean exclude])\n selective class properties aggregation to an object using a regular expression 
aggregate_properties /// void aggregate_properties ( object object, string class_name)\n dynamic aggregation of class properties to an object 
aggregate /// void aggregate ( object object, string class_name)\n dynamic class and object aggregation of methods and properties 
aggregation_info /// array aggregation_info ( object object)\n returns an associative array of the methods and properties from each class that has been aggregated to the object. 
deaggregate /// void object_aggregation ( object object [, string class_name])\n removes the aggregated methods and properties from an object 
OCIBindByName /// int OCIBindByName ( int stmt, string ph_name, mixed & variable, int length, int [type])\nOracle プレースホルダーに PHP 変数をバインドする
OCICancel /// int OCICancel ( int stmt)\nカーソルからの読み込みをキャンセルする
OCICollAppend /// string OCICollAppend ( object collection, object object)\nComing soon.
OCICollAssign /// string OCICollAssign ( object collection, object object)\nComing soon.
OCICollAssignElem /// string OCICollAssignElem ( object collection, string ndx, string val)\nComing soon.
OCICollGetElem /// string OCICollGetElem ( object collection, string ndx)\nComing soon.
OCICollMax /// string OCICollMax ( object collection)\nComing soon.
OCICollSize /// string OCICollSize ( object collection)\nComing soon.
OCICollTrim /// string OCICollTrim ( object collection, int num)\nComing soon.
OCIColumnIsNULL /// int OCIColumnIsNULL ( int stmt, mixed column)\n結果カラムが NULL であるかどうかを確認する
OCIColumnName /// string OCIColumnName ( int stmt, int col)\nカラムの名前を返す
OCIColumnPrecision /// int OCIColumnPrecision ( int stmt, int col)\nComing soon.
OCIColumnScale /// int OCIColumnScale ( int stmt, int col)\nComing soon.
OCIColumnSize /// int OCIColumnSize ( int stmt, mixed column)\n結果カラムサイズを返す
OCIColumnType /// mixed OCIColumnType ( int stmt, int col)\nカラムのデータ型を返す
OCIColumnTypeRaw /// mixed OCIColumnTypeRaw ( int stmt, int col)\nComing soon.
OCICommit /// int OCICommit ( int connection)\n未解決のトランザクションをコミットする
OCIDefineByName /// int OCIDefineByName ( int stmt, string Column-Name, mixed variable, int [type])\nSELECT 実行中、定義用の PHP 変数を使用する
OCIError /// array OCIError ( int [stmt|conn|global])\n stmt|conn|globalに関する直近のエラーを返す。 エラーが生じていない場合はFALSEを返す。 
OCIExecute /// int OCIExecute ( int statement, int [mode])\n文を実行する
OCIFetch /// int OCIFetch ( int statement)\n結果バッファーの次の行を取得する
OCIFetchInto /// int OCIFetchInto ( int stmt, array & result, int [mode])\n結果配列の次の行を取得する
OCIFetchStatement /// int OCIFetchStatement ( int stmt, array & variable)\n結果データの全ての行を配列に取得する
OCIFreeCollection /// string OCIFreeCollection ( object lob)\nComing soon.
OCIFreeCursor /// int OCIFreeCursor ( int stmt)\nカーソルに関連づけられた全リソースを開放する
OCIFreeDesc /// int OCIFreeDesc ( object lob)\nラージオブジェクト記述子を削除する
OCIFreeStatement /// int OCIFreeStatement ( int stmt)\nある文に関連する全リソースを開放する
OCIInternalDebug /// void OCIInternalDebug ( int onoff)\n 内部デバッグ用出力有効または無効にする。デフォルトでは無効 
OCILoadLob /// string OCILoadLob ( object lob)\nComing soon.
OCILogOff /// int OCILogOff ( int connection)\nOracleとの接続を切る
OCILogon /// int OCILogon ( string username, string password, string [db])\nOracle への接続を確立する
OCINewCollection /// string OCINewCollection ( int conn, string tdo [, string shema])\nComing soon.
OCINewCursor /// int OCINewCursor ( int conn)\n 新規カーソル(命令ハンドル)を返す - 参照カーソルをバインドするために使用する 
OCINewDescriptor /// string OCINewDescriptor ( int connection, int [type])\n 空の新規ディスクリプタLOB/FILE(LOBがデフォルト)を初期化する 
OCINLogon /// int OCINLogon ( string username, string password, string [db])\nOracle データベースに接続し、新規接続にログオン、 新規セッションを返す 
OCINumCols /// int OCINumCols ( int stmt)\nある文における結果のカラム数を返す
OCIParse /// int OCIParse ( int conn, string query)\nクエリーをパースし、ステートメントを返す
OCIPLogon /// int OCIPLogon ( string username, string password, string [db])\n 持続的接続を使用してOracle データベースに接続、ログオンする。 新しいセッションを返す。 
OCIResult /// mixed OCIResult ( int statement, mixed column)\n取得された行におけるカラムの値を得る
OCIRollback /// int OCIRollback ( int connection)\n未解決のトランザクションをロールバックする
OCIRowCount /// int OCIRowCount ( int statement)\n作用された行の数を得る
OCISaveLob /// string OCISaveLob ( object lob)\nComing soon.
OCISaveLobFile /// string OCISaveLobFile ( object lob)\nComing soon.
OCIServerVersion /// string OCIServerVersion ( int conn)\nサーバーのバージョン情報を有する文字列を返す
OCISetPrefetch /// int OCISetPrefetch ( int stmt, int rows)\n事前取得するレコード数を設定
OCIStatementType /// string OCIStatementType ( int stmt)\nOCI 命令の型を返す
OCIWriteLobToFile /// void OCIWriteLobToFile ( object lob [, string filename [, int start [, int lenght]]])\nComing soon.
openssl_csr_export_to_file /// bool openssl_csr_export_to_file ( resource csr, string outfilename [, bool notext])\nCSRをファイルまたは変数にエキスポートする
openssl_csr_export /// bool openssl_csr_export ( resource csr, string out [, bool notext])\nCSRをファイルまたは変数にエキスポートする
openssl_csr_new /// bool openssl_csr_new ( array dn, resource privkey [, array extraattribs [, array configargs]])\n秘密キーとCSRを生成する
openssl_csr_sign /// resource openssl_csr_sign ( mixed csr, mixed x509, mixed priv_key, long days)\n他のCERTで証明書をサインする
openssl_error_string /// mixed openssl_error_string ( void)\nOpenSSL エラーメッセージを返す
openssl_free_key /// void openssl_free_key ( resource key_identifier)\nキーリソースを開放する
openssl_get_privatekey /// resource openssl_get_privatekey ( mixed key, string [passphrase])\nPEMフォーマットされた秘密キーを使用可能とする
openssl_get_publickey /// resource openssl_get_publickey ( mixed certificate)\n 証明書(certificate)から公開キーを展開し、使用可能とする 
openssl_open /// bool openssl_open ( string sealed_data, string open_data, string env_key, mixed priv_key_id)\nシール(暗号化)されたデータをオープン(復号)する
openssl_pkcs7_decrypt /// bool openssl_pkcs7_decrypt ( string infilename, string outfilename, mixed recipcert, mixed recipkey)\nS/MIME 暗号化されたメッセージを復号化する
openssl_pkcs7_encrypt /// bool openssl_pkcs7_encrypt ( string infilename, string outfilename, mixed recipcerts, array headers [, long flags])\nS/MIME メッセージを暗号化する
openssl_pkcs7_sign /// bool openssl_pkcs7_sign ( string infilename, string outfilename, mixed signcert, mixed privkey, array headers [, long flags [, string extracertsfilename]])\nS/MIME メッセージにサインする
openssl_pkcs7_verify /// bool openssl_pkcs7_verify ( string filename, int flags [, string outfilename [, array cainfo [, string extracerts]]])\nS/MIMEサインされたメッセージのサインを確認する
openssl_pkey_export_to_file /// bool openssl_pkey_export_to_file ( mixed key, string outfilename [, string passphrase [, array config_args]])\n キーのエキスポート可能な表現をファイルに取得する 
openssl_pkey_export /// bool openssl_pkey_export ( mixed key, mixed out [, string passphrase [, array config_args]])\n あるキーのエクスポート可能な表現を文字列またはファイルに取得する 
openssl_pkey_new /// resource openssl_pkey_new ( [array configargs])\n新規に秘密キーを生成する
openssl_private_decrypt /// bool openssl_private_decrypt ( string data, string crypted, mixed key [, int padding])\n秘密キーでデータを復号化する
openssl_private_encrypt /// bool openssl_private_encrypt ( string data, string crypted, mixed key [, int padding])\n秘密キーでデータを暗号化する
openssl_public_decrypt /// bool openssl_public_decrypt ( string data, string crypted, resource key [, int padding])\n公開キーでデータを復号化する
openssl_public_encrypt /// bool openssl_public_encrypt ( string data, string crypted, mixed key [, int padding])\n公開キーでデータを暗号化する
openssl_seal /// int openssl_seal ( string data, string sealed_data, array env_keys, array pub_key_ids)\nデータをシール(暗号化)する
openssl_sign /// bool openssl_sign ( string data, string signature, int priv_key_id)\n署名を生成する
openssl_verify /// int openssl_verify ( string data, string signature, mixed pub_key_id)\n署名を認証する
openssl_x509_check_private_key /// bool openssl_x509_check_private_key ( mixed cert, mixed key)\n秘密キーがあるCERTに対応するかを確認する
openssl_x509_checkpurpose /// bool openssl_x509_checkpurpose ( mixed x509cert, int purpose, array cainfo [, string untrustedfile])\n 証明書が特定の目的に使用可能かどうか確認します。 
openssl_x509_export_to_file /// bool openssl_x509_export_to_file ( mixed x509, string outfilename [, bool notext])\nCERTをファイルまたは変数にエキスポートする
openssl_x509_export /// bool openssl_x509_export ( mixed x509, string outfilename [, bool notext])\nCERTをファイルまたは変数をエキスポートする
openssl_x509_free /// void openssl_x509_free ( resource x509cert)\n証明書リソースを開放する
openssl_x509_parse /// array openssl_x509_parse ( mixed x509cert [, bool shortnames])\n Parse an X509 証明書をパースし、配列として情報を返す 
openssl_x509_read /// resource openssl_x509_read ( mixed x509certdata)\n Parse an X.509 証明書をパースし、リソースIDを返す 
Ora_Bind /// int ora_bind ( int cursor, string PHP variable name, string SQL parameter name, int length, int [type])\n PHP変数をOracleパラメータにバインドする
Ora_Close /// int ora_close ( int cursor)\nOracleカーソルをクローズする
Ora_ColumnName /// string Ora_ColumnName ( int cursor, int column)\nOracle結果カラムの名前を取得する
Ora_ColumnSize /// int Ora_ColumnSize ( int cursor, int column)\nOracle 結果カラムのサイズを得る
Ora_ColumnType /// string Ora_ColumnType ( int cursor, int column)\nOracleのカラムの型を取得する
Ora_Commit /// int ora_commit ( int conn)\nOracleトランザクションをコミットする
Ora_CommitOff /// int ora_commitoff ( int conn)\nオートコミットをオフにする
Ora_CommitOn /// int ora_commiton ( int conn)\nオートコミットを有効にする
Ora_Do /// int ora_do ( int conn, string query)\nパース、実行、取得
Ora_Error /// string Ora_Error ( int cursor_or_connection)\nOracleエラーメッセージの取得
Ora_ErrorCode /// int Ora_ErrorCode ( int cursor_or_connection)\nOracleエラーコードの取得
Ora_Exec /// int ora_exec ( int cursor)\n Oracleカーソル上でのパースしたステートメントの実行 
Ora_Fetch_Into /// int ora_fetch_into ( int cursor, array result, int [flags])\n指定した配列resultにレコードを取得する
Ora_Fetch /// int ora_fetch ( int cursor)\nカーソルから1行分のデータを取得
Ora_GetColumn /// mixed ora_getcolumn ( int cursor, mixed column)\n取得した行からデータを得る
Ora_Logoff /// int ora_logoff ( int connection)\nOracle接続を閉じる
Ora_Logon /// int ora_logon ( string user, string password)\nOracle接続をオープンする
Ora_Numcols /// int ora_numcols ( int cursor_ind)\nカラム数を返す
Ora_Numrows /// int ora_numrows ( int cursor_ind)\nレコード数を返す
Ora_Open /// int ora_open ( int connection)\nOracleカーソルをオープンする
Ora_Parse /// int ora_parse ( int cursor_ind, string sql_statement, int defer)\nSQLステートメントを解釈する
Ora_pLogon /// int ora_plogon ( string user, string password)\n 持続的な Oracle接続をオープンする 
Ora_Rollback /// int ora_rollback ( int connection)\nトランザクションをロールバックする
ovrimos_close /// void ovrimos_close ( int connection)\novrimosへの接続を閉じる
ovrimos_commit /// int ovrimos_commit ( int connection_id)\nトランザクションをコミットする
ovrimos_connect /// int ovrimos_connect ( string host, string db, string user, string password)\n指定したデータベースに接続する
ovrimos_cursor /// int ovrimos_cursor ( int result_id)\nカーソルの名前を返す
ovrimos_exec /// int ovrimos_exec ( int connection_id, string query)\nSQL命令を実行する
ovrimos_execute /// boolean ovrimos_execute ( int result_id, array [parameters_array])\n準備されたSQL命令を実行する
ovrimos_fetch_into /// boolean ovrimos_fetch_into ( int result_id, array result_array, string [how], int [rownumber])\n結果からレコードを取得する
ovrimos_fetch_row /// boolean ovrimos_fetch_row ( int result_id, int [how], int [row_number])\n結果からレコードを取得する
ovrimos_field_len /// int ovrimos_field_len ( int result_id, int field_number)\n出力カラムの長さを返す
ovrimos_field_name /// int ovrimos_field_name ( int result_id, int field_number)\n出力のカラム名を返す
ovrimos_field_num /// int ovrimos_field_num ( int result_id, string field_name)\n 出力カラムから(1から始まる)インデックスを返す 
ovrimos_field_type /// int ovrimos_field_type ( int result_id, int field_number)\n 出力カラムの(数値)型を返す 
ovrimos_free_result /// int ovrimos_free_result ( int result_id)\n指定したresult_idを開放する
ovrimos_longreadlen /// int ovrimos_longreadlen ( int result_id, int length)\n longデータ型から取得されるバイト数を指定する 
ovrimos_num_fields /// int ovrimos_num_fields ( int result_id)\nカラム数を返す
ovrimos_num_rows /// int ovrimos_num_rows ( int result_id)\n update 命令により変更されたレコードの数を返す 
ovrimos_prepare /// int ovrimos_prepare ( int connection_id, string query)\nSQL命令を準備する
ovrimos_result_all /// boolean ovrimos_result_all ( int result_id, string [format])\n 結果全体をHTMLテーブルとして出力する 
ovrimos_result /// int ovrimos_result ( int result_id, mixed field)\n出力カラムを取得する
ovrimos_rollback /// int ovrimos_rollback ( int connection_id)\nトランザクションをロールバックする
flush /// void flush ( void)\n出力バッファをフラッシュする
ob_clean /// void ob_clean ( void)\n 出力バッファをクリア(消去)する 
ob_end_clean /// void ob_end_clean ( void)\n 出力用バッファをクリア(消去)し、出力のバッファリングをオフにする 
ob_end_flush /// void ob_end_flush ( void)\n 出力用バッファをフラッシュ(送信)し、出力のバッファリングをオフに する 
ob_flush /// void ob_flush ( void)\n 出力バッファをフラッシュ(送信)する 
ob_get_contents /// string ob_get_contents ( void)\n 出力用バッファの内容を返す 
ob_get_length /// string ob_get_length ( void)\n 出力バッファの長さを返す 
ob_get_level /// int ob_get_level ( void)\n 出力バッファリング機構のネストレベルを返す 
ob_get_status /// array ob_get_status ( [bool full_status])\n Get status of output buffers 
ob_gzhandler /// string ob_gzhandler ( string buffer [, int mode])\n 出力バッファをgzip圧縮するためのob_startコールバック関数 
ob_implicit_flush /// void ob_implicit_flush ( int [flag])\n 自動フラッシュをオンまたはオフにする 
ob_start /// void ob_start ( string [output_callback])\n出力のバッファリングを有効にする
overload /// void overload ( [string class_name])\n クラスのプロパティおよびメソッドに関してオーバーロードを可能にする 
pdf_add_annotation /// \n古い関数: 注記を追加する
pdf_add_bookmark /// int pdf_add_bookmark ( int pdf object, string text [, int parent [, int open]])\nブックマークをカレントのページに追加する
pdf_add_launchlink /// int pdf_add_launchlink ( int pdf object, float llx, float lly, float urx, float ury, string filename)\nカレントのページに起動用注記を追加する
pdf_add_locallink /// int pdf_add_locallink ( int pdf object, float llx, float lly, float urx, float ury, int page, string dest)\nカレントのページにリンク注記を追加
pdf_add_note /// int pdf_add_note ( int pdf object, float llx, float lly, float urx, float ury, string contents, string title, string icon, int open)\nカレントのページに注記を追加する
pdf_add_outline /// 古い関数です。 \n古い関数: カレントのページにブックマークを追加する
pdf_add_pdflink /// int pdf_add_pdflink ( int pdf object, float llx, float lly, float urx, float ury, string filename, int page, string dest)\nカレントページにリンク注記を追加
pdf_add_thumbnail /// int pdf_add_thumbnail ( int pdf object, int image)\nカレントのページにサムネールを追加する
pdf_add_weblink /// int pdf_add_weblink ( int pdf object, float llx, float lly, float urx, float ury, string url)\nカレントのページにWebリンクを追加する
pdf_arc /// void pdf_arc ( resource pdf object, float x, float y, float r, float alpha, float beta)\n(反時計回りに)円弧を描く
pdf_arcn /// void pdf_arc ( resource pdf object, float x, float y, float r, float alpha, float beta)\n(時計回りに)円弧を描く
pdf_attach_file /// int pdf_attach_file ( int pdf object, float llx, float lly, float urx, float ury, string filename, string description, string author, string mimetype, string icon)\nカレントのページに添付ファイルを追加する
pdf_begin_page /// void pdf_begin_page ( int pdf object, float width, float height)\n新規ページを開始する
pdf_begin_pattern /// int pdf_begin_pattern ( int pdf object, float width, float height, float xstep, float ystep, int painttype)\n新規パターンを開始する
pdf_begin_template /// void pdf_begin_template ( int pdf object, float width, float height)\n新規テンプレートを開始する
pdf_circle /// void pdf_circle ( int pdf object, float x, float y, float r)\n円を描く
pdf_clip /// void pdf_clip ( int pdf object)\nカレントのパスに切り取る
pdf_close_image /// void pdf_close_image ( int pdf object, int image)\n画像を閉じる
pdf_close_pdi_page /// void pdf_close_pdi_page ( int pdf object, int pagehandle)\n ページハンドルを閉じる 
pdf_close_pdi /// void pdf_close_pdi ( int pdf object, int dochandle)\n PDFドキュメント入力(PDI)を閉じる 
pdf_close /// void pdf_close ( int pdf object)\npdf ドキュメントを閉じる
pdf_closepath_fill_stroke /// void pdf_closepath_fill_stroke ( int pdf object)\nカレントのパスを閉じ、塗りつぶし、輪郭を描く
pdf_closepath_stroke /// void pdf_closepath_stroke ( int pdf object)\nパスを閉じ、パスに沿って線を描く
pdf_closepath /// void pdf_closepath ( int pdf object)\nパスを閉じる
pdf_concat /// void pdf_concat ( int pdf object, float a, float b, float c, float d, float e, float f)\n行列をCTMに追加
pdf_continue_text /// void pdf_continue_text ( int pdf object, string text)\n次の行にテキストを出力する
pdf_curveto /// void pdf_curveto ( int pdf object, float x1, float y1, float x2, float y2, float x3, float y3)\n曲線を描く
pdf_delete /// void pdf_delete ( int pdf object)\nPDFオブジェクトを削除
pdf_end_page /// void pdf_end_page ( int pdf object)\nページを終了する
pdf_end_pattern /// void pdf_end_pattern ( int pdf object)\nパターンを終了する
pdf_end_template /// void pdf_end_template ( int pdf object)\nテンプレートを終了する
pdf_endpath /// void pdf_endpath ( int pdf object)\n古い関数: カレントのパスを終了する
pdf_fill_stroke /// void pdf_fill_stroke ( int pdf object)\nカレントのパスを塗りつぶし、パスの輪郭を描く
pdf_fill /// void pdf_fill ( int pdf object)\nカレントのパスを塗りつぶす
pdf_findfont /// void pdf_findfont ( int pdf object, string fontname, string encoding, int embed)\n 後でpdf_setfont()で使用するフォントを準備する 
pdf_get_buffer /// string pdf_get_buffer ( int pdf object)\n 生成されたPDFデータを含むバッファを取得する 
pdf_get_font /// 古い関数です。 \n古い関数: フォント処理
pdf_get_fontname /// 古い関数です。 \n古い関数: フォント処理
pdf_get_fontsize /// 古い関数です。 \n古い関数: フォント処理
pdf_get_image_height /// string pdf_get_image_height ( int pdf object, int image)\n古い関数: イメージの高さを返す
pdf_get_image_width /// string pdf_get_image_width ( int pdf object, int image)\n古い関数: イメージの幅を返す
pdf_get_majorversion /// int pdf_get_majorversion ( void)\n PDFlibのメジャーバージョン番号を返す 
pdf_get_minorversion /// int pdf_get_majorversion ( void)\n PDFlibのマイナーバージョン番号を返す 
pdf_get_parameter /// string pdf_get_parameter ( int pdf object, string key [, float modifier])\nパラメータを得る
pdf_get_pdi_parameter /// string pdf_get_pdi_parameter ( int pdf object, string key, int doc, int page, int index)\nPDF文字列パラメータを得る
pdf_get_pdi_value /// string pdf_get_pdi_value ( int pdf object, string key, int doc, int page, int index)\n数値型のPDIパラメータを取得する
pdf_get_value /// float pdf_get_value ( int pdf object, string key, float [modifier])\n数値を得る
pdf_initgraphics /// void pdf_initgraphics ( int pdf object)\n描画状態をリセットする
pdf_lineto /// void pdf_lineto ( int pdf object, float x, float y)\n線を描く
pdf_makespotcolor /// void pdf_makespotcolor ( int pdf object, string spotname)\nスポット色を作成する
pdf_moveto /// void pdf_moveto ( int pdf object, float x, float y)\n現在の位置を設定する
pdf_new /// int pdf_new ( )\n新規PDFオブジェクトを作成する
pdf_open_CCITT /// int pdf_open_ccitt ( int pdf object, string filename, int width, int height, int BitReverse, int k, int Blackls1)\n 生のCCITTデータから新規イメージファイルをオープンする 
pdf_open_file /// int pdf_open_file ( int pdf object [, string filename])\n新規PDFオブジェクトをオープンする
pdf_open_gif /// 古い関数です。 \n古い関数: GIFイメージをオープンする
pdf_open_image_file /// int pdf_open_image_file ( int PDF-document, string imagetype, string filename [, string stringparam [, string intparam]])\nファイルからイメージを読み込む
pdf_open_image /// int pdf_open_image ( int PDF-document, string imagetype, string source, string data, long length, int width, int height, int components, int bpc, string params)\nイメージ読み込み関数
pdf_open_jpeg /// 古い関数です。 \n古い関数: JPEGイメージをオープンする
pdf_open_memory_image /// int pdf_open_memory_image ( int pdf object, int image)\n PHPのイメージ関数で作成されたイメージをオープンする 
pdf_open_pdi_page /// void pdf_open_pd_pagei ( int pdf object, int dochandle, int pagenumber, string pagelabel)\nページを準備する
pdf_open_pdi /// void pdf_open_pdi ( int pdf object, string filename, string stringparam, int intparam)\nPDFファイルをオープンする
pdf_open_png /// 古い関数です。 \n 古い関数: PNGイメージをオープンする 
pdf_open_tiff /// int pdf_open_tiff ( int PDF-document, string filename)\n古い関数: TIFFイメージをオープンする
pdf_open /// int pdf_open ( int file)\n古い関数: 新規の pdfオブジェクトをオープンする
pdf_place_image /// void pdf_place_image ( int pdf object, int image, float x, float y, float scale)\nイメージをページ上に置く
pdf_place_pdi_page /// void pdf_place_pdi_page ( int pdf object, int page, float x, float y, float sx, float sy)\nページにイメージを置く
pdf_rect /// void pdf_rect ( int pdf object, float x, float y, float width, float height)\n長方形を描く
pdf_restore /// void pdf_restore ( int pdf object)\n以前保存された環境を復元する
pdf_rotate /// void pdf_rotate ( int pdf object, float phi)\n回転を設定する
pdf_save /// void pdf_save ( int pdf object)\n現在の環境を保存する
pdf_scale /// void pdf_scale ( int pdf object, float x-scale, float y-scale)\nスケールを設定する
pdf_set_border_color /// void pdf_set_border_color ( int pdf object, float red, float green, float blue)\nリンクや注記の周りの境界色を設定する
pdf_set_border_dash /// void pdf_set_border_dash ( int pdf object, float black, float white)\nリンクおよび注記の周りの境界の破線形式を設定する
pdf_set_border_style /// void pdf_set_border_style ( int pdf object, string style, float width)\n リンクおよび注記の周りの境界の形式を設定する
pdf_set_char_spacing /// 古い関数です。 \n古い関数: 文字間隔を設定する
pdf_set_duration /// 古い関数です。 \n古い関数: ページ間隔を設定
pdf_set_font /// 古い関数です。\n古い関数: フォントの形式とサイズを選択
pdf_set_horiz_scaling /// void pdf_set_horiz_scaling ( int pdf object, float scale)\n古い関数: テキストの横方向倍率を設定
pdf_set_info_author /// bool pdf_set_info_author ( int pdfdoc, string author)\n ドキュメントのauthorフィールドを設定する 
pdf_set_info_creator /// bool pdf_set_info_creator ( int pdfdoc, string creator)\n ドキュメントのcreatorフィールドを設定する 
pdf_set_info_keywords /// bool pdf_set_info_keywords ( int pdfdoc, string keywords)\n ドキュメントのkeywordフィールドを設定する 
pdf_set_info_subject /// bool pdf_set_info_subject ( int pdfdoc, string subject)\n ドキュメントのsubjectフィールドを設定する 
pdf_set_info_title /// bool pdf_set_info_title ( int pdfdoc, string title)\n ドキュメントのtitleフィールドを設定する 
pdf_set_info /// void pdf_set_info ( int pdf object, string key, string value)\nドキュメント情報のフィールドを設定する
pdf_set_leading /// 古い関数です。 \n古い関数: テキストの行間を設定する
pdf_set_parameter /// void pdf_set_parameter ( int pdf object, string key, string value)\nパラメータを設定する
pdf_set_text_matrix /// See \nDeprecated: Sets the text matrix
pdf_set_text_pos /// void pdf_set_text_pos ( int pdf object, float x, float y)\nテキストの位置を設定する
pdf_set_text_rendering /// 古い関数です。 \n古い関数: テキストの描画方法を設定
pdf_set_text_rise /// 古い関数です。 \n古い関数: テキストの傾きを設定する
pdf_set_value /// void pdf_set_value ( int pdf object, string key, float value)\n数値を設定する
pdf_set_word_spacing /// 古い関数です。 \n古い関数: 単語間の空白を設定する
pdf_setcolor /// void pdf_setcolor ( int pdf object, string type, string colorspace, float c1 [, float c2 [, float c3 [, float c4]]])\n塗りつぶし色および輪郭色を設定する
pdf_setdash /// void pdf_setdash ( int pdf object, float b, float w)\n破線パターンを設定する
pdf_setflat /// void pdf_setflat ( int pdf object, float flatness)\n平面度を設定する
pdf_setfont /// void pdf_setfont ( int pdf object, int font, float size)\nカレントのフォントを設定する
pdf_setgray_fill /// void pdf_setgray_fill ( int pdf object, float gray)\n塗りつぶし色をグレー値に設定する
pdf_setgray_stroke /// void pdf_setgray_stroke ( int pdf object, float gray)\n描画色をグレー値に設定する
pdf_setgray /// void pdf_setgray ( int pdf object, float gray)\n描画および塗りつぶし色をグレー値に設定する
pdf_setlinecap /// void pdf_setlinecap ( int pdf object, int linecap)\nlinecap パラメータを設定する
pdf_setlinejoin /// void pdf_setlinejoin ( int pdf object, long linejoin)\nlinejoinパラメータを設定する
pdf_setlinewidth /// void pdf_setlinewidth ( int pdf object, float width)\n線幅を設定する
pdf_setmatrix /// void pdf_setmatrix ( int pdf object, float a, float b, float c, float d, float e, float f)\nカレントの変換行列を設定する
pdf_setmiterlimit /// void pdf_setmiterlimit ( int pdf object, float miter)\nmiter limitを設定する
pdf_setpolydash /// void pdf_setpolydash ( int pdf object, float * dasharray)\n複雑な破線パターンを設定
pdf_setrgbcolor_fill /// void pdf_setrgbcolor_fill ( int pdf object, float red value, float green value, float blue value)\n塗りつぶし色をRGBカラー値に設定する
pdf_setrgbcolor_stroke /// void pdf_setrgbcolor_stroke ( int pdf object, float red value, float green value, float blue value)\n描画色をRGBカラー値に設定する
pdf_setrgbcolor /// void pdf_setrgbcolor ( int pdf object, float red value, float green value, float blue value)\n描画色および塗りつぶし色をRGBカラー値で設定する
pdf_show_boxed /// int pdf_show_boxed ( int pdf object, string text, float left, float top, float width, float height, string hmode [, string feature])\nボックスにテキストを出力する
pdf_show_xy /// void pdf_show_xy ( int pdf object, string text, float x, float y)\n指定した位置にテキストを出力する
pdf_show /// void pdf_show ( int pdf object, string text)\nカレントの位置にテキストを出力する
pdf_skew /// void pdf_skew ( int pdf object, float alpha, float beta)\n座標系を歪ませる
pdf_stringwidth /// float pdf_stringwidth ( int pdf object, string text [, int font [, float size]])\nカレントフォントを用いた際のテキスト幅を返す
pdf_stroke /// void pdf_stroke ( int pdf object)\nパスに沿って線を描く
pdf_translate /// void pdf_translate ( int pdf object, float tx, float ty)\n座標系の原点を設定する
pfpro_cleanup /// void pfpro_cleanup ( void)\nPayflow Proライブラリをシャットダウンする
pfpro_init /// void pfpro_init ( void)\nPayflow Proライブラリを初期化する
pfpro_process_raw /// string pfpro_process_raw ( string parameters, string [address], int [port], int [timeout], string [proxy address], int [proxy port], string [proxy logon], string [proxy password])\nPayflow Proにより素のトランザクションを処理する
pfpro_process /// array pfpro_process ( array parameters, string [address], int [port], int [timeout], string [proxy address], int [proxy port], string [proxy logon], string [proxy password])\nPayflow Proでトランザクションを処理する
pfpro_version /// string pfpro_version ( void)\nPayflow Pro ソフトウエアのバージョンを返す
assert_options /// mixed assert_options ( int what, mixed [value])\n様々な assert フラグを設定/取得する
assert /// int assert ( string|bool assertion)\nassertion が FALSE であるかどうかを調べる
dl /// int dl ( string library)\n実行時にPHP拡張モジュールをロードする
extension_loaded /// bool extension_loaded ( string name)\nある拡張機能がロードされているかどうかを調べる
get_cfg_var /// string get_cfg_var ( string varname)\nPHP 設定オプションの値を取得する
get_current_user /// string get_current_user ( void)\n現在の PHP スクリプトの所有者の名前を取得する
get_defined_constants /// array get_defined_constants ( void)\n 全ての定数の名前とその値を連想配列として返す 
get_extension_funcs /// array get_extension_funcs ( string module_name)\n あるモジュールの関数名を配列として返す 
get_included_files /// array get_included_files ( void)\n includeまたはrequireで読み込まれたファイルの名前を配列として返す 
get_loaded_extensions /// array get_loaded_extensions ( void)\n コンパイル/ロードされている全てのモジュールの名前を配列として返す 
get_magic_quotes_gpc /// long get_magic_quotes_gpc ( void)\nmagic quotes gpc の現在アクティブな設定を得る
get_magic_quotes_runtime /// long get_magic_quotes_runtime ( void)\n magic_quotes_runtime の現在アクティブな設定値を得ます 
get_required_files /// array get_required_files ( void)\n includeまたはrequireで読み込まれたファイルの名前を配列として返す 
getenv /// string getenv ( string varname)\n環境変数の値を取得する
getlastmod /// int getlastmod ( void)\n最終ページ更新時刻を取得する
getmygid /// int getmygid ( void)\nPHPスクリプトの所有者のGIDを得る
getmyinode /// int getmyinode ( void)\n現在のスクリプトの i ノードを取得する
getmypid /// int getmypid ( void)\nPHP のプロセス ID を取得する
getmyuid /// int getmyuid ( void)\nPHP スクリプト所有者のユーザ ID を取得する
getopt /// string getopt ( string options)\nGets options from the command line argument list
getrusage /// array getrusage ( int [who])\nカレントリソースの使用に関する情報を得る
ini_alter /// string ini_alter ( string varname, string newvalue)\n設定オプションの値を変更する
ini_get_all /// array ini_get_all ( [string extension])\n全ての設定オプションを得る
ini_get /// string ini_get ( string varname)\n設定オプションの値を得る
ini_restore /// string ini_restore ( string varname)\n設定オプションの値を元に戻す
ini_set /// string ini_set ( string varname, string newvalue)\n設定オプションの値を設定する
php_ini_scanned_files /// string php_ini_scanned_files ( void)\nReturn a list of .ini files parsed from the additional ini dir
php_logo_guid /// string php_logo_guid ( void)\nロゴのguidを取得する
php_sapi_name /// string php_sapi_name ( void)\n WebサーバーとPHPの間のインターフェースの型を返す 
php_uname /// string php_uname ( void)\n PHPが構築されたオペレーションシステムに関する情報を返す 
phpcredits /// void phpcredits ( int flag)\nPHPに関するクレジットを出力する
phpinfo /// int phpinfo ( int [what])\nいろいろな PHP 情報を出力する
phpversion /// string phpversion ( void)\n現在のPHPバージョンを取得する
putenv /// void putenv ( string setting)\n環境変数の値を設定する
set_magic_quotes_runtime /// long set_magic_quotes_runtime ( int new_setting)\nmagic_quotes_runtime の現在アクティブな設定を設定します。 
set_time_limit /// void set_time_limit ( int seconds)\n実行時間の最大値を制限します
version_compare /// int version_compare ( string version1, string version2 [, string operator])\n 二つの"PHP標準"バージョン番号文字列を比較する 
zend_logo_guid /// string zend_logo_guid ( void)\nzend guid を取得する
zend_version /// string zend_version ( void)\nカレントのZendエンジンのバージョンを取得する
posix_ctermid /// string posix_ctermid ( void )\n制御する端末のパス名を得る
posix_getcwd /// string posix_getcwd ( void )\n現在のディレクトリのパス名
posix_getegid /// int posix_getegid ( void)\n 現在のプロセスの有効なグループIDを返す 
posix_geteuid /// int posix_geteuid ( void)\n 現在のプロセスの有効なユーザーIDを返す 
posix_getgid /// int posix_getgid ( void)\n 現在のプロセスの実際のグループIDを返す 
posix_getgrgid /// array posix_getgrgid ( int gid)\n指定したグループIDを有するグループに関する情報を返す
posix_getgrnam /// array posix_getgrnam ( string name)\n 指定したグループ名を有するグループに関する情報を返す 
posix_getgroups /// array posix_getgroups ( void)\n 現在のプロセスのグループ設定を返す 
posix_getlogin /// string posix_getlogin ( void)\nログイン名を返す
posix_getpgid /// int posix_getpgid ( int pid)\nジョブ制御のプロセスグループIDを得る
posix_getpgrp /// int posix_getpgrp ( void)\n 現在のプロセスのグループIDを返す 
posix_getpid /// int posix_getpid ( void)\n現在のプロセスIDを返す
posix_getppid /// int posix_getppid ( void)\n親プロセスのIDを返す
posix_getpwnam /// array posix_getpwnam ( string username)\n指定したユーザ名を有するユーザに関する情報を返す
posix_getpwuid /// array posix_getpwuid ( int uid)\n指定したユーザーIDを有するユーザーに関する情報を返す
posix_getrlimit /// array posix_getrlimit ( void )\nシステムリソース制限に関する情報を返す
posix_getsid /// int posix_getsid ( int pid)\nプロセスの現在のsidを得る
posix_getuid /// int posix_getuid ( void)\n 現在のプロセスの実際のユーザーIDを返す 
posix_isatty /// bool posix_isatty ( int fd)\n ファイル記述子が対話型端末であるかどうかを定義する 
posix_kill /// bool posix_kill ( int pid, int sig)\nプロセスにシグナルを送信する
posix_mkfifo /// bool posix_mkfifo ( string pathname, int mode)\n fifo スペシャルファイル(名前付きパイプ)を作成する 
posix_setegid /// bool posix_setegid ( int gid)\n Set the effective GID of the current process 
posix_seteuid /// bool posix_seteuid ( int uid)\n Set the effective UID of the current process 
posix_setgid /// bool posix_setgid ( int gid)\n 現在のプロセスの有効な GID を設定する 
posix_setpgid /// int posix_setpgid ( int pid, int pgid)\nジョブ制御のプロセスグループIDを設定する
posix_setsid /// int posix_setsid ( void)\n現在のプロセスのセッションリーダーを作成する
posix_setuid /// bool posix_setuid ( int uid)\n 現在のプロセスの有効な UID を設定する 
posix_times /// array posix_times ( void)\nプロセス時間を得る
posix_ttyname /// string posix_ttyname ( int fd)\n端末のデバイス名を定義する
posix_uname /// array posix_uname ( void)\nシステム名を得る
pg_affected_rows /// int pg_affected_rows ( resource result)\n変更されたレコード(タプル)の数を返す
pg_cancel_query /// bool pg_cancel_query ( resource connection)\n 非同期クエリを取り消す 
pg_client_encoding /// string pg_client_encoding ( [resource connection])\n PostgreSQLクライアントのエンコーディングを取得する 
pg_close /// bool pg_close ( resource connection)\nPostgreSQL接続を閉じる
pg_connect /// resource pg_connect ( string connection_string)\nPostgreSQL接続を開く
pg_connection_busy /// bool pg_connection_busy ( resource connection)\n 接続がビジーかどうか調べる 
pg_connection_reset /// bool pg_connection_reset ( resource connection)\n 接続をリセット(再接続)する 
pg_connection_status /// int pg_connection_status ( resource connection)\n 接続ステータスを取得する 
pg_convert /// array pg_convert ( resource connection, string table_name, array assoc_array [, int options])\n SQL命令として実行可能な形式の連想配列の値に変換する 
pg_copy_from /// int pg_copy_from ( int connection, string table_name, array rows [, string delimiter [, string null_as]])\n 配列からテーブルをコピーする 
pg_copy_to /// int pg_copy_to ( int connection, string table_name [, string delimiter [, string null_as]])\n 配列にテーブルをコピーする 
pg_dbname /// string pg_dbname ( resource connection)\nデータベース名の取得
pg_delete /// long pg_delete ( resource connection, string table_name, array assoc_array [, int options])\n Delete records. 
pg_end_copy /// bool pg_end_copy ( [resource connection])\nPostgreSQLバックエンドに同期する
pg_escape_bytea /// string pg_escape_bytea ( string data)\n bytea型にバイナリをエスケープする 
pg_escape_string /// string pg_escape_string ( string data)\n テキスト/文字型用の文字列をエスケープする 
pg_fetch_all /// array pg_fetch_all ( resource result [, int row])\nFetch a row as an array
pg_fetch_array /// array pg_fetch_array ( resource result [, int row [, int result_type]])\n行を配列として取得する
pg_fetch_assoc /// array pg_fetch_assoc ( resource result [, int row])\nFetch a row as an array
pg_fetch_object /// object pg_fetch_object ( resource result, int row [, int result_type])\n行をオブジェクトとして得る
pg_fetch_result /// mixed pg_fetch_result ( resource result, int row, mixed field)\n結果リソースから値を返す
pg_fetch_row /// array pg_fetch_row ( resource result, int row)\n数字をインデックスとする配列として行を得る
pg_field_is_null /// int pg_field_is_null ( resource result, int row, mixed field)\nフィールドがNULLかどうか調べる
pg_field_name /// string pg_field_name ( resource result, int field_number)\nフィールドの名前を返す
pg_field_num /// int pg_field_num ( resource result, string field_name)\nReturns the field number of the named field
pg_field_prtlen /// int pg_field_prtlen ( resource result, int row_number, string field_name)\n表示される長さを返す
pg_field_size /// int pg_field_size ( resource result, int field_number)\n 指定したフィールドの内部記憶領域におけるサイズを返す 
pg_field_type /// string pg_field_type ( resource result, int field_number)\n フィールド番号に対応する型名を返す 
pg_free_result /// bool pg_free_result ( resource result)\nメモリを開放する
pg_get_notify /// array pg_get_notify ( resource connection [, int result_type])\nPing database connection
pg_get_pid /// int pg_get_pid ( resource connection)\nPing database connection
pg_get_result /// resource pg_get_result ( [resource connection])\n 非同期クエリの結果を取得する 
pg_host /// string pg_host ( resource connection)\nホスト名を返す
pg_insert /// bool pg_insert ( resource connection, string table_name, array assoc_array [, bool convert])\n テーブルに配列を挿入する 
pg_last_error /// string pg_last_error ( resource connection)\n特定の接続から直近のエラーメッセージ文字列を取得する
pg_last_notice /// string pg_last_notice ( resource connection)\n PostgreSQLサーバからの直近の通知メッセージを返す 
pg_last_oid /// int pg_last_oid ( resource result)\n直近のオブジェクトIDを返す
pg_lo_close /// bool pg_lo_close ( resource large_object)\nラージオブジェクトをクローズする
pg_lo_create /// int pg_lo_create ( resource connection)\nラージオブジェクトを生成する
pg_lo_export /// bool pg_lo_export ( int oid, string pathname [, resource connection])\nラージオブジェクトをファイルにエクスポートする
pg_lo_import /// int pg_lo_import ( string pathname [, resource connection])\nファイルからラージオブジェクトをインポートする
pg_lo_open /// resource pg_lo_open ( resource connection, int oid, string mode)\nラージオブジェクトをオープンする
pg_lo_read_all /// int pg_lo_read_all ( resource large_object)\n ラージオブジェクト全体を読み込みブラウザに直接送信する 
pg_lo_read /// string pg_lo_read ( resource large_object, int len)\nラージオブジェクトを読み込む
pg_lo_seek /// bool pg_lo_seek ( resource large_object, int offset [, int whence])\n ラージオブジェクトの位置をシークする 
pg_lo_tell /// int pg_lo_tell ( resource large_object)\n ラージオブジェクトのカレントの位置を返す 
pg_lo_unlink /// bool pg_lo_unlink ( resource connection, int oid)\nラージオブジェクトを削除する
pg_lo_write /// int pg_lo_write ( resource large_object, string data)\nラージオブジェクトを書く
pg_meta_data /// array pg_meta_data ( resource connection, string table_name)\n Get meta data for table. 
pg_num_fields /// int pg_num_fields ( resource result)\nフィールド数を返す
pg_num_rows /// int pg_num_rows ( resource result)\n行数を返す
pg_options /// string pg_options ( resource connection)\n接続に関連するオプションを取得する
pg_pconnect /// int pg_pconnect ( string connection_string)\n持続的なデータベース接続をオープンする
pg_ping /// array pg_ping ( resource connection)\nPing database connection
pg_port /// int pg_port ( resource connection)\n接続に関連するポート番号を返す
pg_put_line /// bool pg_put_line ( [resource connection, string data])\n NULLで終る文字列をPostgreSQLバックエンドに送信する 
pg_query /// resource pg_query ( resource connection, string query)\nクエリを実行する
pg_result_error /// string pg_result_error ( resource result)\n 結果に関連するエラーメッセージを取得する 
pg_result_seek /// array pg_result_seek ( resource result, int offset)\nSet internal row offset in result resource
pg_result_status /// int pg_result_status ( resource result)\n クエリ結果のステータスを取得する 
pg_select /// array pg_select ( resource connection, string table_name, array assoc_array [, bool convert])\n レコードを選択する 
pg_send_query /// bool pg_send_query ( resource connection, string query)\n 非同期クエリを送信する 
pg_set_client_encoding /// int pg_set_client_encoding ( [resource connection, string encoding])\n PostgreSQLクライアントのエンコーディングを設定する 
pg_trace /// bool pg_trace ( string filename, string [mode] [, resource connection])\nPostgreSQLサーバーへの接続をトレースする
pg_tty /// string pg_tty ( resource connection)\ntty名を返す
pg_unescape_bytea /// string pg_unescape_bytea ( string data)\n Escape binary for bytea type 
pg_untrace /// bool pg_untrace ( [resource connection])\n PostgreSQLサーバーへの接続のトレースを無効にする 
pg_update /// long pg_update ( resource connection, string table_name, array condition, array data [, bool convert])\n テーブルを更新する 
pcntl_exec /// bool pcntl_exec ( string path [, array args [, array envs]])\n カレントのプロセス空間で指定したプログラムを実行する 
pcntl_fork /// int pcntl_fork ( void)\n現在実行中のプロセスをフォークする
pcntl_signal /// bool pcntl_signal ( int signo, mixed handle)\nシグナルハンドラを設定する
pcntl_waitpid /// int pcntl_waitpid ( int pid, int status, int options)\n待つかフォークした子プロセスのステータスを返す
pcntl_wexitstatus /// int pcntl_wexitstatus ( int status)\n 終了した子プロセスのリターンコードを返す 
pcntl_wifexited /// int pcntl_wifexited ( int status)\n ステータスコードが正常終了を表す場合に TRUE を返す 
pcntl_wifsignaled /// int pcntl_wifsignaled ( int status)\n ステータスコードがシグナルによる終了を表す場合に TRUE を返す 
pcntl_wifstopped /// int pcntl_wifstopped ( int status)\n 子プロセスが現在停止している場合、TRUE を返す 
pcntl_wstopsig /// int pcntl_wstopsig ( int status)\n 子プロセスを停止させたシグナルを返す 
pcntl_wtermsig /// int pcntl_wtermsig ( int status)\n 子プロセスの終了を生じたシグナルを返す 
escapeshellarg /// string escapeshellarg ( string arg)\nシェル引数として使用される文字列をエスケープする
escapeshellcmd /// string escapeshellcmd ( string command)\nシェルのメタ文字をエスケープする
exec /// string exec ( string command, string [array], int [return_var])\n外部プログラムを実行します
passthru /// void passthru ( string command, int [return_var])\n外部プログラムを実行し、未整形の出力を表示します
proc_close /// int proc_close ( resource process)\n Close a process opened by proc_open and return the exit code of that process. 
proc_open /// resource proc_open ( string cmd, array descriptorspec, array pipes)\n Execute a command and open file pointers for input/output 
shell_exec /// string shell_exec ( string cmd)\n シェルによりコマンドを実行し、文字列として出力全体を返す 
system /// string system ( string command, int [return_var])\n外部プログラムの実行と表示
printer_abort /// void printer_abort ( resource handle)\nプリンタのスプールファイルを削除する
printer_close /// void printer_close ( resource handle)\nプリンタへの接続を閉じる
printer_create_brush /// mixed printer_create_brush ( int style, string color)\n新規ブラシを作成する
printer_create_dc /// void printer_create_dc ( resource handle)\n新規デバイスコンテキストを作成する
printer_create_font /// mixed printer_create_font ( string face, int height, int width, int font_weight, bool italic, bool underline, bool strikeout, int orientaton)\n新規フォントを作成する
printer_create_pen /// mixed printer_create_pen ( int style, int width, string color)\n新規ペンを作成する
printer_delete_brush /// bool printer_delete_brush ( resource handle)\nブラシを削除する
printer_delete_dc /// bool printer_delete_dc ( resource handle)\nデバイスコンテキストを削除する
printer_delete_font /// bool printer_delete_font ( resource handle)\nフォントを削除する
printer_delete_pen /// bool printer_delete_pen ( resource handle)\nペンを削除する
printer_draw_bmp /// void printer_draw_bmp ( resource handle, string filename, int x, int y)\nビットマップを描画する
printer_draw_chord /// void printer_draw_chord ( resource handle, int rec_x, int rec_y, int rec_x1, int rec_y1, int rad_x, int rad_y, int rad_x1, int rad_y1)\n弦を描画する
printer_draw_elipse /// void printer_draw_elipse ( resource handle, int ul_x, int ul_y, int lr_x, int lr_y)\n楕円を描画する
printer_draw_line /// void printer_draw_line ( resource printer_handle, int from_x, int from_y, int to_x, int to_y)\n線を描画する
printer_draw_pie /// void printer_draw_pie ( resource handle, int rec_x, int rec_y, int rec_x1, int rec_y1, int rad1_x, int rad1_y, int rad2_x, int rad2_y)\n円弧を描画する
printer_draw_rectangle /// void printer_draw_rectangle ( resource handle, int ul_x, int ul_y, int lr_x, int lr_y)\n矩形を描画する
printer_draw_roundrect /// void printer_draw_roundrect ( resource handle, int ul_x, int ul_y, int lr_x, int lr_y, int width, int height)\n角が丸い矩形を描画する
printer_draw_text /// void printer_draw_text ( resource printer_handle, string text, int x, int y)\nテキストを描画する
printer_end_doc /// bool printer_end_doc ( resource handle)\nドキュメントを閉じる
printer_end_page /// bool printer_end_page ( resource handle)\nアクティブなページを閉じる
printer_get_option /// mixed printer_get_option ( resource handle, string option)\nプリンタ設定データを取得する
printer_list /// array printer_list ( int enumtype [, string name [, int level]])\nサーバで付加されたプリンタの配列を返す
printer_logical_fontheight /// int printer_logical_fontheight ( resource handle, int height)\n論理フォントの高さを取得する
printer_open /// mixed printer_open ( [string devicename])\nプリンタへの接続をオープンする
printer_select_brush /// void printer_select_brush ( resource printer_handle, resource brush_handle)\nブラシを選択する
printer_select_font /// void printer_select_font ( resource printer_handle, resource font_handle)\nフォントを選択する
printer_select_pen /// void printer_select_pen ( resource printer_handle, resource pen_handle)\nペンを選択する
printer_set_option /// bool printer_set_option ( resource handle, int option, mixed value)\nプリンタの接続を設定する
printer_start_doc /// bool printer_start_doc ( resource handle [, string document])\n新規ドキュメントを開始する
printer_start_page /// bool printer_start_page ( resource handle)\n新規ページを開始する
printer_write /// bool printer_write ( resource handle, string content)\nプリンタへデータを書き込む
pspell_add_to_personal /// int pspell_add_to_personal ( int dictionary_link, string word)\nユーザの単語リストに単語を追加
pspell_add_to_session /// int pspell_add_to_session ( int dictionary_link, string word)\n カレントのセッションの単語リストに単語を追加 
pspell_check /// bool pspell_check ( int dictionary_link, string word)\n単語をチェックする
pspell_clear_session /// int pspell_clear_session ( int dictionary_link)\nカレントのセッションをクリアする
pspell_config_create /// int pspell_config_create ( string language, string [spelling], string [jargon], string [encoding])\n辞書をオープンする際に使用される設定を作成する
pspell_config_ignore /// int pspell_config_ignore ( int dictionary_link, int n)\n長さがN文字未満の単語を無視する
pspell_config_mode /// int pspell_config_mode ( int dictionary_link, int mode)\n返される提案の数のモードを変更する
pspell_config_personal /// int pspell_config_personal ( int dictionary_link, string file)\n個人の単語リストを保持するファイルを設定する
pspell_config_repl /// int pspell_config_repl ( int dictionary_link, string file)\n置換候補を保持するファイルを設定する
pspell_config_runtogether /// int pspell_config_runtogether ( int dictionary_link, boolean flag)\n 複合語を有効な単語の組み合わせとして考慮する
pspell_config_save_repl /// int pspell_config_save_repl ( int dictionary_link, boolean flag)\n 単語リストと共に置換リストを保存するかどうかを定義する 
pspell_new_config /// int pspell_new_config ( int config)\n 指定した設定に基づき新規辞書をロードする 
pspell_new_personal /// int pspell_new_personal ( string personal, string language, string [spelling], string [jargon], string [encoding], int [mode])\n個人の単語リストを有する新規辞書をロードする
pspell_new /// int pspell_new ( string language, string [spelling], string [jargon], string [encoding], int [mode])\n新規辞書をロードする
pspell_save_wordlist /// int pspell_save_wordlist ( int dictionary_link)\n個人の単語リストをファイルに保存する
pspell_store_replacement /// int pspell_store_replacement ( int dictionary_link, string misspelled, string correct)\n単語を置換するものを保存する
pspell_suggest /// array pspell_suggest ( int dictionary_link, string word)\n単語のスペルについて修正候補を示す
readline_add_history /// void readline_add_history ( string line)\nヒストリに1行追加する
readline_clear_history /// bool readline_clear_history ( void)\nヒストリをクリアする
readline_completion_function /// bool readline_completion_function ( string line)\n補完関数を登録する
readline_info /// mixed readline_info ( string [varname], string [newvalue])\n種々のreadlineの内部変数を取得/設定する
readline_list_history /// array readline_list_history ( void)\nヒストリのリスト
readline_read_history /// bool readline_read_history ( string filename)\nヒストリを読み込む
readline_write_history /// boolean readline_write_history ( string filename)\nヒストリを書きこむ
readline /// string readline ( string [prompt])\n1行読み込む
recode_file /// bool recode_file ( string request, resource input, resource output)\n コード変換指令に基づきファイルからファイルにコード変換する 
recode_string /// string recode_string ( string request, string string)\nコード変換指令に基づき文字列のコードを変換する
recode /// string recode ( string request, string string)\nコード変換指令に基づき文字列を変換する
preg_grep /// array preg_grep ( string pattern, array input)\n パターンにマッチする配列の要素を返す 
preg_match_all /// int preg_match_all ( string pattern, string subject, array matches, int [order])\nグローバル正規表現検索を行う
preg_match /// int preg_match ( string pattern, string subject [, array matches])\n正規表現検索を行う
preg_quote /// string preg_quote ( string str, string [delimiter])\n正規表現文字をクオートする
preg_replace_callback /// mixed preg_replace_callback ( mixed pattern, mixed callback, mixed subject [, int limit])\n 正規表現検索を行い、コールバック関数を使用して置換を行う 
preg_replace /// mixed preg_replace ( mixed pattern, mixed replacement, mixed subject, int [limit])\n正規表現検索および置換を行う
preg_split /// array preg_split ( string pattern, string subject, int [limit], int [flags])\n正規表現で文字列を分割する
qdom_error /// string qdom_error ( void)\n 直近のQDOM操作からのエラー文字列またはエラー発生時にFALSEを返す 
qdom_tree /// object qdom_tree ( string )\nxml文字列のツリーを作成する
ereg_replace /// string ereg_replace ( string pattern, string replacement, string string)\n正規表現による置換
ereg /// int ereg ( string pattern, string string, array [regs])\n正規表現にマッチさせる
eregi_replace /// string eregi_replace ( string pattern, string replacement, string string)\n大文字小文字を区別せずに正規表現による置換を行う
eregi /// int eregi ( string pattern, string string, array [regs])\n 大文字小文字を区別せずに正規表現によるマッチングを行う 
split /// array split ( string pattern, string string, int [limit])\n正規表現により文字列を分割し、配列に格納する
spliti /// array spliti ( string pattern, string string, int [limit])\n 大文字小文字を区別しない正規表現により文字列を分割し、配列に入れる 
sql_regcase /// string sql_regcase ( string string)\n 大文字小文字を区別しないマッチングのための正規表現を作成する 
ftok /// int ftok ( string pathname, string proj)\n パス名とプロジェクトIDをSystem V IPCキーに変換する 
msg_get_queue /// int msg_get_queue ( int key [, int perms])\n Create or attach to a message queue 
msg_receive /// bool msg_receive ( int queue, int desiredmsgtype, int msgtype, int maxsize, mixed message [, bool unserialize [, int flags [, int errorcode]]])\n Receive a message from a message queue 
msg_remove_queue /// bool msg_remove_queue ( int queue)\n Destroy a message queue 
msg_send /// bool msg_send ( int queue, int msgtype, mixed message [, bool serialize [, bool blocking [, int errorcode]]])\n Send a message to a message queue 
msg_set_queue /// bool msg_set_queue ( int queue, array data)\n Set information in the message queue data structure 
msg_stat_queue /// array msg_stat_queue ( int queue)\n Returns information from the message queue data structure 
sem_acquire /// bool sem_acquire ( int sem_identifier)\nセマフォを得ます
sem_get /// int sem_get ( int key, int [max_acquire], int [perm])\nセマフォ ID を得ます
sem_release /// bool sem_release ( int sem_identifier)\nセマフォを解放します
sem_remove /// bool sem_remove ( int sem_identifier)\nセマフォを削除する
shm_attach /// int shm_attach ( int key, int [memsize], int [perm])\n共有メモリセグメントを作成またはオープンします
shm_detach /// int shm_detach ( int shm_identifier)\n共有メモリセグメントへの接続を閉じます
shm_get_var /// mixed shm_get_var ( int id, int variable_key)\n共有メモリから変数を返す
shm_put_var /// int shm_put_var ( int shm_identifier, int variable_key, mixed variable)\n共有メモリの変数を挿入または更新します
shm_remove_var /// int shm_remove_var ( int id, int variable_key)\n共有メモリから変数を削除します 
shm_remove /// int shm_remove ( int shm_identifier)\nUNIX システムから共有メモリを削除する
sesam_affected_rows /// int sesam_affected_rows ( string result_id)\n直近のクエリにより作用されたレコードの数を得る
sesam_commit /// bool sesam_commit ( void)\n SESAMデータベースへの待機中の更新処理をコミットする 
sesam_connect /// bool sesam_connect ( string catalog, string schema, string user)\nSESAM データベース接続をオープンする
sesam_diagnostic /// array sesam_diagnostic ( void)\n 直近のSESAMコールに関するステータス情報を返す 
sesam_disconnect /// bool sesam_disconnect ( void)\nSESAM接続から切り離す
sesam_errormsg /// string sesam_errormsg ( void)\n直近のSESAMコールのエラーメッセージを返す
sesam_execimm /// string sesam_execimm ( string query)\nSQL命令を直ちに実行する
sesam_fetch_array /// array sesam_fetch_array ( string result_id, int [whence], int [offset])\n連想配列としてレコードを1件取得
sesam_fetch_result /// mixed sesam_fetch_result ( string result_id, int [max_rows])\nクエリ結果の全てあるいは一部を返す
sesam_fetch_row /// array sesam_fetch_row ( string result_id, int [whence], int [offset])\n1件分のレコードを配列として取得
sesam_field_array /// array sesam_field_array ( string result_id)\n 結果の個々のカラムに関するメタ情報を返す 
sesam_field_name /// int sesam_field_name ( string result_id, int index)\n 結果集合のカラム名を返す 
sesam_free_result /// int sesam_free_result ( string result_id)\nクエリに関するリソースを開放する
sesam_num_fields /// int sesam_num_fields ( string result_id)\n結果集合のフィールド/カラム数を返す
sesam_query /// string sesam_query ( string query, bool [scrollable])\nSESAM SQL クエリを実行し、結果を準備する
sesam_rollback /// bool sesam_rollback ( void)\n SESAMデータベースに対する待機中の更新を破棄する 
sesam_seek_row /// bool sesam_seek_row ( string result_id, int whence, int [offset])\n 連続的に取得する際にスクロール可能なカーソルモードに設定する 
sesam_settransaction /// bool sesam_settransaction ( int isolation_level, int read_only)\nSESAM トランザクションパラメータ
session_cache_expire /// int session_cache_expire ( [int new_cache_expire])\nカレントのキャッシュの有効期限を返す
session_cache_limiter /// string session_cache_limiter ( string [cache_limiter])\nカレントのキャッシュリミッタを取得または設定する
session_decode /// bool session_decode ( string data)\n文字列からセッションデータをデコードする
session_destroy /// bool session_destroy ( void)\nセッションに登録されたデータを全て破棄する
session_encode /// string session_encode ( void)\n 現在のセッションデータを文字列としてエンコードする 
session_get_cookie_params /// array session_get_cookie_params ( void)\n セッションクッキーのパラメータを得る 
session_id /// string session_id ( string [id])\nカレントのセッションIDを取得または設定する
session_is_registered /// bool session_is_registered ( string name)\n 変数がセッションに登録されているかどうかを調べる 
session_module_name /// string session_module_name ( string [module])\n現在のセッションモジュールを取得または設定する
session_name /// string session_name ( string [name])\nカレントのセッション名を取得または設定する
session_readonly /// void session_readonly ( void)\nBegin session - reinitializes freezed variables, but no writeback on request end
session_register /// bool session_register ( mixed name, mixed [...])\n現在のセッションに1つ以上の変数を登録する
session_save_path /// string session_save_path ( string [path])\n 現在のセッションデータ保存パスを取得または設定する 
session_set_cookie_params /// void session_set_cookie_params ( int lifetime, string [path], string [domain])\n セッションクッキーパラメータを設定する 
session_set_save_handler /// void session_set_save_handler ( string open, string close, string read, string write, string destroy, string gc)\n ユーザ定義のセッション保存関数を設定する 
session_start /// bool session_start ( void)\nセッションデータを初期化する
session_unregister /// bool session_unregister ( string name)\n現在のセッションから変数の登録を削除する
session_unset /// void session_unset ( void)\n 全てのセッション変数を開放する 
session_write_close /// void session_write_close ( void)\nセッションデータを書き込んでセッションを終了する
shmop_close /// int shmop_close ( int shmid)\n共有メモリブロックを閉じる
shmop_delete /// int shmop_delete ( int shmid)\n共有メモリブロックを削除する
shmop_open /// int shmop_open ( int key, string flags, int mode, int size)\n共有メモリブロックを作成またはオープンする
shmop_read /// string shmop_read ( int shmid, int offset, int count)\n共有メモリブロックからデータを読み込む
shmop_size /// int shmop_size ( int shmid)\n共有メモリブロックの大きさを得る
shmop_write /// int shmop_write ( int shmid, string data, int offset)\n共有メモリブロックにデータを書き込む
swf_actiongeturl /// void swf_actiongeturl ( string url, string target)\n Shockwave FlashムービーからURLを得る 
swf_actiongotoframe /// void swf_actiongotoframe ( int framenumber)\n フレームを実行した後、停止する 
swf_actiongotolabel /// void swf_actiongotolabel ( string label)\n 指定したラベルを有するフレームを表示する 
swf_actionnextframe /// void swf_actionnextframe ( void)\n フレームを一つ進める 
swf_actionplay /// void swf_actionplay ( void)\n カレントのフレームからflashムービーの実行を開始する 
swf_actionprevframe /// void swf_actionprevframe ( void)\n フレームを一つ戻す 
swf_actionsettarget /// void swf_actionsettarget ( string target)\n アクションのコンテキストを設定する 
swf_actionstop /// void swf_actionstop ( void)\n カレントのフレームでflashムービーの実行を終了する 
swf_actiontogglequality /// void swf_actiontogglequality ( void)\n クオリティのローとハイを切替える 
swf_actionwaitforframe /// void swf_actionwaitforframe ( int framenumber, int skipcount)\n フレームがロードされていない場合にアクションをスキップする 
swf_addbuttonrecord /// void swf_addbuttonrecord ( int states, int shapeid, int depth)\n カレントのボタンの位置、外観、アクティブエリアを制御する 
swf_addcolor /// void swf_addcolor ( float r, float g, float b, float a)\n グローバル加算色を指定したrbga値に設定する 
swf_closefile /// void swf_closefile ( int [return_file])\n カレントのShockwave Flashファイルを閉じる 
swf_definebitmap /// void swf_definebitmap ( int objid, string image_name)\n ビットマップを定義する 
swf_definefont /// void swf_definefont ( int fontid, string fontname)\n フォントを定義する 
swf_defineline /// void swf_defineline ( int objid, float x1, float y1, float x2, float y2, float width)\n 線を定義する 
swf_definepoly /// void swf_definepoly ( int objid, array coords, int npoints, float width)\n ポリゴンを定義する 
swf_definerect /// void swf_definerect ( int objid, float x1, float y1, float x2, float y2, float width)\n 長方形を定義する 
swf_definetext /// void swf_definetext ( int objid, string str, int docenter)\n テキスト文字列を定義する 
swf_endbutton /// void swf_endbutton ( void)\n カレントのボタンの定義を終了する 
swf_enddoaction /// void swf_enddoaction ( void)\n カレントのアクションを終了する 
swf_endshape /// void swf_endshape ( void)\n カレントの形状の定義を完結する 
swf_endsymbol /// void swf_endsymbol ( void)\n シンボルの定義を終了する 
swf_fontsize /// void swf_fontsize ( float size)\n フォントの大きさを変更する 
swf_fontslant /// void swf_fontslant ( float slant)\n フォントの傾きを設定する 
swf_fonttracking /// void swf_fonttracking ( float tracking)\n カレントのフォントのトラッキングを設定する 
swf_getbitmapinfo /// array swf_getbitmapinfo ( int bitmapid)\n ビットマップに関する情報を得る 
swf_getfontinfo /// array swf_getfontinfo ( void)\n 大文字のAと小文字のxの高さをピクセル単位で得る 
swf_getframe /// int swf_getframe ( void)\n カレントのフレームのフレーム番号を得る 
swf_labelframe /// void swf_labelframe ( string name)\n カレントのフレームにラベルを付ける 
swf_lookat /// void swf_lookat ( float view_x, float view_y, float view_z, float reference_x, float reference_y, float reference_z, float twist)\n 視点変換を定義する 
swf_modifyobject /// void swf_modifyobject ( int depth, int how)\n オブジェクトを修正する 
swf_mulcolor /// void swf_mulcolor ( float r, float g, float b, float a)\n グローバル乗算色を指定したrbga値に設定する 
swf_nextid /// int swf_nextid ( void)\n 次の未使用のオブジェクトIDを返す 
swf_oncondition /// void swf_oncondition ( int transition)\n アクションリストのトリガとして使用されるトランジションを定義する 
swf_openfile /// void swf_openfile ( string filename, float width, float height, float framerate, float r, float g, float b)\n 新規にShockwave Flashファイルをオープンする 
swf_ortho2 /// void swf_ortho2 ( float xmin, float xmax, float ymin, float ymax)\n ユーザ座標の2D直交マッピングをカレントのビューポイントに定義する 
swf_ortho /// void swf_ortho ( float xmin, float xmax, float ymin, float ymax, float zmin, float zmax)\n カレントのビューポートにおけるユーザー座標の直交マッピングを定義する 
swf_perspective /// void swf_perspective ( float fovy, float aspect, float near, float far)\n 遠近法による投影変換を定義する 
swf_placeobject /// void swf_placeobject ( int objid, int depth)\n オブジェクトを画面に配置する 
swf_polarview /// void swf_polarview ( float dist, float azimuth, float incidence, float twist)\n 極座標で視点を定義する 
swf_popmatrix /// void swf_popmatrix ( void)\n 以前の変換行列を回復する 
swf_posround /// void swf_posround ( int round)\n オブジェクトを配置または移動する際の変換時の丸め処理を有効または無効にする 
swf_pushmatrix /// void swf_pushmatrix ( void)\n カレントの変換行列をスタックに入れる 
swf_removeobject /// void swf_removeobject ( int depth)\n オブジェクトを削除する 
swf_rotate /// void swf_rotate ( float angle, string axis)\n カレントの座標を回転する 
swf_scale /// void swf_scale ( float x, float y, float z)\n カレントの変換をスケリーングする 
swf_setfont /// void swf_setfont ( int fontid)\n カレントのフォントを変更する 
swf_setframe /// void swf_setframe ( int framenumber)\n 指定したフレームに切替える 
swf_shapearc /// void swf_shapearc ( float x, float y, float r, float ang1, float ang2)\n 円弧を描画する 
swf_shapecurveto3 /// void swf_shapecurveto3 ( float x1, float y1, float x2, float y2, float x3, float y3)\n 3次ベジエ曲線を描画する 
swf_shapecurveto /// void swf_shapecurveto ( float x1, float y1, float x2, float y2)\n 2点間に2次ベジエ曲線を描画する 
swf_shapefillbitmapclip /// void swf_shapefillbitmapclip ( int bitmapid)\n カレントの塗りつぶしモードをクリップ付きビットマップ 
swf_shapefillbitmaptile /// void swf_shapefillbitmaptile ( int bitmapid)\n カレントの塗りつぶしモードをタイル状のビットマップに設定する 
swf_shapefilloff /// void swf_shapefilloff ( void)\n 塗りつぶしをオフにする 
swf_shapefillsolid /// void swf_shapefillsolid ( float r, float g, float b, float a)\n カレントの塗りつぶし色を指定した色に設定する 
swf_shapelinesolid /// void swf_shapelinesolid ( float r, float g, float b, float a, float width)\n カレントの行のスタイルを設定する 
swf_shapelineto /// void swf_shapelineto ( float x, float y)\n 線を描画する 
swf_shapemoveto /// void swf_shapemoveto ( float x, float y)\n カレントの位置を移動する 
swf_showframe /// void swf_showframe ( void)\n カレントのフレームを表示する 
swf_startbutton /// void swf_startbutton ( int objid, int type)\n ボタンの定義を開始する 
swf_startdoaction /// void swf_startdoaction ( void)\n カレントのフレームのアクションリストの記述を開始する 
swf_startshape /// void swf_startshape ( int objid)\n 複雑な形状を開始する 
swf_startsymbol /// void swf_startsymbol ( int objid)\n シンボルを定義する 
swf_textwidth /// float swf_textwidth ( string str)\n 文字列の幅を得る 
swf_translate /// void swf_translate ( float x, float y, float z)\n カレントの座標軸を変換する 
swf_viewport /// void swf_viewport ( float xmin, float xmax, float ymin, float ymax)\n 描画を行う範囲を選択する 
snmp_get_quick_print /// bool snmp_get_quick_print ( void)\n UCD ライブラリの quick_print の現在の設定値を取得する 
snmp_set_quick_print /// void snmp_set_quick_print ( bool quick_print)\nUCB SNMP ライブラリで quick_print の値を設定する 
snmpget /// string snmpget ( string hostname, string community, string object_id, int [timeout], int [retries])\nSNMPオブジェクトを取得する
snmprealwalk /// array snmprealwalk ( string host, string community, string object_id [, int timeout [, int retries]])\n 指定したオブジェクトに関するオブジェクトIDを含む全てのオブジェク トを返す 
snmpset /// bool snmpset ( string hostname, string community, string object_id, string type, mixed value, int [timeout], int [retries])\nSNMP オブジェクトを設定する
snmpwalk /// array snmpwalk ( string hostname, string community, string object_id, int [timeout], int [retries])\nエージェントから全てのSNMPオブジェクトを取りだす
snmpwalkoid /// array snmpwalkoid ( string hostname, string community, string object_id, int [timeout], int [retries])\nネットワークエンティティに関する情報ツリーの検索 
socket_accept /// int socket_accept ( resource socket)\nソケットへの接続を許可する
bind /// int socket_bind ( resource socket, string address, int [port])\nソケットに名前をバインドする
socket_clear_error /// void socket_clear_error ( [resource socket])\nClears the error on the socket or the last error code
socket_close /// bool socket_close ( resource socket)\nファイル記述子を閉じる
socket_connect /// int socket_connect ( resource socket, string address, int [port])\nソケット上の接続を初期化する
socket_create_listen /// resource socket_create_listen ( int port [, int backlog])\n 接続を受けつけるためにポートにソケットをオープンする 
socket_create_pair /// bool socket_create_pair ( int domain, int type, int protocol, array &fd)\n 区別できないソケットの組を作成し、fdに保存する 
socket_create /// resource socket_create ( int domain, int type, int protocol)\nソケットを作成する(通信時の終端)
socket_get_option /// mixed socket_get_option ( resource socket, int level, int optname)\nGets socket options for the socket 
socket_getpeername /// bool socket_getpeername ( resource socket, string &addr [, int &port])\n fdを指定、ソケットのリモート側を既述するsa.sin_addrおよび sa.sin_portの値をaddrおよびportの文字列に保存する 
socket_getsockname /// bool socket_getsockname ( resource socket, string &addr [, int &port])\n fdを指定、ソケットのローカル側を既述するsa.sin_addrおよび sa.sin_portの値をaddrおよびportの文字列に保存する 
socket_iovec_add /// bool socket_iovec_add ( resource iovec, int iov_len)\n新規ベクトルを収集用配列に追加する
socket_iovec_alloc /// resource socket_iovec_alloc ( int num_vectors [, int ])\n sendmsg, recvmsg, writev, readvで使用するよう'struct iovec'を構築する 
socket_iovec_delete /// bool socket_iovec_delete ( resource iovec, int iov_pos)\nベクトルの配列からベクトルを削除する
socket_iovec_fetch /// string socket_iovec_fetch ( resource iovec, int iovec_position)\n iovec_id[iovec_position] で指定したiovecに保存されたデータを返す 
socket_iovec_free /// bool socket_iovec_free ( resource iovec)\niovec_idで指定したiovecを解放する
socket_iovec_set /// bool socket_iovec_set ( resource iovec, int iovec_position, string new_val)\n iovec_id[iovec_position]に保持されたデータにnew_valを設定する 
socket_last_error /// int socket_last_error ( resource socket)\nソケットの直近のエラーを返す/クリアする
socket_listen /// int socket_listen ( resource socket, int backlog)\nソケット上で接続待ち(listen)する
socket_read /// string socket_read ( resource socket_des, string buffer, int length [, int type])\nソケットから読みこむ
socket_readv /// bool socket_readv ( resource socket, resource iovec_id)\n iovec_idで定義した収集用配列を用いてfdから読み込む 
socket_recv /// string socket_recv ( resource socket, int len, int flags)\n接続したソケットからデータを受信する
socket_recvfrom /// int socket_recvfrom ( resource socket, string &buf, int len, int flags, string &name [, int &port])\n 接続しているかどうかによらず、ソケットからデータを受信する 
socket_recvmsg /// bool socket_recvmsg ( resource socket, resource iovec, array &control, int &controllen, int &flags, string &addr [, int &port])\n 接続用であるかどうかにかかわらずソケットのメッセージを受信する 
socket_select /// int socket_select ( resource read_fd, resource write_fd, resource except_fd, int tv_sec [, int tv_usec])\n tv_secとtv_usec で指定した有効時間でselect()システムコールを実行 する 
socket_send /// int socket_send ( resource socket, string buf, int len, int flags)\n接続したソケットにデータを送信する
socket_sendmsg /// bool socket_sendmsg ( resource socket, resource iovec, int flags, string addr [, int port])\n 接続用であるかどうかにかかわらずソケットにメッセージを送信する 
socket_sendto /// int socket_sendto ( resource socket, string buf, int len, int flags, string addr [, int port])\n 接続しているかどうかによらずソケットにメッセージを送信する 
socket_set_nonblock /// bool socket_set_nonblock ( resource socket)\nファイル記述子fdを非ブロックモードに設定する
socket_set_option /// bool socket_set_option ( resource socket, int level, int optname, int )\nSets socket options for the socket
socket_shutdown /// bool socket_shutdown ( resource socket [, int how])\n 受信、送信、または送受信用のソケットをシャットダウンする 
socket_strerror /// string socket_strerror ( int errno)\nソケットエラーの内容を文字列として返す
socket_write /// int socket_write ( resource socket_des, string &buffer, int length)\nソケットに書き込む
socket_writev /// bool socket_writev ( resource socket, resource iovec_id)\n iovec_idで定義した収集用配列を用いてファイル記述子fdに書き込む 
addcslashes /// string addcslashes ( string str, string charlist)\nC言語と同様にスラッシュで文字列をクォートする
addslashes /// string addslashes ( string str)\n文字列をスラッシュでクォートする
bin2hex /// string bin2hex ( string str)\n バイナリデータを16進表現に変換する 
chop /// この関数は、\nrtrim()へのエイリアス
chr /// string chr ( int ascii)\n特定の文字を返す
chunk_split /// string chunk_split ( string string [, int chunklen [, string end]])\n文字列をより小さな部分に分割する
convert_cyr_string /// string convert_cyr_string ( string str, string from, string to)\n Cyrillic 文字コードを他のコードに変換する 
count_chars /// mixed count_chars ( string string, int [mode])\n 文字列で使用されている文字に関する情報を返す 
crc32 /// int crc32 ( string str)\n文字列の crc32 多項式計算を行う
crypt /// string crypt ( string str, string [salt])\n文字列の一方向の暗号化(ハッシュ化)を行う
echo /// echo ( string arg1 [, string argn...])\n1つ以上の文字列を出力する
explode /// array explode ( string separator, string string [, int limit])\n文字列を文字列により分割する
get_html_translation_table /// string get_html_translation_table ( int table [, int quote_style])\n htmlspecialchars() および htmlentities() で使用される変換テーブルを返す 
get_meta_tags /// array get_meta_tags ( string filename, int [use_include_path])\n ファイルから全てのメタタグ属性を展開し、配列を返す 
hebrev /// string hebrev ( string hebrew_text [, int max_chars_per_line])\n Hebrew 論理テキストを可視テキストに変換 
hebrevc /// string hebrevc ( string hebrew_text [, int max_chars_per_line])\n Hebrew 論理テキストを改行を変換して可視テキストに変換する 
html_entity_decode /// string html_entity_decode ( string string [, int quote_style [, string charset]])\n Convert all HTML entities to their applicable characters 
htmlentities /// string htmlentities ( string string, int [quote_style], string [charset])\n 適用可能な文字を全てHTMLエンティティに変換する 
htmlspecialchars /// string htmlspecialchars ( string string, int [quote_style] [, string charset])\n 特殊文字をHTMLエンティティに変換する 
implode /// string implode ( string glue, array pieces)\n配列要素を文字列により連結する
join /// string join ( string glue, array pieces)\n配列要素を文字列により連結する
levenshtein /// int levenshtein ( string str1, string str2)\n 二つの文字列のLevenshtein距離を計算する 
localeconv /// array localeconv ( void)\n数値に関するフォーマット情報を得る
ltrim /// string ltrim ( string str [, string charlist])\n 文字列の最初から空白文字を取り除く 
md5_file /// string md5_file ( string filename)\n指定したファイルのMD5ハッシュ値を計算する
md5 /// string md5 ( string str)\n文字列のmd5ハッシュ値を計算する
metaphone /// string metaphone ( string str)\n文字列の metaphone キーを計算する
nl_langinfo /// string nl_langinfo ( int item)\n 言語及びロケール情報を検索する 
nl2br /// string nl2br ( string string)\n改行文字の前にHTMLの改行指定文字を挿入する
number_format /// string number_format ( float number [, int decimals [, string dec_point [, string thousands_sep]]])\nFormat a number with grouped thousands
ord /// int ord ( string string)\n文字のASCII値を返す
parse_str /// void parse_str ( string str [, array arr])\n文字列を処理し、変数に代入する
print /// print ( string arg)\n文字列を出力する
printf /// void printf ( string format [, mixed args])\nフォーマット済みの文字列を出力する
quoted_printable_decode /// string quoted_printable_decode ( string str)\n quoted-printable文字列を8ビット文字列に変換 
QuoteMeta /// string quotemeta ( string str)\nメタ文字をクォートする
rtrim /// string rtrim ( string str [, string charlist])\n文字列の最後から空白文字を削除する
setlocale /// string setlocale ( mixed category, string locale)\nロケール情報をセットする
sha1_file /// string sha1_file ( string filename)\nCalculate the sha1 hash of a file
sha1 /// string sha1 ( string str)\nCalculate the sha1 hash of a string
similar_text /// int similar_text ( string first, string second [, float percent])\n二つの文字列の間の類似性を見積もる
soundex /// string soundex ( string str)\n文字列のsoundexキーを計算する
sprintf /// string sprintf ( string format [, mixed args])\nフォーマットされた文字列を返す
sscanf /// mixed sscanf ( string str, string format [, string var1])\nフォーマット文字列に基づき入力を処理する
str_pad /// string str_pad ( string input, int pad_length [, string pad_string [, int pad_type]])\n文字列を固定長の他の文字列で埋める
str_repeat /// string str_repeat ( string input_str, int multiplier)\n文字列を反復する
str_replace /// mixed str_replace ( mixed search, mixed replace, mixed subject)\n 文字列 subject 中の文字列 search を全て文字列replaceに置換する 
str_rot13 /// string str_rot13 ( string str)\n文字列にrot13変換を行う
str_word_count /// mixed str_word_count ( string string [, int format])\n Return information about words used in a string 
strcasecmp /// int strcasecmp ( string str1, string str2)\n 大文字小文字を区別しないバイナリにも使用可能な文字列比較を行う 
strchr /// string strchr ( string haystack, string needle)\n 文字が最初に現れるところを探す 
strcmp /// int strcmp ( string str1, string str2)\nバイナリでも使える文字列比較
strcoll /// int strcoll ( string str1, string str2)\nロケールに基づく文字列比較
strcspn /// int strcspn ( string str1, string str2)\n マスクにマッチしない最初のセグメントの長さを返す 
strip_tags /// string strip_tags ( string str [, string allowable_tags])\n文字列からHTMLおよびPHPタグを取り除く
stripcslashes /// string stripcslashes ( string str)\n addcslashesでクォートされた文字列をアンクォートする 
stripslashes /// string stripslashes ( string str)\n addslashesでクォートされた文字列のクォート部分を取り除く 
stristr /// string stristr ( string haystack, string needle)\n 大文字小文字を区別しない strstr() 
strlen /// int strlen ( string str)\n文字列の長さを得る
strnatcasecmp /// int strnatcasecmp ( string str1, string str2)\n "自然順"アルゴリズムにより大文字小文字を区別しない文字列比較を行う 
strnatcmp /// int strnatcmp ( string str1, string str2)\n "自然順"アルゴリズムにより文字列比較を行う 
strncasecmp /// int strncasecmp ( string str1, string str2, int len)\n バイナリ対応の大文字小文字を区別しない文字列比較を最初のn文字につ いて行う 
strncmp /// int strncmp ( string str1, string str2, int len)\n 最初のn文字についてバイナリ対応の文字列比較を行う 
strpos /// int strpos ( string haystack, string needle [, int offset])\n 文字列が最初に現れる場所を見つける 
strrchr /// string strrchr ( string haystack, string needle)\n 文字列中に文字が最後に現れる場所を取得する 
strrev /// string strrev ( string string)\n文字列を逆順にする
strrpos /// int strrpos ( string haystack, char needle)\n 文字列中に、ある文字が最後に現れる場所を探す 
strspn /// int strspn ( string str1, string str2)\n マスクに一致する最初のセグメントの長さを返す 
strstr /// string strstr ( string haystack, string needle)\n文字列が最初に現れる位置を見つける
strtok /// string strtok ( string arg1, string arg2)\n文字列をトークンに分割する
strtolower /// string strtolower ( string str)\n文字列を小文字にする
strtoupper /// string strtoupper ( string string)\n文字列を大文字にする
strtr /// string strtr ( string str, string from, string to)\n特定の文字を変換する
substr_count /// int substr_count ( string haystrack, string needle)\n副文字列の出現関数を数える
substr_replace /// string substr_replace ( string string, string replacement, int start, int [length])\n文字列の一部を置換する
substr /// string substr ( string string, int start, int [length])\n文字列の一部分を返す
trim /// string trim ( string str [, string charlist])\n 文字列の先頭および末尾にあるホワイトスペースを取り除く 
ucfirst /// string ucfirst ( string str)\n文字列の最初の文字を大文字にする
ucwords /// string ucwords ( string str)\n 文字列の各単語の最初の文字を大文字にする 
vprintf /// void vprintf ( string format, array args)\nフォーマットされた文字列を出力する
vsprintf /// string vsprintf ( string format, array args)\nフォーマットされた文字列を返す
wordwrap /// string wordwrap ( string str, int [width], string [break], int [cut])\n 文字列分割文字を使用して指定した文字数数に文字列を分割する 
sybase_affected_rows /// int sybase_affected_rows ( int [link_identifier])\n直近のクエリーで変更された行の数を得る
sybase_close /// bool sybase_close ( int link_identifier)\nSybase 接続を閉じます
sybase_connect /// int sybase_connect ( string servername, string username, string password [, string charset])\nSybase サーバー接続をオープンします
sybase_data_seek /// bool sybase_data_seek ( int result_identifier, int row_number)\n内部行ポインタを移動します
sybase_fetch_array /// array sybase_fetch_array ( int result)\n行を配列として取り込みます
sybase_fetch_field /// object sybase_fetch_field ( int result [, int field_offset])\nフィールド情報を得ます
sybase_fetch_object /// int sybase_fetch_object ( int result)\n行をオブジェクトとして取り込みます
sybase_fetch_row /// array sybase_fetch_row ( int result)\n行を配列として得ます
sybase_field_seek /// int sybase_field_seek ( int result, int field_offset)\nフィールドオフセットを設定します
sybase_free_result /// bool sybase_free_result ( int result)\n結果メモリを開放します
sybase_get_last_message /// string sybase_get_last_message ( void)\nサーバーから直近のメッセージを返す
sybase_min_client_severity /// void sybase_min_client_severity ( int severity)\nクライアントのseverityを最小に設定する
sybase_min_error_severity /// void sybase_min_error_severity ( int severity)\nエラーのseverityを最小に設定する
sybase_min_message_severity /// void sybase_min_message_severity ( int severity)\nメッセージのチェックを最小に設定する
sybase_min_server_severity /// void sybase_min_server_severity ( int severity)\nサーバーチェックを最小に設定する
sybase_num_fields /// int sybase_num_fields ( int result)\n結果におけるフィールドの数を得ます
sybase_num_rows /// int sybase_num_rows ( int result)\n結果における行の数を得ます
sybase_pconnect /// int sybase_pconnect ( string servername, string username, string password [, string charset])\nSybaseの持続的な接続をオープンします
sybase_query /// int sybase_query ( string query, int link_identifier)\nSybase クエリーを送信します
sybase_result /// string sybase_result ( int result, int row, mixed field)\n結果データを得ます
sybase_select_db /// bool sybase_select_db ( string database_name, int link_identifier)\nSybase データベースを選択します
token_get_all /// array token_get_all ( string source)\nSplit given source in tokens
token_name /// string token_name ( int type)\nGet the name of a given token
base64_decode /// string base64_decode ( string encoded_data)\nbase64方式によりエンコードされたデータのデコード
base64_encode /// string base64_encode ( string data)\nbase64方式によるデータのエンコード
parse_url /// array parse_url ( string url)\nURL を解釈し、その構成要素を返します
rawurldecode /// string rawurldecode ( string str)\nURL エンコードされた文字列をデコードする
rawurlencode /// string rawurlencode ( string str)\nRFC1738に基づきURLエンコードを行う
urldecode /// string urldecode ( string str)\nエンコードされたURL文字列のデコード
urlencode /// string urlencode ( string str)\nURL文字列のエンコード
doubleval /// この関数は、\nfloatval()のエイリアス
empty /// boolean empty ( mixed var)\n変数がセットされているかどうかを検査する
floatval /// float floatval ( mixed var)\n変数のfloat値を取得する
get_defined_vars /// array get_defined_vars ( void)\n 全ての定義済の変数を配列で返す 
get_resource_type /// string get_resource_type ( resource handle)\nリソース型を返す
gettype /// string gettype ( mixed var)\n変数の型を取得する
import_request_variables /// bool import_request_variables ( string types [, string prefix])\n GET/POST/Cookie変数をグローバルスコープにインポートする 
intval /// int intval ( mixed var, int [base])\n変数の整数としての値を取得する
is_array /// bool is_array ( mixed var)\n変数が配列かどうかを検査する
is_bool /// bool is_bool ( mixed var)\n 変数がbooleanであるかを調べる 
is_callable /// bool is_callable ( mixed var [, bool syntax_only [, string callable_name]])\n 引数が有効なコール可能な構造であるかどうかを調べる 
is_double /// この関数は、\nis_float()のエイリアス
is_float /// bool is_float ( mixed var)\n変数がfloatかどうか調べる
is_int /// bool is_int ( mixed var)\n 変数が整数かどうかを検査する
is_integer /// この関数は、\nis_int()のエイリアス
is_long /// この関数は、\nis_int()のエイリアス
is_null /// bool is_null ( mixed var)\n 変数が NULLかどうか調べる 
is_numeric /// bool is_numeric ( mixed var)\n指定した変数が数字または数値文字列であるかを調べる
is_object /// bool is_object ( mixed var)\n変数がオブジェクトかどうかを検査する
is_real /// この関数は、\nis_float()のエイリアス
is_resource /// bool is_resource ( mixed var)\n 変数がリソースかどうかを調べる 
is_scalar /// bool is_scalar ( mixed var)\n 変数がスカラーかどうかを調べる 
is_string /// bool is_string ( mixed var)\n変数が文字列かどうかを検査する
isset /// int isset ( mixed var)\n変数がセットされているかどうかを検査する
print_r /// void print_r ( mixed expression)\n 指定した変数に関する情報を解りやすく出力する 
serialize /// string serialize ( mixed value)\n 値の保存可能な表現を生成する 
settype /// bool settype ( mixed var, string type)\n変数の型をセットする
strval /// string strval ( mixed var)\n変数の文字列としての値を得ます
unserialize /// mixed unserialize ( string str)\n保存用表現から PHP の値を生成する
unset /// void unset ( mixed var, mixed [var], [...])\n指定した変数の割当を解除する
var_dump /// void var_dump ( mixed expression [, mixed expression [, ...]])\n 指定した変数に関する情報をダンプする 
var_export /// mixed var_export ( mixed expression [, int return])\n 変数の文字列表現を出力または返す 
vpopmail_add_alias_domain_ex /// bool vpopmail_add_alias_domain_ex ( string olddomain, string newdomain)\n既存の仮想ドメインにエイリアスを追加する
vpopmail_add_alias_domain /// bool vpopmail_add_alias_domain ( string domain, string aliasdomain)\n仮想ドメインへのエイリアスを追加する
vpopmail_add_domain_ex /// bool vpopmail_add_domain_ex ( string domain, string passwd [, string quota [, string bounce [, bool apop]]])\n新規に仮想ドメインを追加する
vpopmail_add_domain /// bool vpopmail_add_domain ( string domain, string dir, int uid, int gid)\n仮想ドメインを新たに追加する
vpopmail_add_user /// bool vpopmail_add_user ( string user, string domain, string password [, string gecos [, bool apop]])\n指定した仮想ドメインに新規ユーザを追加する
vpopmail_alias_add /// bool vpopmail_alias_add ( string user, string domain, string alias)\n仮想エイリアスを追加する
vpopmail_alias_del_domain /// bool vpopmail_alias_del_domain ( string domain)\nあるドメインに関する仮想エイリアスを全て削除する
vpopmail_alias_del /// bool vpopmail_alias_del ( string user, string domain)\nあるユーザの仮想エイリアスを全て削除する
vpopmail_alias_get_all /// array vpopmail_alias_get_all ( string domain)\nあるドメインに関するエイリアスを全て取得する
vpopmail_alias_get /// array vpopmail_alias_get ( string alias, string domain)\nあるドメインに関するエイリアスを取得する
vpopmail_auth_user /// bool vpopmail_auth_user ( string user, string domain, string password [, string apop])\n ユーザ名/ドメイン/パスワードの認証を試み、true/falseを返す 
vpopmail_del_domain_ex /// bool vpopmail_del_domain_ex ( string domain)\n仮想ドメインを削除する
vpopmail_del_domain /// bool vpopmail_del_domain ( string domain)\n仮想ドメインを削除する
vpopmail_del_user /// bool vpopmail_del_user ( string user, string domain)\n仮想ドメインからユーザを削除する
vpopmail_error /// string vpopmail_error ( void)\n 直近のvpopmailエラーに関するエラーメッセージを取得する 
vpopmail_passwd /// bool vpopmail_passwd ( string user, string domain, string password)\n仮想ユーザのパスワードを変更する
vpopmail_set_user_quota /// bool vpopmail_set_user_quota ( string user, string domain, string quota)\n仮想ユーザの容量制限(クオータ)を設定する
w32api_deftype /// int w32api_deftype ( string typename, string member1_type, string member1_name)\n他のw32api_functionsで使用するために型を定義する
w32api_init_dtype /// resource w32api_init_dtype ( string typename, mixed val1, mixed val2)\n データ型typenameのインスタンスを作成し、val1, val2, 関数の値で埋 める 
w32api_invoke_function /// mixed w32api_invoke_function ( string funcname)\n 関数名の後ろで指定された引数を指定して関数funcnameを実行する 
w32api_register_function /// bool w32api_register_function ( string libary, string function_name)\n PHPを保持するライブラリから関数function_nameを登録する 
w32api_set_call_method /// void w32api_set_call_method ( int method)\nカレントメソッドの使用値を設定する
wddx_add_vars /// wddx_add_vars ( int packet_id, mixed name_var, mixed [...])\n指定したIDのWDDXパケットを追加する
wddx_deserialize /// mixed wddx_deserialize ( string packet)\nシリアル化された WDDX パケットを元に戻す
wddx_packet_end /// string wddx_packet_end ( int packet_id)\n指定した ID の WDDX パケットを終了する
wddx_packet_start /// int wddx_packet_start ( string [comment])\n 新規の WDDX パケットを内部の構造体を用いて開始する 
wddx_serialize_value /// string wddx_serialize_value ( mixed var, string [comment])\n値をWDDXパケットにシリアル化する
wddx_serialize_vars /// string wddx_serialize_vars ( mixed var_name, mixed [...])\n変数を WDDX パケットにシリアル化する
utf8_decode /// string utf8_decode ( string data)\n UTF-8 エンコードされたISO-8859-1文字列をシングルバイトの ISO-8859-1 に変換する 
utf8_encode /// string utf8_encode ( string data)\nISO-8859-1 文字列を UTF-8 にエンコードする
xml_error_string /// string xml_error_string ( int code)\nXML パーサのエラー文字列を得る
xml_get_current_byte_index /// int xml_get_current_byte_index ( int parser)\nカレントの XML パーサのバイトインデックスを得る
xml_get_current_column_number /// int xml_get_current_column_number ( int parser)\nXML パーサのカレントのカラム番号を得る
xml_get_current_line_number /// int xml_get_current_line_number ( int parser)\nXML パーサのカレントの行番号を得る
xml_get_error_code /// int xml_get_error_code ( int parser)\nXML パーサのエラーコードを得る
xml_parse_into_struct /// int xml_parse_into_struct ( int parser, string data, array &values, array &index)\n配列構造体にXMLデータを処理する
xml_parse /// int xml_parse ( int parser, string data, int [isFinal])\nXML ドキュメントの処理を開始する
xml_parser_create_ns /// int xml_parser_create_ns ( [string encoding [, string sep]])\nXMLパーサを生成する
xml_parser_create /// int xml_parser_create ( string [encoding])\nXML パーサを作成する
xml_parser_free /// string xml_parser_free ( int parser)\nXML パーサを解放する
xml_parser_get_option /// mixed xml_parser_get_option ( int parser, int option)\nXML パーサからオプションを得る
xml_parser_set_option /// int xml_parser_set_option ( int parser, int option, mixed value)\nXML パーサのオプションを設定する
xml_set_character_data_handler /// int xml_set_character_data_handler ( int parser, string handler)\n文字データハンドラを設定する
xml_set_default_handler /// int xml_set_default_handler ( int parser, string handler)\nデフォルトのハンドラを設定する
xml_set_element_handler /// int xml_set_element_handler ( int parser, string startElementHandler, string endElementHandler)\nstart および end 要素のハンドラを設定する
xml_set_end_namespace_decl_handler /// int xml_set_end_namespace_decl_handler ( int pind, string hdl)\n名前空間終了ハンドラを設定する
xml_set_external_entity_ref_handler /// int xml_set_external_entity_ref_handler ( int parser, string handler)\n外部リファレンスハンドラを設定する
xml_set_notation_decl_handler /// int xml_set_notation_decl_handler ( int parser, string handler)\n表記法宣言ハンドラを設定する
xml_set_object /// void xml_set_object ( int parser, object &object)\nオブジェクト内部でXMLパーサを使用する
xml_set_processing_instruction_handler /// int xml_set_processing_instruction_handler ( int parser, string handler)\n 処理命令 (PI) 用ハンドラを設定する 
xml_set_start_namespace_decl_handler /// int xml_set_start_namespace_decl_handler ( int pind, string hdl)\n名前空間開始ハンドラを設定する
xml_set_unparsed_entity_decl_handler /// int xml_set_unparsed_entity_decl_handler ( int parser, string handler)\n 処理されないエンティティ宣言用ハンドラを設定する 
xmlrpc_decode_request /// array xmlrpc_decode_request ( string xml, string method [, string encoding])\nXMLをネーティブなPHP型にデコードする
xmlrpc_decode /// array xmlrpc_decode ( string xml [, string encoding])\nXMLをネーティブなPHP型にデコードする
xmlrpc_encode_request /// string xmlrpc_encode_request ( string method, mixed params)\nメソッドリクエスト用のXMLを生成する
xmlrpc_encode /// string xmlrpc_encode ( mixed value)\nPHPの値に関するXMLを生成する
xmlrpc_get_type /// string xmlrpc_get_type ( mixed value)\n PHPの値に関するxmlrpc型を取得する。特にbase64及びdatetime文字列で有用 
xmlrpc_parse_method_descriptions /// array xmlrpc_parse_method_descriptions ( string xml)\nメソッド説明のリストにXMLをデコードする
xmlrpc_server_add_introspection_data /// int xmlrpc_server_add_introspection_data ( resource server, array desc)\nintrospectionドキュメントを追加する
xmlrpc_server_call_method /// mixed xmlrpc_server_call_method ( resource server, string xml, mixed user_data [, array output_options])\nXMLリクエストをパースし、メソッドをコールする
xmlrpc_server_create /// resource xmlrpc_server_create ( void)\nxmlrpcサーバを作成する
xmlrpc_server_destroy /// void xmlrpc_server_destroy ( resource server)\nサーバリソースを破棄する
xmlrpc_server_register_introspection_callback /// bool xmlrpc_server_register_introspection_callback ( resource server, string function)\nドキュメントを生成するPHP関数を登録する
xmlrpc_server_register_method /// bool xmlrpc_server_register_method ( resource server, string method_name, string function)\nメソッド名が一致するメソッドリソースにPHP関数を登録する
xmlrpc_set_type /// bool xmlrpc_set_type ( string value, string type)\nPHP文字列型用にxmlrpc型、base64またはdatetimeを設定する
xslt_create /// resource xslt_create ( void)\n新規のXSLTプロセッサを作成する
xslt_errno /// int xslt_errno ( resource xh)\nカレントエラー番号を返す
xslt_error /// mixed xslt_error ( resource xh)\nカレントのエラー文字列を返す
xslt_free /// void xslt_free ( resource xh)\nXSLT プロセッサを開放する
xslt_process /// mixed xslt_process ( resource xh, string xml, string xsl [, string result [, array arguments [, array parameters]]])\nXSLデータを有する文字列によりXMLデータを変換する
xslt_set_base /// void xslt_set_base ( resource xh, string uri)\n全てのXSLT変換用の基準URIを設定する
xslt_set_encoding /// void xslt_set_encoding ( resource xh, string encoding)\n XMLドキュメントをパースするエンコーディングを設定する 
xslt_set_error_handler /// void xslt_set_error_handler ( resource xh, mixed handler)\nXSLTプロセッサ用のエラーハンドラを設定する
xslt_set_log /// void xslt_set_log ( resource xh, mixed log)\nSet the log file to write log messages to
xslt_set_sax_handler /// void xslt_set_sax_handler ( resource xh, array handlers)\nXSLTプロセッサに SAX ハンドラを設定する
xslt_set_sax_handlers /// void xslt_set_sax_handlers ( resource processor, array handlers)\n XMLドキュメントを処理する際にコールされるSAXハンドラを設定する 
xslt_set_scheme_handler /// void xslt_set_scheme_handler ( resource xh, array handlers)\nXSLTプロセッサ用にスキーマハンドラを設定する
xslt_set_scheme_handlers /// void xslt_set_scheme_handlers ( resource processor, array handlers)\n XSLTプロセッサに関するスキーマハンドラを設定する 
yaz_addinfo /// int yaz_addinfo ( int id)\n詳細なエラー情報を返す
yaz_ccl_conf /// int yaz_ccl_conf ( int id, array config)\nCCLパーサを設定する
yaz_ccl_parse /// int yaz_ccl_parse ( int id, string query, array & result)\nCCLパーサを起動する
yaz_close /// int yaz_close ( int id)\nYAZ接続をクローズする
yaz_connect /// int yaz_connect ( string zurl [, mixed options])\n ターゲットへの接続およびZ接続を準備する。 
yaz_database /// int yaz_database ( int id, string databases)\n セッション内のデータベースを指定する 
yaz_element /// int yaz_element ( int id, string elementset)\n 取得時に要素集合の名前を指定する 
yaz_errno /// int yaz_errno ( int id)\nエラー番号を返す
yaz_error /// int yaz_error ( int id)\nエラーの内容を返す
yaz_hits /// int yaz_hits ( int id)\n直近の検索に関するヒット数を返す
yaz_itemorder /// int yaz_itemorder ( array args)\n ILLリクエストパッケージを関してZ39.50 Item Orderを準備する 
yaz_present /// int yaz_present ( void)\n (Z39.50による)取得の準備を行う 
yaz_range /// int yaz_range ( int id, int start, int number)\n 取得するレコードの最大数を指定する 
yaz_record /// int yaz_record ( int id, int pos, string type)\nレコードを返す
yaz_scan_result /// array yaz_scan_result ( int id [, array & result])\nスキャンリクエストの結果を返す
yaz_scan /// int yaz_scan ( int id, string type, string startterm [, array flags])\nスキャンの準備をする
yaz_search /// int yaz_search ( int id, string type, string query)\n検索を準備する
yaz_sort /// int yaz_sort ( int id, string criteria)\nソートの基準を設定する
yaz_syntax /// int yaz_syntax ( int id, string syntax)\n 取得用に適当なレコード構文を指定する 
yaz_wait /// int yaz_wait ( [ array options])\nZ39.50リクエストが完了するまで待つ
yp_all /// void yp_all ( string domain, string map, string callback)\n マップを走査し、各エントリの関数をコールする 
yp_cat /// array yp_cat ( string domain, string map)\n エントリマップを含む配列を返す 
yp_err_string /// string yp_err_string ( void)\n前の操作に関するエラー文字列を返す 
yp_errno /// int yp_errno ( void)\n前の操作のエラーコードを返す
yp_first /// array yp_first ( string domain, string map)\n 指定したマップから最初のキー/値の組を返す 
yp_get_default_domain /// int yp_get_default_domain ( void)\nデフォルト NIS ドメインを取得する
yp_master /// string yp_master ( string domain, string map)\n 指定したマップのマスターNISサーバーのマシン名を返す 
yp_match /// string yp_match ( string domain, string map, string key)\n検索した行を返す
yp_next /// array yp_next ( string domain, string map, string key)\nマップ map から次のキー/値の組を返す
yp_order /// int yp_order ( string domain, string map)\nマップの呼出番号を返す
zip_close /// void zip_close ( resource zip)\nZipファイルアーカイブを閉じる
zip_entry_close /// void zip_entry_close ( resource zip_entry)\nディレクトリエントリをクローズする
zip_entry_compressedsize /// int zip_entry_compressedsize ( resource zip_entry)\nディレクトリエントリの圧縮時のサイズを取得する
zip_entry_compressionmethod /// string zip_entry_compressionmethod ( resource zip_entry)\nディレクトリエントリの圧縮方法を取得する
zip_entry_filesize /// int zip_entry_filesize ( resource zip_entry)\nディレクトリエントリの実際のファイルサイズを取得する
zip_entry_name /// string zip_entry_name ( resource zip_entry)\nディレクトリエントリの名前を取得する
zip_entry_open /// bool zip_entry_open ( resource zip, resource zip_entry [, string mode])\n読込み用にディレクトリエントリをオープンする
zip_entry_read /// string zip_entry_read ( resource zip_entry [, int length])\nオープンされたディレクトリエントリから読み込む
zip_open /// resource zip_open ( string filename)\nZipファイルアーカイブをオープンする
zip_read /// resource zip_read ( resource zip)\nZipファイルアーカイブの中の次のエントリを読み込む
gzclose /// int gzclose ( int zp)\n開かれたgzファイルへのポインタを閉じる
gzcompress /// string gzcompress ( string data, int [level])\n文字列をdeflate圧縮する
gzdeflate /// string gzdeflate ( string data [, int level])\n文字列を deflate 圧縮する
gzencode /// string gzencode ( string data [, int level])\ngzip 圧縮された文字列を作成
gzeof /// int gzeof ( int zp)\ngz ファイルポインタにおいてファイル終端を調べる
gzfile /// array gzfile ( string filename, int [use_include_path])\ngzファイル全体を配列に読み込む
gzgetc /// string gzgetc ( int zp)\ngz ファイルへのポインタから文字を得る
gzgets /// string gzgets ( int zp, int length)\nファイルポインタから 1 行を得る
gzgetss /// string gzgetss ( int zp, int length, string [allowable_tags])\n gzファイルへのポインタから1行を得て、HTMLタグを取り除く 
gzinflate /// string gzinflate ( string data [, int length])\ndeflate圧縮された文字列を解凍する
gzopen /// int gzopen ( string filename, string mode [, int use_include_path])\ngz ファイルを開く
gzpassthru /// int gzpassthru ( int zp)\n gzファイルへのポインタから残りのデータ全部を出力する 
gzputs /// int gzputs ( int zp, string str, int [length])\ngz ファイルへのポインタに書き込む
gzread /// string gzread ( int zp, int length)\nバイナリ対応のgzファイル読み込み
gzrewind /// int gzrewind ( int zp)\ngz ファイルポインタの示す位置を元に戻す
gzseek /// int gzseek ( int zp, int offset)\ngz ファイルポインタの位置を移動する
gztell /// int gztell ( int zp)\ngzファイルポインタの読み込み/書き込み位置を返します
gzuncompress /// string gzuncompress ( string data, int [length])\ndeflate圧縮された文字列を解凍する
gzwrite /// int gzwrite ( int zp, string string, int [length])\nバイナリ対応のgzファイル書き込み
readgzfile /// int readgzfile ( string filename, int [use_include_path])\ngz ファイルを出力する
